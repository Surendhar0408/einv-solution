{
    "ExportedSolution": {
        "SolutionID": "1.003",
        "Description": "1.003_Monthly_revision",
        "Status": "Created",
        "CreatedTime": "2024-12-10T17:39:43.571706+08:00",
        "ExportedTime": "0001-01-01T06:55:25+06:55",
        "LastUpdated": "0001-01-01T06:55:25+06:55",
        "CreatedUser": "api_user",
        "UpdatedUser": "",
        "ExportedUser": "",
        "ExportComponents": [
            {
                "SolutionID": "1.003",
                "ComponentType": "BusinessObject",
                "ComponentID": "addLayout"
            },
            {
                "SolutionID": "1.003",
                "ComponentType": "BusinessObject",
                "ComponentID": "createEinvoice"
            },
            {
                "SolutionID": "1.003",
                "ComponentType": "BusinessObject",
                "ComponentID": "docUpload"
            },
            {
                "SolutionID": "1.003",
                "ComponentType": "BusinessObject",
                "ComponentID": "generate_report"
            },
            {
                "SolutionID": "1.003",
                "ComponentType": "BusinessObject",
                "ComponentID": "json_sumqty_by_item"
            },
            {
                "SolutionID": "1.003",
                "ComponentType": "BusinessObject",
                "ComponentID": "printReport"
            },
            {
                "SolutionID": "1.003",
                "ComponentType": "BusinessObject",
                "ComponentID": "submitEinvoiceToPortal"
            },
            {
                "SolutionID": "1.003",
                "ComponentType": "Dataset",
                "ComponentID": "initializeVersion"
            },
            {
                "SolutionID": "1.003",
                "ComponentType": "Dataset",
                "ComponentID": "refFieldInitialize"
            },
            {
                "SolutionID": "1.003",
                "ComponentType": "Topic",
                "ComponentID": "einv_header"
            },
            {
                "SolutionID": "1.003",
                "ComponentType": "Topic",
                "ComponentID": "einv_lines"
            },
            {
                "SolutionID": "1.003",
                "ComponentType": "Topic",
                "ComponentID": "interim_einv_line"
            },
            {
                "SolutionID": "1.003",
                "ComponentType": "Topic",
                "ComponentID": "rpt_parameter"
            }
        ]
    },
    "Topics": [
        {
            "Topic": {
                "Name": "einv_header",
                "Description": "E-Invoice Header",
                "Keys": [
                    "e_inv_no"
                ],
                "SendAlertOnFail": true,
                "DistributionList": [],
                "HotTopic": true,
                "FieldDefs": [
                    {
                        "FieldName": "e_inv_no",
                        "Description": "E-Invoice Number",
                        "Sequence": 1,
                        "DataType": "String",
                        "Length": 50,
                        "IsKey": true,
                        "IndexSequence": 1,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "comp",
                        "Description": "Financial Company",
                        "Sequence": 2,
                        "DataType": "Integer",
                        "Length": 4,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "tran",
                        "Description": "Finance Type",
                        "Sequence": 3,
                        "DataType": "String",
                        "Length": 3,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "idoc",
                        "Description": "Invoice Number",
                        "Sequence": 4,
                        "DataType": "Integer",
                        "Length": 8,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "doct",
                        "Description": "Invoice Type",
                        "Sequence": 5,
                        "DataType": "String",
                        "Length": 2,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "ccur",
                        "Description": "Invoice Currency Code",
                        "Sequence": 6,
                        "DataType": "String",
                        "Length": 3,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "paym",
                        "Description": "Payment Mode",
                        "Sequence": 7,
                        "DataType": "String",
                        "Length": 3,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "cvat",
                        "Description": "Tax Type",
                        "Sequence": 8,
                        "DataType": "String",
                        "Length": 9,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "sctg",
                        "Description": "Sales Category",
                        "Sequence": 9,
                        "DataType": "String",
                        "Length": 10,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": true,
                            "ListID": "sales_catg",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "dataset",
                        "Description": "Dataset",
                        "Sequence": 10,
                        "DataType": "String",
                        "Length": 3,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "line_cnt",
                        "Description": "Line Count",
                        "Sequence": 11,
                        "DataType": "Integer",
                        "Length": 4,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "s_line_cnt",
                        "Description": "Source Line Count",
                        "Sequence": 12,
                        "DataType": "Integer",
                        "Length": 4,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "sup_name",
                        "Description": "Supplier Name",
                        "Sequence": 13,
                        "DataType": "String",
                        "Length": 300,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "sup_cont_num",
                        "Description": "Supplier Contact Number",
                        "Sequence": 14,
                        "DataType": "String",
                        "Length": 20,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "sup_email",
                        "Description": "Supplier Mail",
                        "Sequence": 15,
                        "DataType": "String",
                        "Length": 320,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "sup_sst_reg",
                        "Description": "Supplier SST Registration",
                        "Sequence": 16,
                        "DataType": "String",
                        "Length": 17,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "sup_ttx_no",
                        "Description": "Supplier Tourism Tax Number",
                        "Sequence": 17,
                        "DataType": "String",
                        "Length": 17,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "sup_tin",
                        "Description": "Supplier TIN",
                        "Sequence": 18,
                        "DataType": "String",
                        "Length": 14,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "sup_reg_brn",
                        "Description": "Supplier Registration Number",
                        "Sequence": 19,
                        "DataType": "String",
                        "Length": 20,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "sup_reg_nric",
                        "Description": "Supplier NRIC",
                        "Sequence": 20,
                        "DataType": "String",
                        "Length": 12,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "sup_reg_passport",
                        "Description": "Supplier Passport Number",
                        "Sequence": 21,
                        "DataType": "String",
                        "Length": 12,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "sup_reg_army",
                        "Description": "Supplier Army Identification",
                        "Sequence": 22,
                        "DataType": "String",
                        "Length": 12,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "sup_badsca",
                        "Description": "Supplier Business Activity",
                        "Sequence": 23,
                        "DataType": "String",
                        "Length": 300,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "sup_bank_acc",
                        "Description": "Supplier Bank Account Number",
                        "Sequence": 24,
                        "DataType": "String",
                        "Length": 150,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "sup_msic",
                        "Description": "Supplier MSIC Code",
                        "Sequence": 25,
                        "DataType": "String",
                        "Length": 5,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "sup_adrs",
                        "Description": "Supplier Address Code",
                        "Sequence": 26,
                        "DataType": "String",
                        "Length": 9,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "sup_city",
                        "Description": "Supplier City",
                        "Sequence": 27,
                        "DataType": "String",
                        "Length": 150,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "sup_postal_zone",
                        "Description": "Supplier Postal Code",
                        "Sequence": 28,
                        "DataType": "String",
                        "Length": 10,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "sup_adrs_line0",
                        "Description": "Supplier Address Line 0",
                        "Sequence": 29,
                        "DataType": "String",
                        "Length": 400,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "sup_adrs_line1",
                        "Description": "Supplier Address Line 1",
                        "Sequence": 30,
                        "DataType": "String",
                        "Length": 400,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "sup_adrs_line2",
                        "Description": "Supplier Address Line 2",
                        "Sequence": 31,
                        "DataType": "String",
                        "Length": 400,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "sup_country",
                        "Description": "Supplier Country Code",
                        "Sequence": 32,
                        "DataType": "String",
                        "Length": 3,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "ccty",
                            "RefersTo": "country"
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "sup_cste",
                        "Description": "Supplier State Code",
                        "Sequence": 33,
                        "DataType": "String",
                        "Length": 3,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "code",
                            "RefersTo": "state_codes"
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "inv_bp",
                        "Description": "Buyer Code",
                        "Sequence": 34,
                        "DataType": "String",
                        "Length": 9,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "buy_name",
                        "Description": "Buyer Name",
                        "Sequence": 35,
                        "DataType": "String",
                        "Length": 300,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "buy_cont_num",
                        "Description": "Buyer Contact Number",
                        "Sequence": 36,
                        "DataType": "String",
                        "Length": 20,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "buy_email",
                        "Description": "Buyer Mail",
                        "Sequence": 37,
                        "DataType": "String",
                        "Length": 320,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "buy_sst_reg",
                        "Description": "Buyer SST Registration",
                        "Sequence": 38,
                        "DataType": "String",
                        "Length": 17,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "buy_tin",
                        "Description": "Buyer TIN",
                        "Sequence": 39,
                        "DataType": "String",
                        "Length": 17,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "buy_reg_brn",
                        "Description": "Buyer Registration Number",
                        "Sequence": 40,
                        "DataType": "String",
                        "Length": 14,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "buy_reg_nric",
                        "Description": "Buyer NRIC",
                        "Sequence": 41,
                        "DataType": "String",
                        "Length": 12,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "buy_reg_passport",
                        "Description": "Buyer Passport",
                        "Sequence": 42,
                        "DataType": "String",
                        "Length": 12,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "buy_reg_army",
                        "Description": "Buyer Army",
                        "Sequence": 43,
                        "DataType": "String",
                        "Length": 12,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "buy_adrs",
                        "Description": "Buyer Address",
                        "Sequence": 44,
                        "DataType": "String",
                        "Length": 9,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "buy_city",
                        "Description": "Buyer City",
                        "Sequence": 45,
                        "DataType": "String",
                        "Length": 150,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "buy_postal_zone",
                        "Description": "Buyer Postal Code",
                        "Sequence": 46,
                        "DataType": "String",
                        "Length": 10,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "buy_adrs_line0",
                        "Description": "Buyer Address Line 0",
                        "Sequence": 47,
                        "DataType": "String",
                        "Length": 400,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "buy_adrs_line1",
                        "Description": "Buyer Address Line 1",
                        "Sequence": 48,
                        "DataType": "String",
                        "Length": 400,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "buy_adrs_line2",
                        "Description": "Buyer Address Line 2",
                        "Sequence": 49,
                        "DataType": "String",
                        "Length": 400,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "buy_country",
                        "Description": "Buyer Country Code",
                        "Sequence": 50,
                        "DataType": "String",
                        "Length": 3,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "ccty",
                            "RefersTo": "country"
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "buy_cste",
                        "Description": "Buyer State Code",
                        "Sequence": 51,
                        "DataType": "String",
                        "Length": 3,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "code",
                            "RefersTo": "state_codes"
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "dtrm",
                        "Description": "Incoterms",
                        "Sequence": 52,
                        "DataType": "String",
                        "Length": 3,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "ship_bp",
                        "Description": "Shipper Code",
                        "Sequence": 53,
                        "DataType": "String",
                        "Length": 9,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "ship_name",
                        "Description": "Shipper Name",
                        "Sequence": 54,
                        "DataType": "String",
                        "Length": 300,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "ship_tin",
                        "Description": "Shipper TIN",
                        "Sequence": 55,
                        "DataType": "String",
                        "Length": 14,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "ship_reg_brn",
                        "Description": "Shipper Registration Number",
                        "Sequence": 56,
                        "DataType": "String",
                        "Length": 20,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "ship_reg_nric",
                        "Description": "Shipper NRIC",
                        "Sequence": 57,
                        "DataType": "String",
                        "Length": 12,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "ship_reg_passport",
                        "Description": "Shipper Passport",
                        "Sequence": 58,
                        "DataType": "String",
                        "Length": 12,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "ship_reg_army",
                        "Description": "Shipper Army",
                        "Sequence": 59,
                        "DataType": "String",
                        "Length": 12,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "ship_adrs",
                        "Description": "Shipper Address Code",
                        "Sequence": 60,
                        "DataType": "String",
                        "Length": 9,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "ship_city",
                        "Description": "Shipper City",
                        "Sequence": 61,
                        "DataType": "String",
                        "Length": 150,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "ship_postal_zone",
                        "Description": "Shipper Postal Code",
                        "Sequence": 62,
                        "DataType": "String",
                        "Length": 10,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "ship_adrs_line0",
                        "Description": "Shipper Address Line 0",
                        "Sequence": 63,
                        "DataType": "String",
                        "Length": 400,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "ship_adrs_line1",
                        "Description": "Shipper Address Line 1",
                        "Sequence": 64,
                        "DataType": "String",
                        "Length": 400,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "ship_adrs_line2",
                        "Description": "Shipper Address Line 2",
                        "Sequence": 65,
                        "DataType": "String",
                        "Length": 400,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "ship_country",
                        "Description": "Shipper Country Code",
                        "Sequence": 66,
                        "DataType": "String",
                        "Length": 3,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "ccty",
                            "RefersTo": "country"
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "ship_cste",
                        "Description": "Shipper State Code",
                        "Sequence": 67,
                        "DataType": "String",
                        "Length": 3,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "code",
                            "RefersTo": "state_codes"
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "frm1",
                        "Description": "Reference No of Customs form No 1, 9, etc",
                        "Sequence": 68,
                        "DataType": "String",
                        "Length": 12,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "frm2",
                        "Description": "Reference Number of Customs Form No.2",
                        "Sequence": 69,
                        "DataType": "String",
                        "Length": 12,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "rate",
                        "Description": "Currency Exchange Rate",
                        "Sequence": 70,
                        "DataType": "Float",
                        "Length": 20,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "tote",
                        "Description": "Total Excluding Tax",
                        "Sequence": 71,
                        "DataType": "Float",
                        "Length": 20,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "toti",
                        "Description": "Total Including Tax",
                        "Sequence": 72,
                        "DataType": "Float",
                        "Length": 20,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "tott",
                        "Description": "Total Tax Amount",
                        "Sequence": 73,
                        "DataType": "Float",
                        "Length": 20,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "pamt",
                        "Description": "PrePayment Amount",
                        "Sequence": 74,
                        "DataType": "Float",
                        "Length": 20,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "pydt",
                        "Description": "PrePayment Date",
                        "Sequence": 75,
                        "DataType": "Date",
                        "Length": 10,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "pytm",
                        "Description": "PrePayment Time",
                        "Sequence": 76,
                        "DataType": "DateTime",
                        "Length": 25,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "pref",
                        "Description": "PrePayment Reference Number",
                        "Sequence": 77,
                        "DataType": "String",
                        "Length": 150,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "tpat",
                        "Description": "Total Payable Amount",
                        "Sequence": 78,
                        "DataType": "Float",
                        "Length": 20,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "tnat",
                        "Description": "Total Net Amount",
                        "Sequence": 79,
                        "DataType": "Float",
                        "Length": 20,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "tdis",
                        "Description": "Total Discount Value",
                        "Sequence": 80,
                        "DataType": "Float",
                        "Length": 20,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "tfee",
                        "Description": "Total Fee / Charge Amount",
                        "Sequence": 81,
                        "DataType": "Float",
                        "Length": 20,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "ramt",
                        "Description": "Rounding Amount",
                        "Sequence": 82,
                        "DataType": "Float",
                        "Length": 20,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "ttax",
                        "Description": "Total Taxable Amount Per Tax Type",
                        "Sequence": 83,
                        "DataType": "Float",
                        "Length": 20,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "ttat",
                        "Description": "Total Tax Amount Per Tax Type",
                        "Sequence": 84,
                        "DataType": "Float",
                        "Length": 20,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "adis",
                        "Description": "Invoice Additional Discount Amount",
                        "Sequence": 85,
                        "DataType": "Float",
                        "Length": 20,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "adis_reason",
                        "Description": "Invoice Additional Discount Amount Reason",
                        "Sequence": 86,
                        "DataType": "String",
                        "Length": 300,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "afee",
                        "Description": "Invoice Additional Fee Amount",
                        "Sequence": 87,
                        "DataType": "Float",
                        "Length": 20,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "afee_reason",
                        "Description": "Invoice Additional Fee Amount Reason",
                        "Sequence": 88,
                        "DataType": "String",
                        "Length": 300,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "fbil",
                        "Description": "Frequency of Billing",
                        "Sequence": 89,
                        "DataType": "String",
                        "Length": 50,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "org_e_inv_no",
                        "Description": "Original E-Invoice Reference Number",
                        "Sequence": 90,
                        "DataType": "String",
                        "Length": 50,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "term",
                        "Description": "Payment Term",
                        "Sequence": 91,
                        "DataType": "String",
                        "Length": 120,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "bref",
                        "Description": "Bill Reference Number",
                        "Sequence": 92,
                        "DataType": "String",
                        "Length": 150,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "ftrd",
                        "Description": "Free Trade Agreement(FTA) Information",
                        "Sequence": 93,
                        "DataType": "String",
                        "Length": 300,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "anum",
                        "Description": "Authorisation Number for Certified Exporter",
                        "Sequence": 94,
                        "DataType": "String",
                        "Length": 300,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "ochg",
                        "Description": "Details of other charges",
                        "Sequence": 95,
                        "DataType": "Boolean",
                        "Length": 1,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "ochg_amnt",
                        "Description": "Details of other charges - Amount",
                        "Sequence": 96,
                        "DataType": "Float",
                        "Length": 20,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "ochg_reason",
                        "Description": "Details of other charges - Reason",
                        "Sequence": 97,
                        "DataType": "String",
                        "Length": 300,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "det_tax",
                        "Description": "Detail of Tax Exemption(Invoice Level)",
                        "Sequence": 98,
                        "DataType": "String",
                        "Length": 300,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "bsdt",
                        "Description": "Billing Period Start Date",
                        "Sequence": 99,
                        "DataType": "Date",
                        "Length": 10,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "bedt",
                        "Description": "Billing Period End Date",
                        "Sequence": 100,
                        "DataType": "Date",
                        "Length": 10,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "amnt_ex",
                        "Description": "Amount Exemption from Tax(Invoice Level)",
                        "Sequence": 101,
                        "DataType": "Float",
                        "Length": 20,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "dshp",
                        "Description": "Dropshipment",
                        "Sequence": 102,
                        "DataType": "Boolean",
                        "Length": 1,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "submission_uid",
                        "Description": "LHDN Submission UID",
                        "Sequence": 103,
                        "DataType": "String",
                        "Length": 26,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "doc_uuid",
                        "Description": "LHDN UUID",
                        "Sequence": 104,
                        "DataType": "String",
                        "Length": 26,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "esta",
                        "Description": "LHDN Status",
                        "Sequence": 105,
                        "DataType": "String",
                        "Length": 10,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": true,
                            "ListID": "lhdn_status",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "err_msg",
                        "Description": "Error Message",
                        "Sequence": 106,
                        "DataType": "String",
                        "Length": 600,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "e_invdt",
                        "Description": "E-Invoice Date \u0026 Time",
                        "Sequence": 107,
                        "DataType": "DateTime",
                        "Length": 25,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "einv_stat",
                        "Description": "E-Invoice Status",
                        "Sequence": 108,
                        "DataType": "String",
                        "Length": 10,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": true,
                            "ListID": "einv_status",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "etim",
                        "Description": "LHDN Validated Date \u0026 Time",
                        "Sequence": 109,
                        "DataType": "DateTime",
                        "Length": 25,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "modi_stat",
                        "Description": "Header Modification Status",
                        "Sequence": 110,
                        "DataType": "String",
                        "Length": 10,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": true,
                            "ListID": "m_status",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "src_type",
                        "Description": "Sales Type",
                        "Sequence": 111,
                        "DataType": "String",
                        "Length": 10,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": true,
                            "ListID": "src_inv_type",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "inv_pdf",
                        "Description": "PDF Resource ID",
                        "Sequence": 112,
                        "DataType": "String",
                        "Length": 100,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "reference0",
                        "Description": "LN Invoice Date",
                        "Sequence": 113,
                        "DataType": "String",
                        "Length": 100,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "reference1",
                        "Description": "Reference 1",
                        "Sequence": 114,
                        "DataType": "String",
                        "Length": 500,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "reference2",
                        "Description": "Reference 2",
                        "Sequence": 115,
                        "DataType": "String",
                        "Length": 100,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "reference3",
                        "Description": "Reference 3",
                        "Sequence": 116,
                        "DataType": "String",
                        "Length": 100,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "reference4",
                        "Description": "Reference 4",
                        "Sequence": 117,
                        "DataType": "String",
                        "Length": 100,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "reference5",
                        "Description": "Reference 5",
                        "Sequence": 118,
                        "DataType": "String",
                        "Length": 100,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "reference6",
                        "Description": "Reference 6",
                        "Sequence": 119,
                        "DataType": "String",
                        "Length": 100,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "reference7",
                        "Description": "Reference 7",
                        "Sequence": 120,
                        "DataType": "String",
                        "Length": 100,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "reference8",
                        "Description": "Reference 8",
                        "Sequence": 121,
                        "DataType": "String",
                        "Length": 100,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "reference9",
                        "Description": "Reference 9",
                        "Sequence": 122,
                        "DataType": "String",
                        "Length": 100,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "sup_code",
                        "Description": "Supplier Code",
                        "Sequence": 123,
                        "DataType": "String",
                        "Length": 9,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "qr_code",
                        "Description": "QR Code",
                        "Sequence": 124,
                        "DataType": "String",
                        "Length": 300,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "org_doc_uuid",
                        "Description": "Original Document UUID",
                        "Sequence": 125,
                        "DataType": "String",
                        "Length": 26,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "einv_version",
                        "Description": "E-Invoice Version",
                        "Sequence": 126,
                        "DataType": "String",
                        "Length": 10,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    }
                ],
                "Segments": [],
                "AdditionalProps": null,
                "References": [
                    {
                        "Name": "einv_header",
                        "Sequence": 1,
                        "Columns": [
                            "dataset"
                        ],
                        "RefersTo": "data_set",
                        "ReferenceFields": [
                            "data_set"
                        ],
                        "OnDelete": "RESTRICT",
                        "OnUpdate": "RESTRICT"
                    }
                ],
                "Indices": [],
                "SharedTable": false,
                "CreatedBy": "malai",
                "ModifiedBy": "malai",
                "CreatedDate": "2024-06-26T18:20:00.911604+08:00",
                "ModifiedDate": "2024-12-04T20:40:00.268834+08:00",
                "EnableComments": false,
                "ReferenceFields": null,
                "ReadQuery": "SELECT * FROM {{einv_header}} "
            },
            "BeforeSave": "//**** Hook before_save Created by malai on 24-Apr-2024 11:08:36\nvar einvois = require(\"./scripts/Business_Objects/createEinvoice\")\nfunction before_save(){\n\tif (jscall.mode == \"insert\"){\n\t\tentity_ds = CralDB.QueryByComp(`select skip_einv_no_iter from {{entity_data_set}} where sup_company=${jscall.input.comp} and data_set='${jscall.input.dataset}'`, jscall.company)\n\t\tif (entity_ds.length == 0){\n\t\t\tjscall_error = `Entity Data Set is Not Maintained for ${jscall.input.comp} - ${jscall.input.dataset}`\n\t\t\treturn false;\n\t\t}\n\t\tif (!jscall.input.e_inv_no){\n\t\t\titer_num = CralDB.QueryByComp(\"select comp,tran,idoc,src_type from {{einv_header}} where comp='$1' and tran='$2' and idoc=$3\", jscall.company, jscall.input.comp, jscall.input.tran, parseInt(jscall.input.idoc))\n\t\t\tfor (i=0;i\u003citer_num.length;i++){\n\t\t\t\tif (jscall.input.src_type == iter_num[i].src_type){\n\t\t\t\t\tjscall_error = \"Record Alreday Exists\"\n\t\t\t\t\treturn false\n\t\t\t\t}\n\t\t\t}\n\t\t\tjscall.input.e_inv_no = jscall.input.tran + jscall.input.idoc.toString()\n\n\t\t\tif (!entity_ds[0].skip_einv_no_iter){\n\t\t\t\titeration = (iter_num?.length + 1).toString()\n\t\t\t\twhile(iteration.length \u003c 2){\n\t\t\t\t\titeration = \"0\" + iteration\n\t\t\t\t}\n\t\t\t\tjscall.input.e_inv_no = jscall.input.e_inv_no + \"_\" + iteration\n\t\t\t}\n\t\t}\n\t\tjscall.input.e_invdt = einvois.getCurrentDateTimeUTC()\n\t\t// fin_fld = [\"rate\", \"tote\", \"toti\", \"tott\", \"pamt\", \"tpat\", \"tnat\", \"tdis\", \"tfee\", \"ramt\", \"ttax\", \"ttat\", \"adis\", \"afee\", \"ochg_amnt\", \"amnt_ex\"]\n\t\t// for (i=0;i\u003cfin_fld?.length;i++){\n\t\t// \tjscall.input[fin_fld[i]] = parseFloat(jscall.input[fin_fld[i]].toFixed(2))\n\t\t// }\n\t}\n\tdebug(\"out\" + jscall.input.e_inv_no)\n\tif (jscall.input.idoc != \"\" \u0026\u0026 jscall.input.idoc != null \u0026\u0026 jscall.input.idoc != undefined){\n\t\tjscall.input.idoc = jscall.input.idoc.toString()\n\t}\n\t// isPDFAvil = CralDB.QueryByComp(\"select inv_pdf from {{einv_header}} where e_inv_no='$1'\", jscall.company, jscall.input.e_inv_no)\n\t// println(isPDFAvil)\n\t// if (isPDFAvil.length != 0){\n\t// \tif (jscall.input.einv_stat == \"30\" \u0026\u0026 (isPDFAvil[0].inv_pdf == \"\" || isPDFAvil[0].inv_pdf == null || isPDFAvil[0].inv_pdf == undefined)){\n\t// \t\tprintln(\"IN\")\n\t// \t\tpdf = printPDF.printReportLayout(jscall.input.e_inv_no)\n\t// \t\tif (pdf.result != null || pdf.result != undefined){\n\t// \t\t\tif (pdf.result == \"\"){\n\t// \t\t\t\tjscall_error = pdf.error\n\t// \t\t\t\treturn false\n\t// \t\t\t}\n\t// \t\t\tjscall.input.inv_pdf = pdf.result\n\t// \t\t}\n\t// \t}\n\t// }\n\treturn true;\n}",
            "AfterSave": "",
            "BeforeDelete": "//**** Hook before_delete Created by malai on 02-May-2024 13:17:13\n\t\t\tfunction before_delete(){\n\t\t\t\t// jscall_error = JSON.stringify(jscall.input)\n\t\t\t\tprintln(jscall.input)\n\t\t\t\t// return false\n\t\t\t\tline_records = CralDB.QueryByComp(\"select e_inv_no,line from {{einv_lines}} where e_inv_no='$1'\", jscall.company, jscall.input.e_inv_no);\n\t\t\t\tfor (let i = 0; i \u003c line_records.length; i++){\n\t\t\t\t\tret = CralDB.PublishTopic(\"einv_lines\", jscall.company, \"Delete\", line_records[i], jscall.user)\n\t\t\t\t\tif (ret.Success == false){\n\t\t\t\t\t\tjscall_error = ret.Message\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tvld_records = jscall.RunQuery(`DELETE FROM einv_validation_${jscall.company.toString().padStart(4, '0')} where einv_code='${jscall.input.e_inv_no}'`)\n\t\t\t\tif (vld_records.error){\n\t\t\t\t\tjscall_error = vld_records.error;\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t  return true;\n\t\t\t}",
            "AfterDelete": ""
        },
        {
            "Topic": {
                "Name": "einv_lines",
                "Description": "E-Invoice Lines",
                "Keys": [
                    "e_inv_no",
                    "line"
                ],
                "SendAlertOnFail": true,
                "DistributionList": [],
                "HotTopic": true,
                "FieldDefs": [
                    {
                        "FieldName": "e_inv_no",
                        "Description": "E-Invoice Number",
                        "Sequence": 1,
                        "DataType": "String",
                        "Length": 50,
                        "IsKey": true,
                        "IndexSequence": 1,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "line",
                        "Description": "Line",
                        "Sequence": 2,
                        "DataType": "Integer",
                        "Length": 4,
                        "IsKey": true,
                        "IndexSequence": 2,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "cuni",
                        "Description": "Unit of Measure",
                        "Sequence": 3,
                        "DataType": "String",
                        "Length": 3,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "ccty",
                        "Description": "Country of Origin",
                        "Sequence": 4,
                        "DataType": "String",
                        "Length": 3,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "clas_grp",
                        "Description": "Classification Group",
                        "Sequence": 5,
                        "DataType": "String",
                        "Length": 10,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": true,
                            "ListID": "class_map",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "clas",
                        "Description": "Classification",
                        "Sequence": 6,
                        "DataType": "String",
                        "Length": 3,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "item",
                        "Description": "Item Code",
                        "Sequence": 7,
                        "DataType": "String",
                        "Length": 47,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "item_desc",
                        "Description": "Item Description",
                        "Sequence": 8,
                        "DataType": "String",
                        "Length": 300,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "pric",
                        "Description": "Price",
                        "Sequence": 9,
                        "DataType": "Float",
                        "Length": 20,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "pvat",
                        "Description": "Tax Rate",
                        "Sequence": 10,
                        "DataType": "Float",
                        "Length": 10,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "txai",
                        "Description": "Tax Amount",
                        "Sequence": 11,
                        "DataType": "Float",
                        "Length": 20,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "ceno",
                        "Description": "Tax Exemption Certificate Number",
                        "Sequence": 12,
                        "DataType": "String",
                        "Length": 300,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "amtt",
                        "Description": "Amount Exempted from Tax",
                        "Sequence": 13,
                        "DataType": "Float",
                        "Length": 20,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "stot",
                        "Description": "Sub Total",
                        "Sequence": 14,
                        "DataType": "Float",
                        "Length": 20,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "amti",
                        "Description": "Total Excluding Tax",
                        "Sequence": 15,
                        "DataType": "Float",
                        "Length": 20,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "dqua",
                        "Description": "Quantity",
                        "Sequence": 16,
                        "DataType": "Float",
                        "Length": 20,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "disc",
                        "Description": "Discount Rate",
                        "Sequence": 17,
                        "DataType": "Float",
                        "Length": 6,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "ldai",
                        "Description": "Discount Amount",
                        "Sequence": 18,
                        "DataType": "Float",
                        "Length": 20,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "ccde",
                        "Description": "Product Tariff",
                        "Sequence": 19,
                        "DataType": "String",
                        "Length": 25,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "feer",
                        "Description": "Fee / Charge Rate",
                        "Sequence": 20,
                        "DataType": "Float",
                        "Length": 20,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "feea",
                        "Description": "Fee / Charge Amount",
                        "Sequence": 21,
                        "DataType": "Float",
                        "Length": 20,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "disc_reason",
                        "Description": "Discount Reason",
                        "Sequence": 22,
                        "DataType": "String",
                        "Length": 300,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "fee_reason",
                        "Description": "Fees Reason",
                        "Sequence": 23,
                        "DataType": "String",
                        "Length": 300,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "err_msg",
                        "Description": "Invoice Line Error",
                        "Sequence": 24,
                        "DataType": "String",
                        "Length": 300,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "lsta",
                        "Description": "Invoice Line Status",
                        "Sequence": 25,
                        "DataType": "String",
                        "Length": 10,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": true,
                            "ListID": "einv_status",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "modi_lsta",
                        "Description": "Line Modification Status",
                        "Sequence": 26,
                        "DataType": "String",
                        "Length": 10,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": true,
                            "ListID": "m_status",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "cvat",
                        "Description": "Tax Type",
                        "Sequence": 27,
                        "DataType": "String",
                        "Length": 3,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "reference0",
                        "Description": "Reference 0",
                        "Sequence": 28,
                        "DataType": "String",
                        "Length": 100,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "reference1",
                        "Description": "Reference 1",
                        "Sequence": 29,
                        "DataType": "String",
                        "Length": 500,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "reference2",
                        "Description": "Reference 2",
                        "Sequence": 30,
                        "DataType": "String",
                        "Length": 500,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "reference3",
                        "Description": "Reference 3",
                        "Sequence": 31,
                        "DataType": "String",
                        "Length": 500,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "reference4",
                        "Description": "Reference 4",
                        "Sequence": 32,
                        "DataType": "String",
                        "Length": 500,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "reference5",
                        "Description": "Reference 5",
                        "Sequence": 33,
                        "DataType": "String",
                        "Length": 100,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "reference6",
                        "Description": "Reference 6",
                        "Sequence": 34,
                        "DataType": "String",
                        "Length": 100,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "reference7",
                        "Description": "Reference 7",
                        "Sequence": 35,
                        "DataType": "String",
                        "Length": 100,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "reference8",
                        "Description": "Reference 8",
                        "Sequence": 36,
                        "DataType": "String",
                        "Length": 100,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "reference9",
                        "Description": "Reference 9",
                        "Sequence": 37,
                        "DataType": "String",
                        "Length": 500,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "reference10",
                        "Description": "Reference 10",
                        "Sequence": 38,
                        "DataType": "String",
                        "Length": 100,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "reference11",
                        "Description": "Reference 11",
                        "Sequence": 39,
                        "DataType": "String",
                        "Length": 100,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "reference12",
                        "Description": "Reference 12",
                        "Sequence": 40,
                        "DataType": "String",
                        "Length": 100,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "reference13",
                        "Description": "Reference 13",
                        "Sequence": 41,
                        "DataType": "String",
                        "Length": 100,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "reference14",
                        "Description": "Reference 14",
                        "Sequence": 42,
                        "DataType": "String",
                        "Length": 100,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "reference15",
                        "Description": "Reference 15",
                        "Sequence": 43,
                        "DataType": "String",
                        "Length": 100,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "reference16",
                        "Description": "Reference 16",
                        "Sequence": 44,
                        "DataType": "String",
                        "Length": 100,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "reference17",
                        "Description": "Reference 17",
                        "Sequence": 45,
                        "DataType": "String",
                        "Length": 100,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "reference18",
                        "Description": "Reference 18",
                        "Sequence": 46,
                        "DataType": "String",
                        "Length": 100,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "reference19",
                        "Description": "Reference 19",
                        "Sequence": 47,
                        "DataType": "String",
                        "Length": 100,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "reference20",
                        "Description": "Reference 20",
                        "Sequence": 48,
                        "DataType": "String",
                        "Length": 100,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    }
                ],
                "Segments": [],
                "AdditionalProps": null,
                "References": [],
                "Indices": [],
                "SharedTable": false,
                "CreatedBy": "malai",
                "ModifiedBy": "malai",
                "CreatedDate": "2024-06-26T19:54:27.033737+08:00",
                "ModifiedDate": "2024-12-06T15:31:40.785408+08:00",
                "EnableComments": false,
                "ReferenceFields": null,
                "ReadQuery": "SELECT * FROM {{einv_lines}} "
            },
            "BeforeSave": "//**** Hook before_save Created by malai on 02-May-2024 09:52:04\n\t\t\tfunction before_save(){\n\t\t\t\t// jscall.input.idoc = jscall.input.idoc.toString()\n\t\t\t  return true;\n\t\t\t}",
            "AfterSave": "//**** Hook after_save Created by malai on 30-Apr-2024 16:31:04\n\t\t\tfunction after_save(){\n\t\t\t\tif (jscall.mode.toUpperCase() == \"INSERT\"){\n\t\t\t\t\tline_val = CralDB.QueryByComp(\"select e_inv_no,line_cnt from {{einv_header}} where e_inv_no='$1'\", jscall.company, jscall.input.e_inv_no)\n\t\t\t\t\tif (line_val.length == 0){\n\t\t\t\t\t\tjscall_error = \"Header Not Found\"\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tline_count = line_val[0].line_cnt + 1\n\t\t\t\t\t\tupdate_line_count = line_val[0]\n\t\t\t\t\t\tupdate_line_count.line_cnt = line_count\n\t\t\t\t\t\tupdate_ret = CralDB.PublishTopic(\"einv_header\", jscall.company, \"Update\", update_line_count, jscall.user)\n\t\t\t\t\t\tif (update_ret.Success != true){\n\t\t\t\t\t\t\t// Line Count Not Updated Error should be handled\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t  return true;\n\t\t\t}",
            "BeforeDelete": "",
            "AfterDelete": "//**** Hook after_delete Created by malai on 30-Apr-2024 17:09:49\n\t\t\tfunction after_delete(){\n\t\t\t  line_val = CralDB.QueryByComp(\"select e_inv_no,line_cnt from {{einv_header}} where e_inv_no='$1'\", jscall.company, jscall.input.e_inv_no)\n\t\t\t\tif (line_val.length == 0){\n\t\t\t\t\tjscall_error = \"Header Not Found\"\n\t\t\t\t\t// return false;\n\t\t\t\t} else {\n\t\t\t\t\tline_count = line_val[0].line_cnt - 1\n\t\t\t\t\tupdate_line_count = line_val[0]\n\t\t\t\t\tupdate_line_count.line_cnt = line_count\n\t\t\t\t\tupdate_ret = CralDB.PublishTopic(\"einv_header\", jscall.company, \"Update\", update_line_count, jscall.user)\n\t\t\t\t\tif (update_ret.Success != true){\n\t\t\t\t\t\t// Line Count Not Updated Error should be handled\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t  return true;\n\t\t\t}"
        },
        {
            "Topic": {
                "Name": "interim_einv_line",
                "Description": "Interim E-Invoice Line",
                "Keys": [
                    "e_inv_no",
                    "line"
                ],
                "SendAlertOnFail": true,
                "DistributionList": [],
                "HotTopic": true,
                "FieldDefs": [
                    {
                        "FieldName": "e_inv_no",
                        "Description": "E-Invoice Number",
                        "Sequence": 1,
                        "DataType": "String",
                        "Length": 50,
                        "IsKey": true,
                        "IndexSequence": 1,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": true,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "line",
                        "Description": "Invoice Line No",
                        "Sequence": 2,
                        "DataType": "Integer",
                        "Length": 4,
                        "IsKey": true,
                        "IndexSequence": 2,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": true,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "cuni",
                        "Description": "Unit of Measure",
                        "Sequence": 3,
                        "DataType": "String",
                        "Length": 9,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "ccty",
                        "Description": "Country of Orgin",
                        "Sequence": 4,
                        "DataType": "String",
                        "Length": 3,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "clas_grp",
                        "Description": "Classification Group",
                        "Sequence": 5,
                        "DataType": "String",
                        "Length": 10,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": true,
                            "ListID": "class_map",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "clas",
                        "Description": "Classification",
                        "Sequence": 6,
                        "DataType": "String",
                        "Length": 12,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "item",
                        "Description": "Item Code",
                        "Sequence": 7,
                        "DataType": "String",
                        "Length": 47,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "item_desc",
                        "Description": "Item Description",
                        "Sequence": 8,
                        "DataType": "String",
                        "Length": 300,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "pric",
                        "Description": "Price",
                        "Sequence": 9,
                        "DataType": "Float",
                        "Length": 20,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "pvat",
                        "Description": "Tax Rate",
                        "Sequence": 10,
                        "DataType": "Float",
                        "Length": 10,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "txai",
                        "Description": "Tax Amount",
                        "Sequence": 11,
                        "DataType": "Float",
                        "Length": 20,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "ceno",
                        "Description": "Tax Exemption Certificate Number",
                        "Sequence": 12,
                        "DataType": "String",
                        "Length": 300,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "amtt",
                        "Description": "Amount Exempted from Tax",
                        "Sequence": 13,
                        "DataType": "Float",
                        "Length": 20,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "stot",
                        "Description": "Sub Total",
                        "Sequence": 14,
                        "DataType": "Float",
                        "Length": 20,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "amti",
                        "Description": "Line Invoice Amount",
                        "Sequence": 15,
                        "DataType": "Float",
                        "Length": 20,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "dqua",
                        "Description": "Quantity",
                        "Sequence": 16,
                        "DataType": "Float",
                        "Length": 20,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "disc",
                        "Description": "Discount Rate",
                        "Sequence": 17,
                        "DataType": "Float",
                        "Length": 6,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "ldai",
                        "Description": "Discount Amount",
                        "Sequence": 18,
                        "DataType": "Float",
                        "Length": 20,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "ccde",
                        "Description": "Product Tariff",
                        "Sequence": 19,
                        "DataType": "String",
                        "Length": 25,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "feer",
                        "Description": "Fee/Charge Rate",
                        "Sequence": 20,
                        "DataType": "Float",
                        "Length": 20,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "feea",
                        "Description": "Fee/Charge Amount",
                        "Sequence": 21,
                        "DataType": "Float",
                        "Length": 20,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "disc_reason",
                        "Description": "Discount Reason",
                        "Sequence": 22,
                        "DataType": "String",
                        "Length": 300,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "fee_reason",
                        "Description": "Fees Reason",
                        "Sequence": 23,
                        "DataType": "String",
                        "Length": 300,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "err_msg",
                        "Description": "Invoice Line Error",
                        "Sequence": 24,
                        "DataType": "String",
                        "Length": 300,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "tax_type",
                        "Description": "Tax Type",
                        "Sequence": 25,
                        "DataType": "String",
                        "Length": 9,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    }
                ],
                "Segments": [],
                "AdditionalProps": null,
                "References": [],
                "Indices": [],
                "SharedTable": false,
                "CreatedBy": "leka",
                "ModifiedBy": "dev_user",
                "CreatedDate": "2024-09-06T11:43:22.445506+08:00",
                "ModifiedDate": "2024-09-12T18:45:29.165254+08:00",
                "EnableComments": false,
                "ReferenceFields": null,
                "ReadQuery": "SELECT * FROM {{interim_einv_line}} "
            },
            "BeforeSave": "",
            "AfterSave": "",
            "BeforeDelete": "",
            "AfterDelete": ""
        },
        {
            "Topic": {
                "Name": "rpt_parameter",
                "Description": "Report Parameter",
                "Keys": [
                    "report_id",
                    "criteria",
                    "seq"
                ],
                "SendAlertOnFail": true,
                "DistributionList": [],
                "HotTopic": true,
                "FieldDefs": [
                    {
                        "FieldName": "report_id",
                        "Description": "Report ID",
                        "Sequence": 1,
                        "DataType": "String",
                        "Length": 50,
                        "IsKey": true,
                        "IndexSequence": 1,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "criteria",
                        "Description": "Criteria",
                        "Sequence": 2,
                        "DataType": "Integer",
                        "Length": 4,
                        "IsKey": true,
                        "IndexSequence": 2,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "seq",
                        "Description": "Sequence",
                        "Sequence": 3,
                        "DataType": "Integer",
                        "Length": 4,
                        "IsKey": true,
                        "IndexSequence": 3,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "field_name",
                        "Description": "Field Name",
                        "Sequence": 4,
                        "DataType": "String",
                        "Length": 50,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "condition",
                        "Description": "Condition",
                        "Sequence": 5,
                        "DataType": "String",
                        "Length": 100,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "is_cus_var",
                        "Description": "Custom Variable",
                        "Sequence": 6,
                        "DataType": "Boolean",
                        "Length": 1,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "cus_var_key",
                        "Description": "Custom Variable Key",
                        "Sequence": 7,
                        "DataType": "String",
                        "Length": 50,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    },
                    {
                        "FieldName": "cus_var_value",
                        "Description": "Custom Variable Value",
                        "Sequence": 8,
                        "DataType": "String",
                        "Length": 100,
                        "IsKey": false,
                        "IndexSequence": 0,
                        "Props": {
                            "List": false,
                            "ListID": "",
                            "ReferenceField": "",
                            "RefersTo": ""
                        },
                        "SetDefault": false,
                        "Default": "",
                        "AutoGen": false,
                        "Mandatory": false,
                        "ClassValidators": "",
                        "DecimalPlaces": 0,
                        "UIComponent": ""
                    }
                ],
                "Segments": [],
                "AdditionalProps": null,
                "References": [],
                "Indices": [],
                "SharedTable": true,
                "CreatedBy": "malai",
                "ModifiedBy": "malai",
                "CreatedDate": "2024-11-05T17:01:48.022933+08:00",
                "ModifiedDate": "2024-11-28T17:56:07.262966+08:00",
                "EnableComments": false,
                "ReferenceFields": null,
                "ReadQuery": "SELECT * FROM {{rpt_parameter}} "
            },
            "BeforeSave": "",
            "AfterSave": "",
            "BeforeDelete": "",
            "AfterDelete": ""
        }
    ],
    "BizObjects": [
        {
            "Bizobj": {
                "ObjectName": "addLayout",
                "Description": "Add new report layout",
                "external": false
            },
            "Script": "//**** Business Object addLayout Created by parthi on 10-Jun-2024 15:17:07 ****//\r\n\r\nlet title = [\"comp_name\", \"comp_address\", \"comp_cont_details\"] // \"comp_cont_num\", \"comp_mail\"]\r\nlet report_header = [\"einv_version\", \"e_inv_no\", \"doc_uuid\", \"org_e_inv_no\", \"e_invdt\", \"term\"]\r\nlet group_supplier = [\"sup_code\", \"sup_name\", \"sup_tin\", \"sup_reg_brn\", \"sup_email\", \"sup_cont_num\", \"supplier_address\"]\r\nlet group_buyer = [\"inv_bp\", \"buy_name\", \"buy_tin\", \"buy_reg_brn\", \"buy_email\", \"buy_cont_num\", \"buyer_address\"]\r\n// let detail = [\"clas\", \"item\", \"item_desc\", \"dqua\", \"cuni\", \"pric\", \"disc\", \"stot\", \"ccur\", \"txai\", \"amti + txai\"]\r\nlet detail = [\"line\", \"item\", \"dqua\", \"cuni\", \"pric\", \"stot\", \"ccur\", \"txai\", \"amti + txai\"]\r\nlet detail_footer = [\"tote + tdis\", \"tote\", \"tott\", \"toti\", \"tdis\", \"tpat\"]\r\nlet group_footer = []\r\nlet report_footer = [\"etim\", \"Now()\", \"tracker.Page\"]\r\n\r\n\r\nfunction addReportLayout(layout_count){\r\n    response = []\r\n\r\n    repLayHeader = CralDB.QueryByComp(\"select layout_code from {{rep_layouts_header}} \",jscall.company)\r\n\r\n    layCount = layout_count - repLayHeader.length\r\n    for(m = 0; m \u003c layCount; m++){\r\n        temp_result = {}\r\n        newCode = generateTempCode(\"EINV_F\",repLayHeader.length + 1 + m)\r\n        layoutDesc = \"Layout Type \" + (repLayHeader.length + 1 + m).toString()\r\n        \r\n        insertRec = {\r\n            \"layout_code\": newCode,\r\n            \"layout_desc\":layoutDesc,\r\n            \"r_rep_head\":false,\r\n            // \"r_grp_head\":false,\r\n            \"r_footer\":false,\r\n            \"page_no\":true,\r\n            \"rep_typ\":\"A4\",\r\n            \"rep_format\":\"Portrait\",\r\n            \"back_clr_head\":\"#FFFFFF\",\r\n            \"cont_align_head\":\"left\",\r\n            \"back_clr_footer\":\"#FFFFFF\",\r\n            \"cont_align_footer\":\"left\",\r\n            \"back_clr_table\":\"#444444\",\r\n            \"no_pos_page_no\":\"left\",\r\n            \"font\":\"Roboto\",\r\n            \"model\":\"default\",\r\n            // \"is_report\": false,\r\n            \"is_report\": true,\r\n            \"report_name\": \"\",\r\n            \"logo\": \"\",\r\n            \"logo_const\": \"L,0,20\",\r\n            \"qr_code\": \"35,30\"\r\n        }\r\n        HeaderLayout = CralDB.PublishTopic(\"rep_layouts_header\",jscall.company, \"Insert\",insertRec,jscall.user)\r\n        temp_result.Header = HeaderLayout\r\n        if (HeaderLayout?.Success){\r\n            LineLayout = reportLayLine(newCode)\r\n            temp_result.Lines = LineLayout\r\n        }\r\n        response.push(temp_result)\r\n    }\r\n    return response\r\n}\r\nexports.addReportLayout = addReportLayout\r\n\r\nfunction reportLayLine(newCode){\r\n    lines_result = []\r\n    title_fields = [\r\n        {\"FieldName\": \"comp_name\", \"Description\": \"Company Name\"},\r\n        {\"FieldName\": \"comp_address\", \"Description\": \"Company Address\"},\r\n        {\"FieldName\": \"comp_cont_details\", \"Description\": \"Contact Details\"},\r\n        {\"FieldName\": `comp_cont_num`, \"Description\": \"Company Contact Number\"},\r\n        {\"FieldName\": `comp_mail`, \"Description\": \"Company Mail\"}\r\n    ]\r\n    \r\n    header_fields = CralUtil.GetTopic(\"einv_header\").FieldDefs\r\n    line_fields = CralUtil.GetTopic(\"einv_lines\").FieldDefs.filter(line =\u003e line.FieldName !== \"e_inv_no\")\r\n    additionalFields = [\r\n        {\"FieldName\": \"buyer_address\",  \"Description\": \"Buyer Address\"}, \r\n        {\"FieldName\":\"supplier_address\",\"Description\": \"Supplier Address\"}, \r\n        {\"FieldName\": \"amti + txai\",    \"Description\": \"Total Amount\"}, \r\n        {\"FieldName\": \"tote + tdis\",    \"Description\": \"Sub Total\"}, \r\n        {\"FieldName\": \"Now()\",          \"Description\": \"Printed Date \u0026 Time\"}, \r\n        {\"FieldName\": \"tracker.Page\",   \"Description\": \"Page No.\"}\r\n    ]\r\n\r\n    insertLines(additionalFields, \r\n                insertLines(line_fields, \r\n                insertLines(orderFields([...report_header, \r\n                                         ...group_supplier,\r\n                                         ...group_buyer, \r\n                                         ...detail, \r\n                                         ...detail_footer], \r\n                                         header_fields), \r\n                insertLines(title_fields, 1))))\r\n    return lines_result\r\n}\r\n\r\nfunction insertLines(input_fields, iter){\r\n    input_fields.forEach(data =\u003e {\r\n        let [grp, seq] = getGroupTypeAndSequence(data.FieldName)\r\n        line = {\r\n            \"layout_code\":  newCode,\r\n            \"line\":         iter,\r\n            \"field_name\":   data.FieldName,\r\n            \"grp_typ\":      grp,\r\n            \"print\":        seq ? true : false,\r\n            \"seq\":          seq,\r\n            // \"field_value\":  data.FieldName === \"comp_cont_details\" ? `fPrint(\"Contact No.: \", comp_cont_num, \"    Email: \", comp_mail)`: data.FieldName,\r\n            \"field_value\":  getFieldValue(data.FieldName),\r\n            \"field_label\":  data.Description,\r\n            \"style\":        getDefaultStyle(grp, data.FieldName),\r\n            \"field_print\":  seq ? ( grp == \"Title\" ? false : true ) : false,\r\n            \"print_label\":  getShortLabel(data.FieldName),\r\n            \"ref\":          false\r\n        }\r\n        lines_result.push(CralDB.PublishTopic(\"rep_layouts_line\", jscall.company, \"Insert\", line, jscall.user))\r\n        iter += 1\r\n    })\r\n    return iter\r\n}\r\n\r\nfunction getFieldValue(fld_name){\r\n    switch (fld_name){\r\n        case \"comp_cont_details\":\r\n            return `fPrint(\"Contact No.: \", comp_cont_num, \"    Email: \", comp_mail)`\r\n        default:\r\n            return fld_name\r\n    }\r\n    return fld_name\r\n}\r\nfunction getShortLabel(fld_name) {\r\n    const fieldMappings = {\r\n        \"e_inv_no\":     \"Number\",\r\n        \"einv_version\": \"Version\",\r\n        \"org_e_inv_no\": \"Org. Einv. Ref. No.\",\r\n        \"e_invdt\":      \"Document Date\",\r\n        \"clas\":         \"Class.\",\r\n        \"dqua\":         \"Qty\",\r\n        \"cuni\":         \"UOM\",\r\n        \"disc\":         \"Disc%\",\r\n        \"stot\":         \"Amount\",\r\n        \"txai\":         \"Tax\",\r\n        \"etim\":         \"Validated Date \u0026 Time\",\r\n        \"sup_badsca\":   \"Business Act.\",\r\n        \"tpat\":         \"Invoice Amount\",\r\n        \"line\":         \"S No\",\r\n        \"tdis\":         \"Total Discount\",\r\n        \"sup_code\":     \"Code\",\r\n        \"inv_bp\":       \"Code\",\r\n        \"sup_name\":     \"Name\",\r\n        \"buy_name\":     \"Name\",\r\n        \"tott\":         \"Tax Amount\",\r\n        \"doc_uuid\":     \"UUID\"\r\n    };\r\n    if (fieldMappings[fld_name]) {\r\n        return fieldMappings[fld_name];\r\n    }\r\n    if (fld_name.toUpperCase().includes(\"TIN\"))         return \"TIN\";\r\n    if (fld_name.toUpperCase().includes(\"BRN\"))         return \"BRN\";\r\n    if (fld_name.toUpperCase().includes(\"NRIC\"))        return \"NRIC\";\r\n    if (fld_name.toUpperCase().includes(\"PASSPORT\"))    return \"Passport No.\";\r\n    if (fld_name.toUpperCase().includes(\"SST\"))         return \"SST\";\r\n    if (fld_name.toUpperCase().includes(\"CONT_NUM\"))    return \"Contact Number\";\r\n    if (fld_name.toUpperCase().includes(\"MAIL\"))        return \"E-Mail\";\r\n    if (fld_name.toUpperCase().includes(\"MSIC\"))        return \"MSIC\";\r\n    if (fld_name.toUpperCase().includes(\"ADDRESS\"))     return \"Address\";\r\n    return \"\";\r\n}\r\n\r\nfunction getDefaultStyle(group, fld_name) {\r\n    // let amountFields = [\"tpat\", \"toti\", \"tott\", \"tote\", \"tote + tdis\", \"amti + txai\", \"txai\", \"stot\", \"pric\"]\r\n    let amountFields = [\"tpat\", \"toti\", \"tott\", \"tote\", \"tote + tdis\", \"amti + txai\"]\r\n    switch (group) {\r\n        case \"Title\":\r\n            return fld_name === \"comp_name\" ? \"B,NA,AC\" : \"NA,NA,AC\";\r\n        case \"Report Header\":\r\n        case \"Group Supplier\":\r\n        case \"Group Buyer\":\r\n        case \"Report Footer\":\r\n            return fld_name === \"tracker.Page\" ? \"NA,T,AC\" : \"NA,NA,AL\";\r\n        case \"Detail\":\r\n            return amountFields.includes(fld_name) ? \"NA,NA,AR\" : \"NA,NA,AC\";\r\n        case \"Detail Footer\":\r\n            return \"NA,NA,AR\";\r\n        case \"Group Footer\":\r\n            return \"\"\r\n        default:\r\n            return \"\";\r\n    }\r\n}\r\nexports.getDefaultStyle = getDefaultStyle\r\n\r\n\r\nfunction getGroupTypeAndSequence(fld_name){\r\n    if (title.includes(fld_name)) {\r\n        return [\"Title\", title.indexOf(fld_name) + 1]\r\n    }\r\n    if (report_header.includes(fld_name)) {\r\n        return [\"Report Header\", report_header.indexOf(fld_name) + 1]\r\n    }\r\n    if (group_supplier.includes(fld_name)) {\r\n        return [\"Group Supplier\", group_supplier.indexOf(fld_name) + 1]\r\n    }\r\n    if (group_buyer.includes(fld_name)) {\r\n        return [\"Group Buyer\", group_buyer.indexOf(fld_name) + 1]\r\n    }\r\n    if (detail.includes(fld_name)) {\r\n        return [\"Detail\", detail.indexOf(fld_name) + 1]\r\n    }\r\n    if (detail_footer.includes(fld_name)) {\r\n        return [\"Detail Footer\", detail_footer.indexOf(fld_name) + 1]\r\n    }\r\n    if (group_footer.includes(fld_name)) {\r\n        return [\"Group Footer\", group_footer.indexOf(fld_name) + 1]\r\n    }\r\n    if (report_footer.includes(fld_name)) {\r\n        return [\"Report Footer\", report_footer.indexOf(fld_name) + 1]\r\n    }\r\n    return [\"Reference\", 0]\r\n}\r\n\r\nfunction orderFields(array1, array2){\r\n    let orderMap = new Map(array1.map((item, index) =\u003e [item, index]));\r\n\r\n    // Sort array2 based on the order in array1 (case-sensitive)\r\n    array2.sort((a, b) =\u003e {\r\n        let orderA = orderMap.get(a.FieldName);\r\n        let orderB = orderMap.get(b.FieldName);\r\n        return (orderA === undefined ? Infinity : orderA) - (orderB === undefined ? Infinity : orderB);\r\n    });\r\n\r\n    return array2\r\n}\r\nfunction getDefaultModel(){\r\n\r\n    reportlayout = CralDB.QueryByComp(\"select * from {{rep_layouts_header }} where layout_code = '$1'\",jscall.company,jscall.input.layout_code)\r\n\r\n    if(reportlayout.length != 0){\r\n\r\n        alignment = {\r\n            \"back_clr_head\":\"#FFFFFF\",\r\n            \"cont_align_head\":\"left\",\r\n            \"back_clr_footer\":\"#FFFFFF\",\r\n            \"cont_align_footer\":\"left\",\r\n            \"back_clr_table\":\"#ECECEC\",\r\n            \"no_pos_page_no\":\"left\"\r\n        }\r\n\r\n        resp = CralDB.PublishTopic(\"rep_layouts_header\",jscall.company,\"Update\",alignment,jscall.user)\r\n    }else{\r\n        jscall_error = \"Layout Not Present\"\r\n        return false\r\n    }\r\n\r\n}\r\nfunction resetLayout(){\r\n\r\n    reset = CralDB.QueryByComp(\"select * from {{rep_layouts_header }} where layout_code = '$1'\",jscall.company,jscall.input.layout_code)\r\n\r\n    if(reset.length != 0){\r\n\r\n        alignment = {\r\n            \"layout_code\": jscall.input.layout_code,\r\n            \"r_rep_head\":false,\r\n            \"r_grp_head\":false,\r\n            \"r_footer\":false,\r\n            \"page_no\":true,\r\n            \"rep_typ\":\"A4\",\r\n            \"rep_format\":\"P\"\r\n        }\r\n\r\n        resp = CralDB.PublishTopic(\"rep_layouts_header\",jscall.company,\"Update\",alignment,jscall.user)\r\n\r\n    }else{\r\n        jscall_error = \"Layout Not Present\"\r\n        return false\r\n    }\r\n}\r\n\r\nfunction generateTempCode(seri, iter){\r\n    return seri + (iter.toString()).padStart(9 - seri.length, '0')\r\n}\r\n\r\n"
        },
        {
            "Bizobj": {
                "ObjectName": "createEinvoice",
                "Description": "Create E-Invoice",
                "external": false
            },
            "Script": "//**** Business Object createEinvoice Created by malai on 22-Jun-2024 23:41:03 ****//\r\n\r\n// var lhdn_api = require(\"./scripts/Business_Objects/einvIntFunction\")\r\n// var outUpdate = require(\"./scripts/Business_Objects/updateOutStatus\")\r\nfunction getCurrentDateTime() {\r\n    const now = new Date(); // Gets the current date and time in UTC\r\n    const istOffset = (5 * 30); // IST is UTC + 5 hours and 30 minutes\r\n    const istTime = new Date(now.getTime() + istOffset); // Adjust to IST\r\n\r\n    const year = istTime.getFullYear();\r\n    const month = (istTime.getMonth() + 1).toString().padStart(2, '0'); // months start at 0\r\n    const day = istTime.getDate().toString().padStart(2, '0');\r\n    const hours = istTime.getHours().toString().padStart(2, '0');\r\n    const minutes = istTime.getMinutes().toString().padStart(2, '0');\r\n    const seconds = istTime.getSeconds().toString().padStart(2, '0');\r\n    \r\n    return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;\r\n}\r\nexports.getCurrentDateTime = getCurrentDateTime\r\n\r\nfunction getCurrentDateTimeUTC() {\r\n\tlet now = new Date();\r\n\tlet year = now.getUTCFullYear();\r\n\tlet month = String(now.getUTCMonth() + 1).padStart(2, '0');\r\n\tlet day = String(now.getUTCDate()).padStart(2, '0');\r\n\tlet hours = String(now.getUTCHours()).padStart(2, '0');\r\n\tlet minutes = String(now.getUTCMinutes()).padStart(2, '0');\r\n\tlet seconds = String(now.getUTCSeconds()).padStart(2, '0');\r\n\treturn `${year}-${month}-${day} ${hours}:${minutes}:${seconds}Z`;\r\n}\r\nexports.getCurrentDateTimeUTC = getCurrentDateTimeUTC\r\n\r\nfunction generateUniqueId(){\r\n    let now = new Date();\r\n    let year = now.getFullYear().toString().slice(-2);\r\n    let month = String(now.getMonth() + 1).padStart(2, '0');\r\n    let date = String(now.getDate()).padStart(2, '0');\r\n    let hours = String(now.getHours()).padStart(2, '0');\r\n    let minutes = String(now.getMinutes()).padStart(2, '0');\r\n    let seconds = String(now.getSeconds()).padStart(2, '0');\r\n    let milliseconds = String(now.getMilliseconds()).padStart(3, '0');\r\n    let randomNumber = Math.floor(Math.random() * 1000000).toString().padStart(6, '0');\r\n    let uniqueId = `${date}${month}${year}${hours}${minutes}${seconds}${milliseconds}${randomNumber}`;\r\n    return uniqueId;\r\n}\r\n\r\nfunction GetNewToken(){\r\n    lhdn = NewLHDN()\r\n    lhdn_token_data = CralDB.QueryByComp(\"select * from {{e_inv_parameter}} where seqn=0\", jscall.company)\r\n    if (lhdn_token_data.length == 0){\r\n        // jscall_error = \"Unable to get Client Id \u0026 Client Secret\"\r\n        CralUtil.LogInfo(\"Unable to get Client Id \u0026 Client Secret\", \"LHDN Token\", lhdn_token_data)\r\n        return false\r\n    } else {\r\n        lhdn_response = lhdn.Login(lhdn_token_data[0].lhdn_user, lhdn_token_data[0].lhdn_pswd, \"client_credentials\", \"InvoicingAPI\", lhdn_token_data[0].istaxpayer, lhdn_token_data[0].inter_tin)\r\n        switch (lhdn_response.Result.Status){\r\n            case 200:\r\n                CralUtil.SetLocal(\"lhdn_token\" + jscall.company.toString(), lhdn_response.Result.Response.access_token)\r\n                CralUtil.SetLocal(\"lhdn_vld\" + jscall.company.toString(), lhdn_response.Result.Response.expiresin)\r\n                CralUtil.LogInfo(\"Successfully Generated New LHDN Token\", \"lhdn_token\" + jscall.company.toString(), lhdn_response.Result.Response)\r\n                return lhdn_response.Result.Response.access_token\r\n                break\r\n            case 400:\r\n                // jscall_error = \"400\" + lhdn_response.Result.error\r\n                CralUtil.LogInfo(\"400\" + lhdn_response.Result.error, \"LHDN Token\", lhdn_response.Result.Response)\r\n                return false\r\n                break\r\n            case 404:\r\n                // jscall_error = \"404\" + lhdn_response.Result.message\r\n                CralUtil.LogInfo(\"404\" + lhdn_response.Result.message, \"LHDN Token\", lhdn_response.Result.Response)\r\n                return false\r\n                break\r\n            default:\r\n                if (typeof lhdn_response.Result.Response == \"string\"){\r\n                    CreatePortalValidation(invID, 0,lhdn_response.Result.Response, \"\")\r\n                    return false\r\n                }\r\n                // jscall_error = lhdn_response.Result.Status.toString() + \" - \" + JSON.stringify(lhdn_response.Result.Response)\r\n                CralUtil.LogInfo(lhdn_response.Result.Status.toString(), \"LHDN Token\", lhdn_response.Result.Response)\r\n                return false;\r\n        }\r\n    }\r\n    return \"\"\r\n}\r\n\r\nfunction get_lhdn_token(){\r\n    token = CralUtil.GetLocal(\"lhdn_token\" + jscall.company.toString())\r\n    token_vld = CralUtil.GetLocal(\"lhdn_vld\" + jscall.company.toString())\r\n      if (token == undefined || token == null || token == \"\" || token_vld == undefined || token_vld == null || token_vld \u003c getCurrentDateTime() || token_vld == \"\"){\r\n          newToken = GetNewToken()\r\n          if (newToken == false || newToken == \"\"){\r\n              return false\r\n          }\r\n          return newToken\r\n      } else {\r\n          return token\r\n      }\r\n    return \"\"\r\n}\r\nexports.get_lhdn_token = get_lhdn_token\r\n\r\n// Function Added on 5th Sept.\r\nfunction submitEinvoiceToLHDN(einv_number){\r\n\r\n    //issuance Date 12-09-2024 line 105 - 126 (Start)\r\n    einvDate = CralDB.QueryByComp(\"select e_inv_no,e_invdt from {{einv_header}} where e_inv_no = '$1'\", jscall.company,einv_number);\r\n    temp = einvDate[0].e_invdt\r\n    invDate = temp.toLocaleString().substring(0,19)\r\n    currentDate = getCurrentDateTimeUTC() //Line 177\r\n    currentDate_UTC = currentDate.substring(0,19)\r\n    isoDateTimeString = new Date(invDate.replace(' ', 'T')).getTime();\r\n    isoDateTimeString_UTC = new Date(currentDate_UTC.replace(' ', 'T')).getTime();\r\n\r\n    hours = convert2hours((isoDateTimeString_UTC - isoDateTimeString)/ (1000 * 60 * 60)) // Line 188\r\n    // return hours\r\n    invHours = hours.split(':')\r\n    // return invHours[0]\r\n    if(invHours[0] \u003e 72){\r\n        \r\n        currentDate = {\r\n            \"e_inv_no\":einvDate[0].e_inv_no,\r\n            \"e_invdt\": getCurrentDateTimeUTC()\r\n        }\r\n        result = CralDB.PublishTopic(\"einv_header\", jscall.company, \"Update\", currentDate, jscall.user)\r\n        // return result\r\n    }\r\n    // End\r\n    forfilling = check_forFiling(einv_number)\r\n    // if (!check_forFiling(einv_number)){\r\n    if (forfilling == \"\"){\r\n        var doc_json = BuildJSONFormat(einv_number)\r\n        println(\"After Doc\")\r\n        if (typeof doc_json == \"string\"){\r\n            println(\"Error Doc\")\r\n            CralUtil.LogInfo(\"Error While JSON document Creation\", einv_number, doc_json)\r\n            CreatePortalValidation(einv_number, 0, doc_json, \"\")\r\n            return {\r\n                \"invoice\": einv_number,\r\n                \"error\": \"Error While Submitting - \" + doc_json,\r\n                \"status\": false\r\n            }\r\n        } else {\r\n            // Convert JSON to XML and hash the doc to string.\r\n            println(\"Success Doc\")\r\n            submission_ret = SubmitTOLHDN(doc_json.document, einv_number)\r\n            if (submission_ret == false){\r\n                jscall_error = \"Error while Submitting\"\r\n                return {\r\n                    \"invoice\": einv_number,\r\n                    \"error\": \"Error While Submitting\",\r\n                    \"status\": false\r\n                }\r\n            } else {\r\n                sub_data = SubmissionUpdate(submission_ret)\r\n                if (CralDB.QueryByComp(\"select einv_code from {{einv_validation}} where einv_code='$1'\", jscall.company, einv_number).length == 0){\r\n                    return {\r\n                        \"invoice\": einv_number,\r\n                        \"error\": \"\",\r\n                        \"status\": true\r\n                    }\r\n                } else {\r\n                    return {\r\n                        \"invoice\": einv_number,\r\n                        \"error\": \"Unable to Submit to LHDN. Invoice is Under Validation.\",\r\n                        \"status\": false\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    } else {\r\n        return {\r\n            \"invoice\": einv_number,\r\n            \"error\": \"Invoice is under For Filing. \" + forfilling,\r\n            \"status\": false\r\n        }\r\n    }\r\n}\r\n//issuance Date 12-09-2024 line 177 - 201\r\n// function getCurrentDateTimeUTC_issuance_Date() {\r\n// \tlet now = new Date();\r\n// \tlet year = now.getUTCFullYear();\r\n// \tlet month = String(now.getUTCMonth() + 1).padStart(2, '0');\r\n// \tlet day = String(now.getUTCDate()).padStart(2, '0');\r\n// \tlet hours = String(now.getUTCHours()).padStart(2, '0');\r\n// \tlet minutes = String(now.getUTCMinutes()).padStart(2, '0');\r\n// \tlet seconds = String(now.getUTCSeconds()).padStart(2, '0');\r\n// \treturn `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;\r\n// }\r\n\r\nfunction convert2hours(wholeNum){\r\n    const decimalHours = wholeNum;\r\n\r\n    // Extract the whole number part (hours)\r\n    const hours = Math.floor(decimalHours);\r\n\r\n    // Extract the fractional part, convert it to minutes\r\n    const minutes = Math.floor((decimalHours - hours) * 60);\r\n\r\n    // Extract the remaining fractional part, convert it to seconds\r\n    const seconds = Math.round(((decimalHours - hours) * 60 - minutes) * 60);\r\n\r\n    return (`${hours}:${minutes}:${seconds}`);\r\n}\r\n\r\n\r\n\r\nexports.submitEinvoiceToLHDN = submitEinvoiceToLHDN\r\n\r\nfunction check_forFiling(einv_no){\r\n    einvoice_header = CralDB.QueryByComp(`select doct,org_doc_uuid,org_e_inv_no from {{einv_header}} where e_inv_no='${einv_no}'`, jscall.company)\r\n    if ((einvoice_header[0]?.doct != \"01\" \u0026\u0026 einvoice_header[0]?.doct != \"11\") \u0026\u0026 (!einvoice_header[0]?.org_e_inv_no || !einvoice_header[0]?.org_doc_uuid)){\r\n        // return true\r\n        return \"Original Document Reference is Mandatory\" //26-09-2024 Parthi\r\n    }\r\n    einvoice_lines = CralDB.QueryByComp(`select line from {{einv_lines}} where e_inv_no='${einv_no}' and cvat='E' and ceno=''`, jscall.company)\r\n    if (einvoice_lines?.length){\r\n        // return true\r\n        return \"Tax Exemption Certificate Number is Mandatory\" //26-09-2024 Parthi\r\n    }\r\n    // return false\r\n    return \"\" //26-09-2024 Parthi\r\n}\r\n\r\nfunction SubmitTOLHDN(json_doc, invID){\r\n    xmlHashDoc = getHashDocument(json_doc, invID)\r\n    if (xmlHashDoc){\r\n        return SubmitDocuments([xmlHashDoc], [invID])\r\n    }\r\n    return false\r\n}\r\nexports.SubmitTOLHDN = SubmitTOLHDN\r\n\r\nfunction getHashDocument(json_doc, invID){\r\n    lhdn = NewLHDN()\r\n    xml_result = lhdn.JSONtoXML(JSON.stringify(json_doc))\r\n    CralUtil.LogInfo(\"Error: XML\", invID, xml_result.Result.Error)\r\n    if (xml_result.Result.Error || (xml_result.Result.XML == undefined || xml_result.Result.XML == null)){\r\n        CreatePortalValidation(invID, 0, \"Conversion Error: \" + xml_result.Result.Error, \"\")\r\n        return false;\r\n    } else {\r\n        // Sign the Document\r\n        sign_doc = lhdn.SignDocument(\"XML\", invID, xml_result.Result.XML)\r\n        println(sign_doc)\r\n        CralUtil.LogInfo(\"XML_Result\",xml_result)\r\n        // println(JSON.stringify(sign_doc))\r\n        CralUtil.LogInfo(\"SignDoc\", \"Invoice\", sign_doc)\r\n        if (sign_doc.Result.Error || sign_doc.Result.SignedDoc == undefined || sign_doc.Result.SignedDoc == null){\r\n            CreatePortalValidation(invID, 0, \"Signature Error: \" + sign_doc.Result.Error, \"\")\r\n            return false;\r\n        } else {\r\n            return sign_doc.Result.SignedDoc\r\n        }\r\n    }\r\n}\r\n\r\nfunction SubmitDocuments(docs, docID){\r\n    lhdn = NewLHDN()\r\n    token = get_lhdn_token()\r\n    if (token == false){\r\n        CreatePortalValidation(invID, 0, \"Unable to get LHDN Access Token\", \"\")\r\n        return false;\r\n    } else {\r\n        submit_document = {\r\n            \"documents\": docs\r\n        }\r\n        CralUtil.LogInfo(\"SubmissionObject\", \"InvoiceSubmission\", {\"Payload\": submit_document, \"Invoices\": docID})\r\n        sub_result = lhdn.SubmitDocument(token, JSON.stringify(submit_document))\r\n        CralUtil.LogInfo(\"InvoiceSubmission\", \"\", sub_result)\r\n        switch (sub_result.Result.Status){\r\n            case 202:\r\n                return sub_result.Result.Response\r\n                break\r\n            case 400:\r\n                docID.forEach(documentID =\u003e {\r\n                    CreateLHDN_Validation(documentID, 0, sub_result.Result.Response.error, [])\r\n                })\r\n                return false;\r\n                break;\r\n            case 422:\r\n                vald_catg = \"20\"\r\n                error_Message = sub_result.Result.Response.error;\r\n                break;\r\n            case 429:\r\n                vald_catg = \"20\";\r\n                error_Message = sub_result.Result.Response.message;\r\n                break;\r\n            case 401:\r\n                vald_catg = \"20\";\r\n                error_Message = sub_result.Result.Response.message;\r\n                break;\r\n            case 500:\r\n                vald_catg = \"20\"\r\n                // Submission Error: 500 - \"invalid character '\u003c' looking for beginning of value\"\r\n                if (typeof sub_result.Result.Response == \"string\"){\r\n                    error_Message = `Submission Error: ${sub_result.Result.Status.toString()} - ${sub_result.Result.Response}`\r\n                } else {\r\n                    error_Message = \"Submission Error: \" + sub_result.Result.Status.toString() + \" - \" + JSON.stringify(sub_result.Result.Response)\r\n                }\r\n                break;\r\n            case 1001:\r\n                vald_catg = \"10\"\r\n                if (typeof sub_result.Result.Response == \"string\"){\r\n                    error_Message = sub_result.Result.Response\r\n                } else {\r\n                    error_Message = \"Submission Error: \" + sub_result.Result.Status.toString() + \" - \" + JSON.stringify(sub_result.Result.Response)\r\n                }\r\n                break;\r\n            default:\r\n                vald_catg = \"20\"\r\n                if (typeof sub_result.Result.Response == \"string\"){\r\n                    error_Message = `Submission Error: ${sub_result.Result.Status.toString()} - ${sub_result.Result.Response}`\r\n                } else {\r\n                    error_Message = \"Submission Error: \" + sub_result.Result.Status.toString() + \" - \" + JSON.stringify(sub_result.Result.Response)\r\n                }\r\n                break;\r\n        }\r\n        docID?.forEach(doc =\u003e {\r\n            CreateValidation(doc, 0, vald_catg, sub_result.Result.Status.toString(), error_Message, \"\", \"Submission\", \"\")\r\n        })\r\n    }\r\n    return false\r\n}\r\n\r\nfunction SubmissionUpdate(submitted_obj){\r\n    debug(\"Submission Update\")\r\n    sub_results = []\r\n    debug(submitted_obj)\r\n    if (submitted_obj.acceptedDocuments != undefined || submitted_obj.acceptedDocuments != null || submitted_obj.acceptedDocuments.length != 0){\r\n        debug(\"In Submission\")\r\n        for (i = 0; i\u003csubmitted_obj.acceptedDocuments.length; i++){\r\n            debug(\"Accept\")\r\n            sub_doc = submitted_obj.acceptedDocuments[i]\r\n            sub_rec = CralDB.QueryByComp(\"select e_inv_no,sup_email,buy_email,sup_name,buy_name,dataset,comp from {{einv_header}} where e_inv_no='$1'\", jscall.company, sub_doc.invoiceCodeNumber)\r\n            debug(sub_rec)\r\n            // status_api = executeCWSCall(\"POST\", api_url[0].cws_url + \"/api/\" + jscall.company.toString() + \"/portaltoln\", input_data)\r\n            if (sub_rec.length != 0){\r\n                sub_rec_payload = sub_rec[0]\r\n                sub_rec_payload.submission_uid = submitted_obj.submissionUid\r\n                sub_rec_payload.doc_uuid = sub_doc.uuid\r\n                sub_rec_payload.einv_stat = \"20\"\r\n                sub_rec_payload.esta = \"20\"\r\n                sub_result = CralDB.PublishTopic(\"einv_header\", jscall.company, \"Update\", sub_rec_payload, jscall.user)\r\n                debug(sub_result)\r\n                sub_lines = CralDB.QueryByComp(\"select e_inv_no,line from {{einv_lines}} where e_inv_no='$1'\", jscall.company, sub_doc.invoiceCodeNumber)\r\n                sub_line_results = []\r\n                for (j = 0; j \u003c sub_lines.length; j++){\r\n                    sub_line_payload = sub_lines[j]\r\n                    sub_line_payload.lsta = \"20\"\r\n                    sub_line_results.push(CralDB.PublishTopic(\"einv_lines\", jscall.company, \"Update\", sub_line_payload, jscall.user))\r\n                }\r\n                sub_result.Lines = sub_line_results\r\n                sub_results.push(sub_result)\r\n                \r\n                if (UpdateStatusToSource(sub_doc.invoiceCodeNumber, \"SUBMITTED TO LHDN\", \"\") != true){\r\n                    // Source is not Updated. \r\n                }\r\n            } else {\r\n                // Accepted document E-Invoice Code Not Found.\r\n            }\r\n        }\r\n    } else {\r\n        // Submission Object has null value.\r\n    }\r\n\r\n    if (submitted_obj.rejectedDocuments != undefined || submitted_obj.rejectedDocuments != null || submitted_obj.rejectedDocuments.length != 0){\r\n        for (i = 0; i\u003csubmitted_obj.rejectedDocuments.length ; i++){\r\n            rej_doc = submitted_obj.rejectedDocuments[i]\r\n            validation_result = CreateLHDN_Validation(rej_doc.invoiceCodeNumber, 0, rej_doc.error, [])\r\n            sub_results.push(validation_result)\r\n        }\r\n    };\r\n    return sub_results\r\n}\r\nexports.SubmissionUpdate = SubmissionUpdate\r\n\r\nfunction executeCWSm(credentials, company, dllName, funcName, parameter){\r\n    in_Obj = {\r\n        verb: \"Push\",\r\n        Request: {\r\n            RequestID: generateUniqueId(),\r\n            CallBackBo: credentials.cb_bo,\r\n            CallBackFn: credentials.cb_func,\r\n            Method: \"getdata\",\r\n            Payload: {\r\n                CompanyNo: company,\r\n                DllName: dllName,\r\n                FuncName: funcName,\r\n                SetCommit: false,\r\n                Parameters: parameter\r\n            }\r\n        }\r\n    }\r\n    println(\"In Object\", JSON.stringify(in_Obj))\r\n    debug(JSON.stringify(in_Obj))\r\n    var out = SendToWS(credentials.ws_endpoint, in_Obj)\r\n    println(\"Out\",JSON.stringify(out))\r\n    debug(JSON.stringify(out))\r\n    return out\r\n}\r\nexports.executeCWSm = executeCWSm\r\n\r\nfunction UpdateStatusToSource(e_inv_no, stat, vld_time){\r\n    einvoice_data = CralDB.QueryByComp(`select e_inv_no,comp,tran,idoc,dataset,submission_uid,doc_uuid,src_type from {{einv_header}} where e_inv_no='${e_inv_no}'`, jscall.company)\r\n    // debug(einvoice_data)\r\n    // if (einvoice_data?.length != 0){\r\n    //     // Input einvoice_data[0].e_inv_no\r\n    // }\r\n    update_result = []\r\n    einv_data = CralDB.QueryByComp(`select data_set as dataset,tran,idoc,CONCAT(tran,idoc) as \"e_inv_no\", comp, src_type from {{conso_header}} where conso_inv='${e_inv_no}'`,jscall.company)\r\n    if (einv_data.length == 0){\r\n        update_result.push({\r\n            \"Status\": submission_update(einvoice_data[0], stat, vld_time),\r\n            \"InvoiceNumber\": einvoice_data[0].e_inv_no\r\n        })\r\n    } else {\r\n        einv_data.forEach(inv =\u003e {\r\n            inv[\"submission_uid\"] = einvoice_data[0].submission_uid\r\n            inv[\"doc_uuid\"] = einvoice_data[0].doc_uuid\r\n        })\r\n        for (var s=0; s\u003ceinv_data?.length; s++){\r\n            update_result.push({\r\n                \"Status\": submission_update(einv_data[s], stat, vld_time),\r\n                \"InvoiceNumber\": einv_data[s].e_inv_no\r\n            })\r\n        }\r\n    }\r\n    CralUtil.LogInfo(\"StatusUpdation\", e_inv_no, update_result)\r\n}\r\nexports.UpdateStatusToSource = UpdateStatusToSource\r\n\r\nfunction CreateOutStatus(dataset, company, inv_no, status, lhdn_date, submission_id, uuid, src_type) {\r\n    let statusObj = {}\r\n\r\n    statusObj[\"data_set\"] = dataset\r\n    statusObj[\"invoice_no\"] = inv_no\r\n    statusObj[\"company\"] = company\r\n    statusObj[\"status\"] = status \r\n    statusObj[\"lhdn_date\"] = lhdn_date \r\n    statusObj[\"sub_uid\"] = submission_id\r\n    statusObj[\"uuid\"] = uuid\r\n    statusObj[\"src_type\"] = src_type\r\n   let result = CralDB.PublishTopic(\"invoicestatusout\", jscall.company, \"Upsert\", statusObj,jscall.User)\r\n    if (result?.Success == true ){\r\n        return true \r\n    }\r\n    return false \r\n}\r\n\r\nfunction submission_update(inv_obj, stat, vld_time){\r\n    ds_credential = CralDB.QueryByComp(`select * from {{ds_parameter}} where data_set='${inv_obj.dataset}'`, jscall.company)\r\n    if (ds_credential?.length != 0){\r\n        switch(ds_credential[0].type){\r\n            case \"cwsm\":\r\n                input_parm = [\r\n                    {\r\n                        ParameterNo: 1,\r\n                        Type: \"json\",\r\n                        Value: {\r\n                            \"Company\": inv_obj.comp,\r\n                            \"E_InvNumber\": inv_obj.e_inv_no,\r\n                            \"InvoiceNumber\": inv_obj.idoc,\r\n                            \"E_InvDateTime\": vld_time,\r\n                            \"E_InvStatus\": stat,\r\n                            \"ErrorMessage\": \"\",\r\n                            \"TransactionType\": inv_obj.tran,\r\n                            \"SUID\": inv_obj.submission_uid,\r\n                            \"UUID\": inv_obj.doc_uuid\r\n                        }\r\n                    }\r\n                ]\r\n                cwsm_result = executeCWSm(ds_credential[0], jscall.company, \"otdeindll000100\", \"tdein.dll000100.update.status.Einvoice.portal2Ln\", input_parm)\r\n                return true\r\n            break;\r\n            default:\r\n                return CreateOutStatus(inv_obj.dataset, inv_obj.comp, inv_obj.e_inv_no, stat, \r\n                                vld_time, inv_obj.submission_uid, inv_obj.doc_uuid, \r\n                                CralUtil.GetListDesc(\"src_inv_type\", inv_obj.src_type))\r\n                // statusObj = {\r\n                //     \"data_set\": einvoice_data[0].dataset,\r\n                //     \"invoice_no\": einvoice_data[0].e_inv_no,\r\n                //     \"status\": stat,\r\n                //     \"company\": einvoice_data[0].comp,\r\n                //     \"lhdn_date\": vld_time,\r\n                //     \"sub_uid\": einvoice_data[0].submission_uid,\r\n                //     \"uuid\": einvoice_data[0].doc_uuid,\r\n                //     \"src_type\": CralUtil.GetListDesc(\"src_inv_type\", einvoice_data[0].src_type)\r\n                // }\r\n                // debug(statusObj)\r\n                // let result = CralDB.PublishTopic(\"invoicestatusout\", jscall.company, \"Upsert\", statusObj,jscall.User)\r\n                // if (result?.Success == true ){\r\n                //     return true \r\n                // }\r\n                // return false \r\n            break\r\n        }\r\n    }\r\n}\r\nfunction getLNtoken(){\r\n    api_data = CralDB.QueryByComp(\"select * from {{e_inv_parameter}} where seqn=0\", jscall.company)\r\n    api_info = {\r\n        \"url\":api_data[0].cws_url,\r\n        \"userdetails\":{\r\n            \"username\":api_data[0].cws_user,\r\n            \"password\":api_data[0].cws_pswd\r\n        }\r\n    }\r\n\r\n    token_info = jscall.ExecuteAPI(\"POST\", api_info.url + \"/auth\", api_info.userdetails)\r\n    if (token_info.StatusCode != 200){\r\n        return \"\"\r\n    } else {\r\n        response_data = JSON.parse(token_info.Data)\r\n        return response_data.Token\r\n    }\r\n}\r\n\r\nfunction executeCWSCall(method, url, payload) {\r\n    ln_token = getLNtoken()\r\n    if (ln_token == \"\"){\r\n        return \"Unable to get CWS Token.\"\r\n    } else {\r\n        return jscall.ExecuteAPI(method, url, payload, \"token\", ln_token)\r\n    }\r\n}\r\n// exports.executeCWSCall = executeCWSCall\r\n\r\n// function UpdateStatusToSource(einv_number, status, lhdn_vld_dt){\r\n//     src_update = CralDB.QueryByComp(\"select comp,tran,idoc,dataset from {{einv_header}} where e_inv_no='\" + einv_number +\"'\", jscall.company)\r\n//     src_update_lines = CralDB.QueryByComp(\"select line from {{einv_lines}} where e_inv_no='\" + einv_number + \"' order by line\", jscall.company)\r\n//     lines = []\r\n//     for (i=0;i\u003csrc_update_lines.length;i++){\r\n//         lines.push({\r\n//             \"Line_No\": src_update_lines[i].line,\r\n//             \"Status\": status,\r\n//             \"ErrorMessage\": \"\"\r\n//         })\r\n//     }\r\n//     update_payload = {\r\n//         \"Company\": src_update[0].comp,\r\n//         \"TransactionType\": src_update[0].tran,\r\n//         \"InvoiceNumber\": src_update[0].idoc,\r\n//         \"E_InvDateTime\": lhdn_vld_dt,\r\n//         \"E_InvStatus\": status,\r\n//         \"ErrorMessage\": \"\",\r\n//         \"DocumentType\": \"\",\r\n//         \"Lines\": lines\r\n//     }\r\n//     ds_type = CralDB.QueryByComp(\"select type from ds_parameter where data_set='$1'\", jscall.company, src_update[0].dataset)\r\n//     if (ds_type.length != 0){\r\n//         switch(ds_type[0].type){\r\n//             case \"cws\":\r\n//                     api_url = CralDB.QueryByComp(\"select cws_url from {{e_inv_parameter}} where seqn=0\", 0)\r\n//                     input_data = {\r\n//                         \"inpt.json\": update_payload\r\n//                     }\r\n//                     status_api = executeCWSCall(\"POST\", api_url[0].cws_url + \"/api/\" + jscall.company.toString() + \"/portaltolnDev\", input_data)\r\n//                     println(JSON.stringify(status_api))\r\n//                     if (status_api.StatusCode != 200){\r\n//                         return {\r\n//                             \"Error\":\"Unable to update to Source.\"\r\n//                         }\r\n//                     } else {\r\n//                         ret_stat = JSON.parse(status_api.Data)\r\n//                         ret_stat.Error_to_LN = \"\"\r\n//                         return ret_stat\r\n//                     }\r\n//             break\r\n//             case \"cwsm\":\r\n//             break\r\n//             // To do for filelist\r\n//             default:\r\n//                 return {\r\n//                     \"Error\":\"Outgoing Type is not defined in DS Parameter.\"\r\n//                 }\r\n//             break\r\n//         }\r\n//     } else {\r\n//         return {\r\n//             \"Error\":\"Unable to update to Source.\"\r\n//         }\r\n//     }\r\n// }\r\n// exports.UpdateStatusToSource = UpdateStatusToSource\r\n\r\nfunction CreateValidation(invCode, line_num, val_catg, err_code, err_mess, err_trgt, prop_path, details){\r\n    if (val_catg == \"10\" \u0026\u0026 err_code == \"\"){\r\n        err_code = \"PV\"\r\n    }\r\n    vald_payload = {\r\n        \"einv_code\": invCode,\r\n        \"einv_line\": line_num,\r\n        \"val_catg\": val_catg,\r\n        \"err_code\": err_code,\r\n        \"mess\": err_mess,\r\n        \"trgt\": err_trgt,\r\n        \"prop_path\": prop_path,\r\n        \"details\": details\r\n    }\r\n    // update_header = CralDB.QueryByComp(\"select comp,tran,idoc,line,e_inv_no from {{einv_header}} where e_inv_no='$1'\", jscall.company, invCode)[0]\r\n    // update_header.einv_stat = \"60\"\r\n    // update_header.val_err = val_catg\r\n    update_header = {\r\n        \"e_inv_no\": invCode,\r\n        \"einv_stat\": \"60\"\r\n    }\r\n    CralUtil.LogInfo(\"HeaderStatusUpdate\", invCode, CralDB.PublishTopic(\"einv_header\", jscall.company, \"Update\", update_header, jscall.user))\r\n    return CralDB.PublishTopic(\"einv_validation\", jscall.company, \"Insert\", vald_payload, jscall.user)\r\n}\r\nexports.CreateValidation = CreateValidation\r\n\r\nfunction CreatePortalValidation(invCode, line_num, err_mess, err_propPath){\r\n    return CreateValidation(invCode, line_num, \"10\", \"\", err_mess, \"\", err_propPath, \"\")\r\n}\r\nexports.CreatePortalValidation = CreatePortalValidation\r\n\r\nfunction CreateLHDN_Validation(invCode, line_num, err_obj, valid_result){\r\n    err_code = (err_obj.code == \"\" || err_obj.code == undefined || err_obj.code == null)?\"\":err_obj.code;\r\n    err_message = (err_obj.message == \"\" || err_obj.message == undefined || err_obj.message == null)?\"\":err_obj.message;\r\n    err_target = (err_obj.target == \"\" || err_obj.target == undefined || err_obj.target == null)?\"\":err_obj.target;\r\n    err_propPath = (err_obj.propertyPath == \"\" || err_obj.propertyPath == undefined || err_obj.propertyPath == null)?\"\":err_obj.propertyPath;\r\n    line_num = getInvoiceLineIndex(err_propPath)\r\n    if (line_num != null){\r\n        line_num = CralDB.QueryByComp(\"select line from {{einv_lines}} where e_inv_no='$1' order by line\", jscall.company, invCode)[line_num].line\r\n    } else {\r\n        line_num = 0\r\n    }\r\n    valid_result.push(CreateValidation(invCode, line_num, \"20\", err_code, err_message, err_target, err_propPath, \"\"))\r\n    if (err_obj.details?.length != 0 \u0026\u0026 err_obj.details != null \u0026\u0026 err_obj.details != undefined){\r\n        for (j = 0; j\u003cerr_obj.details.length; j++){\r\n            valid_result = CreateLHDN_Validation(invCode, 0, err_obj.details[j], valid_result)\r\n        }\r\n    }\r\n    return valid_result\r\n    // return CreateValidation(invCode, line_num, \"20\", err_code, err_mess, err_trgt, prop_path, details)\r\n}\r\nexports.CreateLHDN_Validation = CreateLHDN_Validation\r\n\r\nfunction getInvoiceLineIndex(input) {\r\n    const regex = /InvoiceLine\\[(\\d+)\\]/;\r\n    const match = regex.exec(input);\r\n    return match ? parseInt(match[1], 10) : null;\r\n}\r\nexports.getInvoiceLineIndex = getInvoiceLineIndex\r\n\r\nfunction SendSubmissionMail(mail_input){\r\n    debug(\"Sending Mail\")\r\n    mail = {}\r\n    mail.To = []\r\n    mail.Cc = []\r\n    if (mail_input.supplier_mailID != \"\" \u0026\u0026 mail_input.supplier_mailID != null \u0026\u0026 mail_input.supplier_mailID != undefined){\r\n        mail.Cc.push(mail_input.supplier_mailID)\r\n    }\r\n    if (mail_input.buyer_mailID != \"\" \u0026\u0026 mail_input.buyer_mailID != null \u0026\u0026 mail_input.buyer_mailID != undefined){\r\n        mail.To.push(mail_input.buyer_mailID)\r\n    } else {\r\n        return\r\n    }\r\n    mail.Subject = mail_input.sname.split(\" \")[0] + \"_Invoice Submission_\" + mail_input.invCodeNum\r\n    mail.Template = \"lhdnStatus\"\r\n    mail.InputObject = {\r\n        \"supplier\": mail_input.bname,\r\n        \"invoice\": mail_input.invCodeNum,\r\n        \"dsca\": mail_input.Submission_Uid,\r\n        \"status\": mail_input.LHDNStatus\r\n    }\r\n    // mail.FileAttachments = [mail_input.Attachment]\r\n    pdf = printReportLayout(mail_input.invCodeNum)\r\n    if (pdf.result != \"\" \u0026\u0026 pdf.result != null \u0026\u0026 pdf.result != undefined){\r\n        mail.FileAttachments = [pdf.result]\r\n    } else {\r\n        // mail.FileAttachments = [\"fa8e1ea3-3c9f-40cf-a20b-f719630afa4d\"]\r\n    }\r\n    debug(JSON.stringify(mail))\r\n    debug(\"Mail Sent\")\r\n    return CralUtil.SendMail(mail)\r\n}\r\nexports.SendSubmissionMail = SendSubmissionMail\r\n\r\nfunction check_validations(EInvoiceCodeNumber){\r\n    debug(\"Checking...\")\r\n\r\n    eih_data = CralDB.QueryByComp(\"select * from {{einv_header}} where e_inv_no='$1'\", jscall.company, EInvoiceCodeNumber)\r\n    if (eih_data?.length == 0){\r\n        // jscall_error = \"Record not found\"\r\n        CralUtil.LogInfo(\"Check Invoice Validation\", EInvoiceCodeNumber, eih_data)\r\n        return false\r\n    } else {\r\n\r\n        // Skip if skipMaster is Enabled.\r\n        isSkip = CralDB.QueryByComp(`select skip_master from {{entity_data_set}} where sup_company=${eih_data[0].comp} and data_set='${eih_data[0].dataset}'`, jscall.company)[0]?.skip_master\r\n        CralUtil.LogInfo(\"SkipPV\", eih_data[0].e_inv_no, isSkip)\r\n        if (isSkip){\r\n            return true\r\n        }\r\n\r\n        core_fields_valid(EInvoiceCodeNumber)\r\n        debug(\"After Core Validation\")\r\n        if (eih_data[0].s_line_cnt != eih_data[0].line_cnt){\r\n            CreatePortalValidation(eih_data[0].e_inv_no, 0, \"Line Count Miss Match with Source.\", \"\")\r\n        }\r\n        debug(\"AFter Line Count\")\r\n        if (eih_data[0].sctg != \"30\"){\r\n            let [sup_id_val, sup_id_type] = get_reg_num_type(eih_data[0].sup_reg_brn, eih_data[0].sup_reg_nric, eih_data[0].sup_reg_army, eih_data[0].sup_reg_passport)\r\n            debug(eih_data[0].sup_tin, sup_id_type, sup_id_val)\r\n            if( validate_tin(eih_data[0].sup_tin, sup_id_type, sup_id_val) != true){\r\n                CreatePortalValidation(eih_data[0].e_inv_no, 0, \"Supplier TIN Validation Failed\", \"Supplier\")\r\n            }\r\n        }\r\n        if (eih_data[0].sctg != \"20\"){\r\n            let [buy_id_val, buy_id_type] = get_reg_num_type(eih_data[0].buy_reg_brn, eih_data[0].buy_reg_nric, eih_data[0].buy_reg_army, eih_data[0].buy_reg_passport)\r\n            if (eih_data[0].inv_bp != \"\" \u0026\u0026 eih_data[0].inv_bp != null \u0026\u0026 eih_data[0].inv_bp != undefined){\r\n                if( validate_tin(eih_data[0].buy_tin, buy_id_type, buy_id_val) != true){\r\n                    CreatePortalValidation(eih_data[0].e_inv_no, 0, \"Buyer TIN Validation Failed\", \"Buyer\")\r\n                }\r\n            }\r\n        }\r\n        let [ship_id_val, ship_id_type] = get_reg_num_type(eih_data[0].ship_reg_brn, eih_data[0].ship_reg_nric, eih_data[0].ship_reg_army, eih_data[0].ship_reg_passport)\r\n        if (eih_data[0].ship_tin \u0026\u0026 ship_id_val){\r\n            if( validate_tin(eih_data[0].ship_tin, ship_id_type, ship_id_val) != true){\r\n                CreatePortalValidation(eih_data[0].e_inv_no, 0, \"Shipper TIN Validation Failed\", \"Shipper\")\r\n            }\r\n        }\r\n        if (eih_data[0].doct == \"02\" || eih_data[0].doct == \"12\"){\r\n            if (!eih_data[0].org_e_inv_no){\r\n                // To Change this as go to For filing\r\n                // CreatePortalValidation(eih_data[0].e_inv_no, 0, \"Reference Document is missing (E-Invoice Number)\")\r\n            }\r\n            if (!eih_data[0].org_doc_uuid){\r\n                // To Change this as go to For filing\r\n                // CreatePortalValidation(eih_data[0].e_inv_no, 0, \"Reference Document is missing (Document UUID)\")\r\n            }\r\n        }\r\n        if (CralDB.QueryByComp(\"select einv_code from {{einv_validation}} where einv_code='$1'\", jscall.company, eih_data[0].e_inv_no)?.length == 0){\r\n            if (eih_data[0].err_msg != \"\" || eih_data[0].einv_stat != \"10\"){\r\n                resolved_update = {\r\n                    \"e_inv_no\": eih_data[0].e_inv_no,\r\n                    \"err_msg\": \"\",\r\n                    \"einv_stat\": \"10\"\r\n                }\r\n                if (eih_data[0].esta == \"10\"){\r\n                    resolved_update[\"e_invdt\"] = getCurrentDateTimeUTC()\r\n                }\r\n                CralDB.PublishTopic(\"einv_header\", jscall.company, \"Update\", resolved_update, jscall.user)\r\n            };\r\n            return true\r\n        }\r\n    }\r\n    return false\r\n}\r\nexports.check_validations = check_validations\r\n\r\nfunction validate_tin(tin, idType, idVal){\r\n    lhdn = NewLHDN()\r\n    token = get_lhdn_token()\r\n    if (token == false){\r\n        return false;   \r\n    } else {\r\n        lhdn_response = lhdn.ValidateTaxPayerTIN(token, tin, idType, idVal)\r\n        switch(lhdn_response.Result.Status){\r\n            case 200:\r\n                return lhdn_response.Result.Response\r\n                break;\r\n            default:\r\n                // jscall_error = lhdn_response.Result.Status + \" - \" + JSON.stringify(lhdn_response.Result.Response)\r\n                return false;\r\n                break\r\n        }\r\n    }\r\n    return false\r\n}\r\nexports.validate_tin = validate_tin\r\n// function check_mapping_header(currency, taxt, invNum){\r\n//     // if (currency != \"\" \u0026\u0026 taxt != \"\" \u0026\u0026 currency != undefined \u0026\u0026 taxt != undefined \u0026\u0026 currency != null \u0026\u0026 taxt != null){\r\n//     //     return true\r\n//     // }\r\n//     if (currency == \"\" || currency == null || currency == undefined){\r\n//         // CreatePortalValidation(invNum, 0, \"Unmapped Currency Code.\", \"Currency\")\r\n//         CreateValidation(invNum, 0, \"10\", \"MAP\", \"Unmapped Currency Code\", \"Invoice.Map\", \"\", \"\")\r\n//     }\r\n//     if (taxt == \"\" || taxt == null || taxt == undefined){\r\n//         // CreatePortalValidation(invNum, 0, \"Unmapped Tax Code\", \"Unmapped Tax Code\")\r\n//         CreateValidation(invNum, 0, \"10\", \"MAP\", \"Unmapped Tax Code\", \"Invoice.Map\", \"\", \"\")\r\n//     }\r\n// }\r\n\r\nfunction core_fields_valid(EInvoiceCodeNumber){\r\n    core_field_err = \"\"\r\n    doc_header = CralDB.QueryByComp(\"select * from {{einv_header}} where e_inv_no='$1'\", jscall.company, EInvoiceCodeNumber)\r\n    doc_line = CralDB.QueryByComp(\"select * from {{einv_lines}} where e_inv_no='$1'\", jscall.company, EInvoiceCodeNumber)\r\n    if (doc_header.length == 0 || doc_line == 0){\r\n        core_field_err = \"Record Not Found\"\r\n        return;\r\n    } else {\r\n        // if (doc_header[0].doct == \"11\" || doc_header[0].doct == \"12\"){\r\n        //     buyer_code = doc_header[0].ifbp\r\n        // } else {\r\n        //     buyer_code = doc_header[0].itbp\r\n        // }\r\n        // sup_field_vald(doc_header[0].comp, doc_header[0].e_inv_no)\r\n        // if (isConso != true){\r\n        //     buyer_field_vald(buyer_code, doc_header[0].e_inv_no)\r\n        // }\r\n\r\n        // Invoice Data\r\n        if (doc_header[0].doct == \"\"){\r\n            // core_field_err = core_field_err + \"E-Invoice Type Code is Mandatory.\"\r\n            CreatePortalValidation(doc_header[0].e_inv_no, 0, \"E-Invoice Type Code is Mandatory.\", \"Invoice\")\r\n        }\r\n        if (doc_header[0].ccur == \"\"){\r\n            // core_field_err = core_field_err + \"Currency code is Mandatory.\"\r\n            CreatePortalValidation(doc_header[0].e_inv_no, 0, \"Currency code is Mandatory.\", \"Invoice\")\r\n        }\r\n        if (doc_header[0].tote == 0){\r\n            // core_field_err = core_field_err + \"Total Excluding Tax is Mandatory.\"\r\n            CreatePortalValidation(doc_header[0].e_inv_no, 0, \"Total Excluding Tax is Mandatory.\", \"Invoice\")\r\n        }\r\n        if (doc_header[0].toti == 0){\r\n            // core_field_err = core_field_err + \"Total Including Tax is Mandatory\"\r\n            CreatePortalValidation(doc_header[0].e_inv_no, 0, \"Total Including Tax is Mandatory.\", \"Invoice\")\r\n        }\r\n        if (doc_header[0].tpat == 0){\r\n            // core_field_err = core_field_err + \"Total Payable Amount is Mandatory\"\r\n            CreatePortalValidation(doc_header[0].e_inv_no, 0, \"Total Payable Amount is Mandatory.\", \"Invoice\")\r\n        }\r\n        \r\n        if (doc_header[0]?.cvat == \"\"){\r\n            CreatePortalValidation(doc_header[0].e_inv_no, 0, \"Tax Type is Mandatory\", \"Invoice\")\r\n        } //else {\r\n        //     // Total Tax amount per tax type\r\n        //     if (doc_header[0]?.tott == 0){\r\n        //         if (doc_header[0]?.cvat != \"06\" \u0026\u0026 doc_header[0]?.cvat != \"E\"){\r\n        //         }\r\n        //     }\r\n        // }\r\n\r\n        // Invoice Line\r\n        for (let i = 0; i \u003c doc_line.length; i++){\r\n            if (doc_line[i].clas == \"\"){\r\n                // core_field_err = core_field_err + \"Classification is Mandatory - Line \" + doc_line[i].line.toString() + \".\"\r\n                CreatePortalValidation(doc_header[0].e_inv_no, doc_line[i].line, \"Classification is Mandatory.\", \"InvoiceLine\")\r\n            }\r\n            if (doc_line[i].item_desc == \"\"){\r\n                // core_field_err = core_field_err + \"Product Description is Mandatory - Line \" + doc_line[i].line.toString() + \".\"\r\n                CreatePortalValidation(doc_header[0].e_inv_no, doc_line[i].line, \"Description of Product or Service is Mandatory.\", \"InvoiceLine\")\r\n            }\r\n            \r\n            // if (doc_line[i].pric == 0){\r\n            //     // core_field_err = core_field_err + \"Price is Mandatory - Line \" + doc_line[i].line.toString() + \".\"\r\n            //     CreatePortalValidation(doc_header[0].e_inv_no, doc_line[i].line, \"Unit Price is Mandatory.\", \"InvoiceLine\")\r\n            // }\r\n            // if (doc_line[i].stot == 0){\r\n            //     // core_field_err = core_field_err + \"Sub Total is Mandatory - Line \" + doc_line[i].line.toString() + \".\"\r\n            //     CreatePortalValidation(doc_header[0].e_inv_no, doc_line[i].line, \"Sub Total is Mandatory.\", \"InvoiceLine\")\r\n            // }\r\n            // if (doc_line[i].amti == 0){\r\n            //     // core_field_err = core_field_err + \"Total Excluding Tax is Mandatory - Line \" + doc_line[i].line.toString() + \".\"\r\n            //     CreatePortalValidation(doc_header[0].e_inv_no, doc_line[i].line, \"Total Excluding Tax is Mandatory.\", \"InvoiceLine\")\r\n            // }\r\n\r\n            if (doc_line[i].cvat == \"E\" \u0026\u0026 !doc_line[i].ceno){\r\n                // To check is exemption number is available.\r\n                \r\n                // To Change this as go to For Filing\r\n                // CreatePortalValidation(doc_header[0].e_inv_no, doc_line[i].line, \"Tax exemption reason is required\", \"TaxExemption\")\r\n            }\r\n            // if (doc_line[i].cvat != \"E\" \u0026\u0026 doc_line[i].cvat != \"\" \u0026\u0026 doc_line[i].txai == 0){\r\n            //     //Tax Amount\r\n            // }\r\n\r\n        }\r\n\r\n        // Supplier Data\r\n        if (doc_header[0].sup_name == \"\"){\r\n            CreatePortalValidation(doc_header[0].e_inv_no, 0, \"Supplier Name is Mandatory.\", \"Supplier\")\r\n        }\r\n        if (doc_header[0].sup_tin == \"\"){\r\n            // core_field_err = core_field_err + \"Supplier TIN is Mandatory.\"\r\n            CreatePortalValidation(doc_header[0].e_inv_no, 0, \"Supplier TIN is Mandatory.\", \"Supplier\")\r\n        }\r\n        if (doc_header[0].sup_reg_nric == \"\" \u0026\u0026 doc_header[0].sup_reg_brn == \"\" \u0026\u0026 doc_header[0].sup_reg_passport == \"\" \u0026\u0026 doc_header[0].sup_reg_army == \"\"){\r\n            // core_field_err = core_field_err + \"Supplier Registeration No. is Mandatory.\"\r\n            CreatePortalValidation(doc_header[0].e_inv_no, 0, \"Supplier Registration No. is Mandatory.\", \"Supplier\")\r\n        }\r\n        // if (doc_header[0].sup_sst == true \u0026\u0026 doc_header[0].sup_sst_reg == \"\"){\r\n        //     // core_field_err = core_field_err + \"Supplier SST is Mandatory.\"\r\n        //     CreatePortalValidation(doc_header[0].e_inv_no, 0, \"Supplier SST is Mandatory.\", \"Supplier\")\r\n        // }\r\n        // if (doc_header[0].sup_ttx == true \u0026\u0026 doc_header[0].sup_ttx_no == \"\"){\r\n        //     // core_field_err = core_field_err + \"Supplier Tourism Tax is Mandatory.\"\r\n        //     CreatePortalValidation(doc_header[0].e_inv_no, 0, \"Supplier Tourism Tax is Mandatory.\", \"Supplier\")\r\n        // }\r\n        if (doc_header[0].sup_msic == \"\"){\r\n            // core_field_err = core_field_err + \"MSIC Code is Mandatory.\"\r\n            CreatePortalValidation(doc_header[0].e_inv_no, 0, \"Supplier MSIC code is Mandatory.\", \"Supplier\")\r\n        }\r\n        if (doc_header[0].sup_badsca == \"\"){\r\n            // core_field_err = core_field_err + \"Business Activity is Mandatory.\"\r\n            CreatePortalValidation(doc_header[0].e_inv_no, 0, \"Business Activity is Mandatory.\", \"Supplier\")\r\n        }\r\n        if (doc_header[0].sup_adrs == \"\"){\r\n            // core_field_err = core_field_err + \"Supplier Address is Mandatory.\"\r\n            CreatePortalValidation(doc_header[0].e_inv_no, 0, \"Supplier Address is Mandatory.\", \"Supplier\")\r\n        }\r\n        if (doc_header[0].sup_cont_num == \"\"){\r\n            // core_field_err = core_field_err + \"Supplier Contact Number is Mandatory.\"\r\n            CreatePortalValidation(doc_header[0].e_inv_no, 0, \"Supplier Contact Number is Mandatory.\", \"Supplier\")\r\n        }\r\n        if (doc_header[0].sup_adrs_line0 == \"\" \u0026\u0026 doc_header[0].sup_adrs_line1 == \"\" \u0026\u0026 doc_header[0].sup_adrs_line2 == \"\"){\r\n            CreatePortalValidation(doc_header[0].e_inv_no, 0, \"Supplier Address - Line is Mandatory\", \"Supplier\")\r\n        }\r\n        if (doc_header[0].sup_city == \"\"){\r\n            CreatePortalValidation(doc_header[0].e_inv_no, 0, \"Supplier Address - City is Mandatory.\", \"Supplier\")\r\n        }\r\n        if (doc_header[0].sup_cste == \"\"){\r\n            if (isSourceAddressAvil(doc_header[0].dataset, doc_header[0].sup_adrs, \"state\") == true){\r\n                CreatePortalValidation(doc_header[0].e_inv_no, 0, \"Supplier Address - Unmapped State Code.\", \"Supplier\")\r\n            } else {\r\n                CreatePortalValidation(doc_header[0].e_inv_no, 0, \"Supplier Address - State is Mandatory.\", \"Supplier\")\r\n            }\r\n        }\r\n        if (doc_header[0].sup_country == \"\"){\r\n            if (isSourceAddressAvil(doc_header[0].dataset, doc_header[0].sup_adrs, \"country\") == true){\r\n                CreatePortalValidation(doc_header[0].e_inv_no, 0, \"Supplier Address - Unmapped Country Code.\", \"Supplier\")\r\n            } else {\r\n                CreatePortalValidation(doc_header[0].e_inv_no, 0, \"Supplier Address - Country is Mandatory.\", \"Supplier\")\r\n            }\r\n        }\r\n\r\n        // Buyer Data\r\n        if(doc_header[0].buy_name == \"\"){\r\n            CreatePortalValidation(doc_header[0].e_inv_no, 0, \"Buyer Name is Mandatory.\", \"Buyer\")\r\n        }\r\n        if(doc_header[0].buy_tin == \"\"){\r\n            CreatePortalValidation(doc_header[0].e_inv_no, 0, \"Buyer TIN is Mandatory.\", \"Buyer\")\r\n        }\r\n        if(doc_header[0].buy_reg_nric == \"\" \u0026\u0026 doc_header[0].buy_reg_brn == \"\" \u0026\u0026 doc_header[0].buy_reg_passport == \"\" \u0026\u0026 doc_header[0].buy_reg_army == \"\"){\r\n            CreatePortalValidation(doc_header[0].e_inv_no, 0, \"Buyer Registration is Mandatory.\", \"Buyer\")\r\n        }\r\n        // if(doc_header[0].buy_sst == true \u0026\u0026 doc_buy[0].buy_sst_reg == \"\"){\r\n        //     CreatePortalValidation(doc_header[0].e_inv_no, 0, \"Buyer SST is Mandatory.\", \"Buyer\")\r\n        // }\r\n        if(doc_header[0].buy_adrs == \"\"){\r\n            CreatePortalValidation(doc_header[0].e_inv_no, 0, \"Buyer Address is Mandatory.\", \"Buyer\")\r\n        }\r\n        if(doc_header[0].buy_cont_num == \"\"){\r\n            CreatePortalValidation(doc_header[0].e_inv_no, 0, \"Buyer Contact Number is Mandatory.\", \"Buyer\")\r\n        }\r\n        if(doc_header[0].buy_adrs_line0 == \"\" \u0026\u0026 doc_header[0].buy_adrs_line1 == \"\" \u0026\u0026 doc_header[0].buy_adrs_line2 == \"\"){\r\n            CreatePortalValidation(doc_header[0].e_inv_no, 0, \"Buyer Address - Line is Mandatory.\", \"Buyer\")\r\n        }\r\n        if(doc_header[0].buy_city == \"\"){\r\n            CreatePortalValidation(doc_header[0].e_inv_no, 0, \"Buyer Address - City is Mandatory.\", \"Buyer\")\r\n        }\r\n        if(doc_header[0].buy_cste == \"\"){\r\n            if (isSourceAddressAvil(doc_header[0].dataset, doc_header[0].buy_adrs, \"country\") == true){\r\n                CreatePortalValidation(doc_header[0].e_inv_no, 0, \"Buyer Address - Unmapped State Code.\", \"Buyer\")\r\n            } else {\r\n                CreatePortalValidation(doc_header[0].e_inv_no, 0, \"Buyer Address - State is Mandatory.\", \"Buyer\")\r\n            }\r\n        }\r\n        if(doc_header[0].buy_country == \"\"){\r\n            if (isSourceAddressAvil(doc_header[0].dataset, doc_header[0].buy_adrs, \"country\") == true){\r\n                CreatePortalValidation(doc_header[0].e_inv_no, 0, \"Buyer Address - Unmapped Country Code.\", \"Buyer\")\r\n            } else {\r\n                CreatePortalValidation(doc_header[0].e_inv_no, 0, \"Buyer Address - Country is Mandatory.\", \"Buyer\")\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nfunction isSourceAddressAvil(dset, adrCode, field){\r\n    adrs_data = CralDB.QueryByComp(\"select adrs_state,adrs_country from {{address_master}} where data_set='$1' and adrs_code='$2'\", jscall.company, dset, adrCode)\r\n    if (adrs_data?.length != 0){\r\n        switch(field){\r\n            case \"state\":\r\n                if(adrs_data[0]?.adrs_state != \"\" \u0026\u0026 adrs_data[0]?.adrs_state != null \u0026\u0026 adrs_data[0]?.adrs_state != undefined){\r\n                    return true\r\n                }\r\n            break\r\n            case \"country\":\r\n                if(adrs_data[0]?.adrs_country != \"\" \u0026\u0026 adrs_data[0]?.adrs_country != null \u0026\u0026 adrs_data[0]?.adrs_country != undefined){\r\n                    return true\r\n                }\r\n            break\r\n            default:\r\n            return false;\r\n        }\r\n    }\r\n    return false\r\n}\r\n\r\nfunction getClassificationGroup(){\r\n    clas_data = CralDB.QueryByComp(\"select classification from {{supplier_companies}} where sup_company=$1\", 0, jscall.company)\r\n    if (clas_data.length != 0){\r\n        return clas_data[0].classification\r\n    }\r\n    return \"\"\r\n}\r\nexports.getClassificationGroup = getClassificationGroup\r\n\r\nfunction get_doc_type(doct_val)\r\n{\r\n    switch(doct_val.toUpperCase()){\r\n        case \"INVOICE\":\r\n            src_doc = \"10\"\r\n            break;\r\n        case \"CREDIT NOTE\":\r\n            src_doc = \"20\"\r\n            break;\r\n        case \"ADVANCE RECEIPT REQUEST\":\r\n            src_doc = \"40\"\r\n            break;\r\n        case \"PAY-FROM RECEIPT\":\r\n            src_doc = \"50\"\r\n            break;\r\n        case \"CORRECTION\":\r\n            src_doc = \"60\"\r\n            break;\r\n        case \"ADVANCE INVOICE\":\r\n            src_doc = \"30\"\r\n            break;\r\n        case \"ADVANCE PAYMENT REQUEST\":\r\n            src_doc = \"70\"\r\n            break;\r\n        case \"PRO FORMA INVOICE\":\r\n            src_doc = \"80\"\r\n            break;\r\n        case \"CUSTOMS INVOICE\":\r\n            src_doc = \"90\"\r\n            break;\r\n        case \"CONSIGNMENT INVOICE\":\r\n            src_doc = \"100\"\r\n            break;\r\n        case \"PURCHASE INVOICE\":\r\n            src_doc = \"200\"\r\n            break;\r\n        case \"PURCHASE CREDIT NOTE\":\r\n            src_doc = \"250\"\r\n            break;\r\n        case \"SALES INVOICE\":\r\n            src_doc = \"10\"\r\n            break;\r\n        default:\r\n            src_doc = doct_val\r\n            break;\r\n    }\r\n    doc_types = CralDB.QueryByComp(\"select * from {{e_inv_types}} where src_doc_type='$1'\", jscall.company, src_doc)\r\n    if (doc_types.length != 0){\r\n        if (doc_types[0].einv_code == \"\"){\r\n            // jscall_error = \"Mapping is Required for Document Type.\"\r\n        }\r\n        return doc_types[0].einv_code\r\n    }\r\n    // jscall_error = \"Document Type not Implemented.\"\r\n    return \"\"\r\n}\r\nexports.get_doc_type = get_doc_type\r\n\r\nfunction get_src_inv_type(get_src_type){\r\n    map_inv_typ = \"\"\r\n    switch(get_src_type?.toUpperCase()){\r\n        case \"MANUAL SALES\":\r\n            map_inv_typ = \"10\"\r\n            break;\r\n        case \"SALES ORDER\":\r\n            map_inv_typ = \"20\"\r\n            break;\r\n        case \"PURCHASE INVOICE\":\r\n            map_inv_typ = \"30\"\r\n            break;\r\n        case \"SALES INVOICE\":\r\n            map_inv_typ = \"40\"\r\n            break;\r\n         default:\r\n            map_inv_typ = get_src_type\r\n            break;\r\n    }\r\n    return map_inv_typ\r\n}\r\nexports.get_src_inv_type = get_src_inv_type\r\n\r\nfunction get_ccur(ccur_val, data_set){\r\n    ccur_data = CralDB.QueryByComp(\"select ccur from {{currency_codes}} where src_ccur='$1' and data_set='$2'\", jscall.company, ccur_val, data_set)\r\n    if (ccur_data.length != 0){\r\n        return ccur_data[0].ccur\r\n    }\r\n    return \"\"\r\n}\r\nexports.get_ccur = get_ccur\r\n\r\nfunction get_paym(paym_val, data_set){\r\n    paym_data = CralDB.QueryByComp(\"select paym from {{payment_modes}} where src_paym='$1' and data_set='$2'\", jscall.company, paym_val, data_set)\r\n    if (paym_data.length != 0){\r\n        return paym_data[0].paym\r\n    }\r\n    return \"\"\r\n}\r\nexports.get_paym = get_paym\r\n\r\nfunction get_cvat(cvat_val, data_set){\r\n    cvat_data = CralDB.QueryByComp(\"select ttype from {{tax_types}} where src_ttype='$1' and data_set='$2'\", jscall.company, cvat_val, data_set)\r\n    if (cvat_data.length != 0){\r\n        return cvat_data[0].ttype\r\n    }\r\n    return \"\"\r\n}\r\nexports.get_cvat = get_cvat\r\n\r\nfunction get_cuni(cuni_val, data_set){\r\n    cuni_data = CralDB.QueryByComp(\"select unit from {{uom_codes}} where src_unit='$1' and data_set='$2'\", jscall.company, cuni_val, data_set)\r\n    if (cuni_data.length != 0){\r\n        return cuni_data[0].unit\r\n    }\r\n    return \"\"\r\n}\r\nexports.get_cuni = get_cuni\r\n\r\nfunction get_clas(clas_val, data_set){\r\n    clas_data = CralDB.QueryByComp(\"select ccode from {{itm_classification_codes}} where src_ccode='$1' and data_set='$2'\", jscall.company, clas_val, data_set)\r\n    if (clas_data.length != 0){\r\n        return clas_data[0].ccode\r\n    } else {\r\n        clas_gl_data = CralDB.QueryByComp(\"select ccode from {{gl_codes}} where src_leac='$1' and data_set='$2'\", jscall.company, clas_val, data_set)\r\n        if (clas_gl_data.length != 0){\r\n            return clas_gl_data[0].ccode\r\n        }\r\n    }\r\n    return \"\"\r\n}\r\nexports.get_clas = get_clas\r\n\r\nfunction get_reg_num_type(brn, nric, army, passport){\r\n    if (brn == \"\"){\r\n        if (nric == \"\"){\r\n            if (army == \"\"){\r\n                r_num = passport\r\n                r_type = \"PASSPORT\"\r\n            } else {\r\n                r_num = army\r\n                r_type = \"ARMY\"\r\n            }\r\n        } else {\r\n            r_num = nric\r\n            r_type = \"NRIC\"\r\n        }\r\n    } else {\r\n        r_num = brn\r\n        r_type = \"BRN\"\r\n    }\r\n\r\n    return [r_num, r_type]\r\n}\r\nexports.get_reg_num_type = get_reg_num_type\r\n\r\nfunction get_PartyID(tin, brn, nric, army, passport, sst, ttx, with_sst_ttx){\r\n    [reg, reg_attr] = get_reg_num_type(brn, nric, army, passport)\r\n    id = [\r\n        {\r\n            \"SchemeID\": \"TIN\",\r\n            \"Value\": tin\r\n        },\r\n        {\r\n            \"SchemeID\": reg_attr,\r\n            \"Value\": reg\r\n        }\r\n    ]\r\n    if (sst != \"\" \u0026\u0026 sst != null \u0026\u0026 sst != undefined){\r\n        id.push({\r\n            \"SchemeID\": \"SST\",\r\n            \"Value\": sst\r\n        })\r\n    } else {\r\n        if (with_sst_ttx == true){\r\n            id.push({\r\n                \"SchemeID\": \"SST\",\r\n                \"Value\": \"NA\"\r\n            })\r\n        }\r\n    }\r\n    if (ttx != \"\" \u0026\u0026 ttx != null \u0026\u0026 ttx != undefined){\r\n        id.push({\r\n            \"SchemeID\": \"TTX\",\r\n            \"Value\": ttx\r\n        })\r\n    } else {\r\n        if (with_sst_ttx == true){\r\n            id.push({\r\n                \"SchemeID\": \"TTX\",\r\n                \"Value\": \"NA\"\r\n            })\r\n        }\r\n    }\r\n\r\n    return id\r\n}\r\n\r\nfunction get_state(ccty_val, state_val, data_set){\r\n    state_data = CralDB.QueryByComp(\"select cste from {{map_state_codes}} where src_ccty='$1' and src_cste='$2' and data_set='$3'\", jscall.company, ccty_val, state_val, data_set)\r\n    if (state_data.length != 0){\r\n        return state_data[0].cste\r\n    }\r\n    return \"\"\r\n}\r\nexports.get_state = get_state\r\n\r\nfunction get_ccty(ccty_val, data_set){\r\n    ccty_data = CralDB.QueryByComp(\"select ccty from {{country_codes}} where src_ccty='$1' and data_set='$2'\", jscall.company, ccty_val, data_set)\r\n    if (ccty_data.length != 0){\r\n        return ccty_data[0].ccty\r\n    }\r\n    return \"\"\r\n}\r\nexports.get_ccty = get_ccty\r\n\r\nfunction get_country_state(src_country, src_state, data_set){\r\n    country = get_ccty(src_country, data_set)\r\n    if (country == \"\"){\r\n        // Mapping Not Found.\r\n    }\r\n    state = get_state(src_country, src_state, data_set)\r\n    if (state == \"\"){\r\n        // Mapping Not Found.\r\n    }\r\n    return [country, state]\r\n}\r\nexports.get_country_state = get_country_state\r\n\r\nfunction getPostalAddress(country, state, city, postal_zone, lines){\r\n    return {\r\n        \"CityName\": city,\r\n        \"PostalZone\": postal_zone,\r\n        \"CountrySubentityCode\": state, \r\n        \"AddressLine\": lines.map(line =\u003e ({ \"Line\": line })),\r\n        \"Country\":{\r\n            \"IdentificationCode\": {\r\n                \"ListAgencyID\": \"6\",\r\n\t\t\t\t\"ListID\": \"ISO3166-1\",\r\n                \"Value\": country\r\n\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nfunction getStringDateTime(input_date){\r\n\r\n    // Changed for optional Date Values\r\n    if (!input_date){\r\n        return [\"\", \"\"]\r\n    }\r\n\r\n    var str_date = input_date.toString()\r\n    date_array = str_date.split(\" \");\r\n    return [date_array[0], date_array[1] + \"Z\"]\r\n}\r\n\r\nfunction getAdditionalDocRef(frm1, ftrd, frm2, dtrm){\r\n    adoc_ref = []\r\n    if (frm1){\r\n        adoc_ref.push({\r\n            \"ID\": frm1,\r\n            \"DocumentType\":\"CustomsImportForm\"\r\n        })\r\n    }\r\n    if (ftrd){\r\n        adoc_ref.push({\r\n            \"ID\": \"FTA\",\r\n            \"DocumentType\":\"FreeTradeAgreement\",\r\n            \"DocumentDescription\": ftrd\r\n        })\r\n    }\r\n    if (frm2){\r\n        adoc_ref.push({\r\n            \"ID\": frm2,\r\n            \"DocumentType\":\"K2\"\r\n        })\r\n    }\r\n    if (dtrm){\r\n        adoc_ref.push(    {\r\n            \"ID\": dtrm\r\n        })\r\n    }\r\n    return adoc_ref;\r\n}\r\n\r\nfunction getContactDetails(tele_num, mail){\r\n    return {\r\n        \"Telephone\": tele_num,\r\n        \"ElectronicMail\": mail\r\n    }\r\n}\r\n\r\nfunction getAmount(amnt, ccur_code){\r\n    return {\r\n        \"Value\": amnt,\r\n        \"CurrencyID\": ccur_code\r\n    }\r\n}\r\n\r\nfunction BuildJSONFormat(einv_num){\r\n    \r\n    // Updating Current Version from Parameter.\r\n    version_update = CralDB.PublishTopic(\"einv_header\", jscall.company, \"Update\", {\r\n        \"e_inv_no\": einv_num,\r\n        \"einv_version\": CralDB.QueryByComp(`select version_id from {{e_inv_parameter}}`, jscall.company)[0].version_id\r\n    }, jscall.user)\r\n    if (!version_update?.Success){\r\n        return \"Unable to Update E-Invoice Version\"\r\n    }\r\n\r\n\r\n    doc_header = CralDB.QueryByComp(\"select * from {{einv_header}} where e_inv_no='$1'\", jscall.company, einv_num.toString())\r\n    debug(einv_num)\r\n    debug(doc_header)\r\n    doc_line = CralDB.QueryByComp(\"select * from {{einv_lines}} where e_inv_no='$1' order by line\", jscall.company, doc_header[0].e_inv_no)\r\n    if (doc_header.length == 0 || doc_line.length == 0){\r\n        return \"No Record Found for given data\"\r\n    }\r\n\r\n    // Supplier Details\r\n    sup_party_id = get_PartyID(doc_header[0].sup_tin, doc_header[0].sup_reg_brn, doc_header[0].sup_reg_nric, doc_header[0].sup_reg_army, doc_header[0].sup_reg_passport, doc_header[0].sup_sst_reg, doc_header[0].sup_ttx_no, true)\r\n\r\n    // Buyer Details\r\n    buy_party_id = get_PartyID(doc_header[0].buy_tin, doc_header[0].buy_reg_brn, doc_header[0].buy_reg_nric, doc_header[0].buy_reg_army, doc_header[0].buy_reg_passport, doc_header[0].buy_sst_reg, \"\", true)\r\n\r\n    // Shipment Details\r\n    ship_party_id = get_PartyID(doc_header[0].ship_tin, doc_header[0].ship_reg_brn, doc_header[0].ship_reg_nric, doc_header[0].ship_reg_army, doc_header[0].ship_reg_passport, \"\", \"\", false)\r\n\r\n    invoice_line = []\r\n    for (let i = 0 ; i \u003c doc_line.length ; i++){\r\n        c_clas = [\r\n            {\r\n                \"ItemClassificationCode\": doc_line[i].clas,\r\n                \"ListID\": \"CLASS\"\r\n            }\r\n        ]\r\n        if (doc_line[i].ccde != \"\"){\r\n            c_clas.push({\r\n                \"ItemClassificationCode\": doc_line[i].ccde,\r\n                \"ListID\": \"PTC\"\r\n            })\r\n        }\r\n        o_ccty = get_ccty(doc_line[i].ccty)\r\n\r\n        invoice_line.push({\r\n            \"ID\": {\r\n                // TBD\r\n                \"ID\": doc_line[i].line.toString()\r\n            },  \r\n            \"InvoicedQuantity\": {\r\n                \"Value\": doc_line[i].dqua.toString(),\r\n                \"UnitCode\": \"C62\"\r\n            },\r\n            \"LineExtensionAmount\": getAmount(doc_line[i].amti, doc_header[0].ccur),\r\n            \"AllowanceCharge\":[\r\n                {\r\n                    \"ChargeIndicator\": (doc_line[i].ldai == 0 \u0026\u0026 doc_line[i].disc == 0) ? false : true,\r\n                    \"AllowanceChargeReason\": doc_line[i].disc_reason,\r\n                    \"MultiplierFactorNumeric\": doc_line[i].disc.toString(),\r\n                    \"Amount\": getAmount(doc_line[i].ldai, doc_header[0].ccur)\r\n                },\r\n                {\r\n                    \"ChargeIndicator\": (doc_line[i].feea == 0 \u0026\u0026 doc_line[i].feer == 0) ? false : true,\r\n                    \"AllowanceChargeReason\": doc_line[i].fee_reason,\r\n                    \"MultiplierFactorNumeric\": doc_line[i].feer.toString(),\r\n                    \"Amount\": getAmount(doc_line[i].feea, doc_header[0].ccur)\r\n                }\r\n            ],\r\n            \"TaxTotal\":{\r\n                \"TaxAmount\": getAmount(doc_line[i].txai, doc_header[0].ccur),\r\n                \"TaxSubtotal\": {\r\n                    \"TaxableAmount\": getAmount(doc_line[i].stot, doc_header[0].ccur),\r\n                    \"TaxAmount\": getAmount(doc_line[i].txai, doc_header[0].ccur),\r\n                    \"TaxCategory\":{\r\n                        \"ID\": doc_line[i].cvat,\r\n                        \"Percent\": doc_line[i].pvat,\r\n                        \"TaxExemptionReason\": doc_line[i].ceno, \r\n                        \"TaxScheme\":{\r\n                            \"ID\": \"OTH\",\r\n                            \"SchemeID\": \"UN/ECE 5153\",\r\n                            \"SchemeAgencyID\": \"6\"\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            \"Item\":{\r\n                \"Description\": doc_line[i].item_desc,\r\n                \"OriginCountry\":{\r\n                    \"IdentificationCode\": {\r\n                        \"ListID\": \"\",\r\n                        \"ListAgencyID\": \"\",\r\n                        \"Value\": o_ccty\r\n                    }\r\n                },\r\n                \"CommodityClassification\": c_clas\r\n            },\r\n            \"Price\":{\r\n                \"PriceAmount\": getAmount(doc_line[i].pric, doc_header[0].ccur)\r\n            },\r\n            \"ItemPriceExtension\":getAmount(doc_line[i].stot, doc_header[0].ccur)\r\n        })\r\n    }\r\n    var [inv_dt, inv_tm] = getStringDateTime(doc_header[0].e_invdt)\r\n\r\n    // Date Conversion Added\r\n    var [bs_d, bs_t] = getStringDateTime(doc_header[0].bsdt)\r\n    var [be_d, be_t] = getStringDateTime(doc_header[0].bedt)\r\n    var [py_dt, py_tm] = getStringDateTime(doc_header[0].pydt)\r\n    var [pydt_date, pydt_time] = getStringDateTime(doc_header[0].pytm)\r\n\r\n    json_document = {\r\n        \"ID\": doc_header[0].e_inv_no,\r\n        \"IssueDate\": inv_dt, // TBD\r\n        \"IssueTime\": inv_tm, // TBD\r\n        \"InvoiceTypeCode\": {\r\n            \"ListVersionID\": doc_header[0].einv_version,\r\n            \"Value\":doc_header[0].doct\r\n        },\r\n        \"DocumentCurrencyCode\": doc_header[0].ccur,\r\n        \"TaxCurrencyCode\": doc_header[0].ccur,\r\n        \"InvoicePeriod\":{\r\n            \"StartDate\":bs_d,           // Date Conversion is changed form field to String\r\n            \"EndDate\":be_d,             // Date Conversion is changed form field to String\r\n            \"Description\":doc_header[0].fbil\r\n        },\r\n        \"BillingReference\":[\r\n            {\r\n                \"InvoiceDocumentReference\": {\r\n                    \"ID\": doc_header[0].org_e_inv_no,\r\n                    \"UUID\": doc_header[0].org_doc_uuid\r\n                }\r\n            },\r\n            {\r\n                \"AdditionalDocumentReference\":{\r\n                    \"ID\":doc_header[0].bref\r\n                }\r\n            }\r\n        ],\r\n        \"AdditionalDocumentReference\": getAdditionalDocRef(doc_header[0].frm1, doc_header[0].ftrd, doc_header[0].frm2, doc_header[0].dtrm),\r\n        \"AccountingSupplierParty\":{\r\n            \"AdditionalAccountID\": {\r\n                \"SchemeAgencyName\": \"CertEX\",\r\n                \"Value\": doc_header[0].anum\r\n            },\r\n            \"Party\":{\r\n                \"IndustryClassificationCode\": {\r\n                    \"Value\": doc_header[0].sup_msic,\r\n                    \"Name\": doc_header[0].sup_badsca\r\n                },\r\n                \"PartyIdentification\":sup_party_id,\r\n                \"PostalAddress\": getPostalAddress(doc_header[0].sup_country, doc_header[0].sup_cste, doc_header[0].sup_city, doc_header[0].sup_postal_zone, [doc_header[0].sup_adrs_line0, doc_header[0].sup_adrs_line1, doc_header[0].sup_adrs_line2]),\r\n                \"PartyLegalEntity\":{\r\n                    \"RegistrationName\": doc_header[0].sup_name\r\n                },\r\n                \"Contact\": getContactDetails(doc_header[0].sup_cont_num, doc_header[0].sup_email),\r\n            }\r\n        },\r\n        \"AccountingCustomerParty\":{\r\n            \"Party\":{\r\n                \"PartyIdentification\": buy_party_id,\r\n                \"PostalAddress\": getPostalAddress(doc_header[0].buy_country, doc_header[0].buy_cste, doc_header[0].buy_city, doc_header[0].buy_postal_zone, [doc_header[0].buy_adrs_line0, doc_header[0].buy_adrs_line1, doc_header[0].buy_adrs_line2]),\r\n                \"PartyLegalEntity\":{\r\n                    \"RegistrationName\": doc_header[0].buy_name\r\n                },\r\n                \"Contact\":getContactDetails(doc_header[0].buy_cont_num, doc_header[0].buy_email)\r\n            }\r\n        },\r\n        \"Delivery\":{\r\n            \"DeliveryParty\":{\r\n                \"PartyIdentification\": ship_party_id,\r\n                \"PostalAddress\": getPostalAddress(doc_header[0].ship_country, doc_header[0].ship_cste, doc_header[0].ship_city, doc_header[0].ship_postal_zone, [doc_header[0].ship_adrs_line0, doc_header[0].ship_adrs_line1, doc_header[0].ship_adrs_line2]),\r\n                \"PartyLegalEntity\":{\r\n                    \"RegistrationName\": doc_header[0].ship_name\r\n                }\r\n            },\r\n            \"Shipment\":{\r\n                \"ID\": \"\", // TBD\r\n                \"FreightAllowanceCharge\":{\r\n                    \"ChargeIndicator\": doc_header[0].ochg,\r\n                    \"AllowanceChargeReason\": doc_header[0].ochg_reason,\r\n                    \"Amount\": getAmount(doc_header[0].ochg_amnt, doc_header[0].ccur)\r\n                }\r\n            }\r\n        },\r\n        \"PaymentMeans\":{\r\n            \"PaymentMeansCode\": doc_header[0].paym,\r\n            \"PayeeFinancialAccount\":{\r\n                \"ID\": (doc_header[0].paym)?doc_header[0].sup_bank_acc:\"\"\r\n            }\r\n        },\r\n        \"PaymentTerms\":{\r\n            \"Note\": doc_header[0].term\r\n        },\r\n        \"PrepaidPayment\":{\r\n            \"ID\": {\r\n                \"ID\": doc_header[0].pref\r\n            },\r\n            \"PaidAmount\": getAmount(doc_header[0].pamt, doc_header[0].ccur),\r\n            \"PaidDate\": py_dt,         // Date Conversion is changed form field to String\r\n            \"PaidTime\": pydt_time // Conversion should be done as format \"12:00:00Z\" - Fixed\r\n        },\r\n        \"AllowanceCharge\":[\r\n            {\r\n                \"ChargeIndicator\": (doc_header[0].adis == 0) ? false : true,\r\n                \"AllowanceChargeReason\": doc_header[0].adis_reason,\r\n                \"Amount\": getAmount(doc_header[0].adis, doc_header[0].ccur)\r\n            },\r\n            {\r\n                \"ChargeIndicator\": (doc_header[0].afee == 0) ? false : true,\r\n                \"AllowanceChargeReason\": doc_header[0].afee_reason,\r\n                \"Amount\": getAmount(doc_header[0].afee, doc_header[0].ccur)\r\n            }\r\n        ], \r\n        \"TaxTotal\":{\r\n            \"TaxAmount\": getAmount(doc_header[0].tott, doc_header[0].ccur),\r\n            \"TaxSubtotal\":{\r\n                \"TaxableAmount\": getAmount(doc_header[0].ttax, doc_header[0].ccur),\r\n                \"TaxAmount\": getAmount(doc_header[0].ttat, doc_header[0].ccur),\r\n                \"TaxCategory\":{\r\n                    \"ID\": doc_header[0].cvat,\r\n                    \"TaxScheme\":{\r\n                        \"ID\": \"OTH\",\r\n                        \"SchemeID\": \"UN/ECE 5153\",\r\n                        \"SchemeAgencyID\": \"6\"\r\n                    }\r\n                }\r\n            }\r\n        },\r\n        \"LegalMonetaryTotal\":{\r\n            \"LineExtensionAmount\":      getAmount(doc_header[0].tnat, doc_header[0].ccur),  \r\n            \"TaxExclusiveAmount\":       getAmount(doc_header[0].tote, doc_header[0].ccur),   \r\n            \"TaxInclusiveAmount\":       getAmount(doc_header[0].toti, doc_header[0].ccur),\r\n            \"AllowanceTotalAmount\":     getAmount(doc_header[0].tdis, doc_header[0].ccur),\r\n            \"ChargeTotalAmount\":        getAmount(doc_header[0].tfee, doc_header[0].ccur),\r\n            \"PayableRoundingAmount\":    getAmount(doc_header[0].ramt, doc_header[0].ccur),\r\n            \"PayableAmount\":            getAmount(doc_header[0].tpat, doc_header[0].ccur)\r\n        },\r\n        \"InvoiceLine\": invoice_line\r\n    }\r\n    if (doc_header[0].ccur != \"MYR\"){\r\n        json_document[\"TaxExchangeRate\"] = {\r\n            \"CalculationRate\": doc_header[0].rate,\r\n            \"SourceCurrencyCode\": doc_header[0].ccur,\r\n            \"TargetCurrencyCode\": \"MYR\"\r\n        }\r\n    }\r\n    return {\r\n        \"document\": json_document, \r\n        \"InvoiceCodeNumber\": doc_header[0].e_inv_no\r\n    }\r\n}\r\nexports.BuildJSONFormat = BuildJSONFormat\r\n"
        },
        {
            "Bizobj": {
                "ObjectName": "docUpload",
                "Description": "Document Upload",
                "external": true
            },
            "Script": "//**** Business Object docUpload Created by malai on 24-Jul-2024 22:00:56 ****//\r\n\r\nvar einvois = require(\"./scripts/Business_Objects/createEinvoice\")\r\nfunction docUploadExcel(){\r\n    payload_obj = {}\r\n    inv_numbers = []\r\n    comp_miss_match = 0\r\n    message = \"\"\r\n    rejectedRecords = []\r\n    // submittedRecords = []\r\n    file_ret = {}\r\n\r\n    entity_ds = CralDB.QueryByComp(`select skip_master,skip_duplicate_files from {{entity_data_set}} where sup_company=${jscall.company} and data_set='${jscall.input.DataSet}'`, jscall.company)\r\n    if (entity_ds.length == 0){\r\n        message = `Entity Data set is not maintained for ${jscall.company} - ${jscall.input.DataSet}`\r\n        return {\r\n            \"AcceptedInvoices\": inv_numbers, \r\n            \"RejectedInvoices\": rejectedRecords,\r\n            \"Message\": message,\r\n            \"SubmissionResult\": {}\r\n        }\r\n    } else {\r\n        if (entity_ds[0].skip_duplicate_files \u0026\u0026\r\n            CralDB.QueryByComp(`select file_name from {{uploaded_file_details}} where file_name='${jscall.input.FileName}'`, jscall.company)?.length){\r\n            \r\n            return {\r\n                \"AcceptedInvoices\": inv_numbers, \r\n                \"RejectedInvoices\": rejectedRecords,\r\n                \"Message\": \"Filename already used for Upload.\",\r\n                \"SubmissionResult\": {}\r\n            }\r\n        }\r\n    }\r\n    skip_master = entity_ds[0].skip_master\r\n    \r\n    if (skip_master){\r\n        file_details = {\r\n            \"file_name\": jscall.input.FileName??\"\",\r\n            \"upload_user\": jscall.user,\r\n            \"upload_time\": einvois.getCurrentDateTimeUTC()\r\n        }\r\n        file_ret = CralDB.PublishTopic(\"uploaded_file_details\", jscall.company, \"Insert\", file_details, jscall.user)\r\n        if (!file_ret?.Success){\r\n            // message = \"Unable to Upload Excel.\"\r\n            return {\r\n                \"AcceptedInvoices\": inv_numbers, \r\n                \"RejectedInvoices\": rejectedRecords,\r\n                \"Message\": message,\r\n                \"SubmissionResult\": {}\r\n            }\r\n        }\r\n    }\r\n    payload_data = CralDB.QueryByComp(`select excl_einv_field,excl_interim_field,dval from {{fld_parameter}} where excl=true`, jscall.company)\r\n\r\n    // Need to add if Master Data should capture for Supplier Data.\r\n    // supplier_data = CralDB.QueryByComp(`select * from {{supplier_companies}} where sup_company=${jscall.company}`, jscall.company)\r\n    // supplier_adrs = CralDB.QueryByComp(`select * from {{address_master}} where data_set='${jscall.input?.DataSet}' and adrs_code='${supplier_data[0]?.sup_adrs}'`, jscall.company)\r\n    \r\n    \r\n    if (Array.isArray(jscall.input.Records) \u0026\u0026 (jscall.input.Records.length)){\r\n    //    na_fields = [\r\n    //        \"buy_sst_reg\", \"sup_sst_reg\", \r\n    //        \"sup_reg_brn\", \"buy_reg_brn\",\r\n    //     //    \"sup_badsca\", \r\n    //        \"org_e_inv_no\", \"org_doc_uuid\"\r\n    //     ]\r\n        for (i =0; i \u003c jscall.input.Records.length; i++){\r\n             let st = CralUtil.Date.Now()\r\n            payload_obj = {}\r\n            payload_data.forEach(rec =\u003e {\r\n                // if (jscall.input.Records[i][rec.excl_einv_field] \u0026\u0026 jscall.input.Records[i][rec.excl_einv_field] != \"NA\" ){\r\n                if (jscall.input.Records[i][rec.excl_einv_field] ){\r\n                    // \u0026\u0026 (jscall.input.Records[i][rec.excl_einv_field] != \"NA\"    // NA repalce to empty issue fixed 03/12/2024\r\n                    //     || (jscall.input.Records[i][rec.excl_einv_field] == \"NA\" \r\n                    //         \u0026\u0026 na_fields.includes(rec.excl_interim_field))) ){\r\n                    payload_obj[rec.excl_interim_field] = typeof jscall.input.Records[i][rec.excl_einv_field] == \"string\" ? jscall.input.Records[i][rec.excl_einv_field].trim() : jscall.input.Records[i][rec.excl_einv_field];\r\n                } else {\r\n                    if (rec.dval != \"null\"){\r\n                        payload_obj[rec.excl_interim_field] = rec.dval\r\n                    }\r\n                }\r\n                // payload_data[rec.excl_interim_field] = jscall.input.Records[i][rec.excl_einv_field]\r\n            })\r\n            // println(\"Mapping Completed\",CralUtil.Date.Sub(st, CralUtil.Date.Now()))\r\n            println(\"Mapping Completed\", st, CralUtil.Date.Now())\r\n            // println(payload_obj)\r\n            if (payload_obj[\"pytm\"]) {\r\n                payload_obj[\"pytm\"] = payload_obj[\"pydt\"] ? `${payload_obj[\"pydt\"]} ${payload_obj[\"pytm\"]}` : undefined\r\n            }\r\n            if (file_ret?.Message?.upload_id){\r\n                payload_obj[\"upload_id\"] = file_ret.Message.upload_id\r\n            }\r\n            if (payload_obj[\"idoc\"] == null){\r\n                payload_obj[\"idoc\"] = 0\r\n            }\r\n            payload_obj[\"data_set\"] = jscall.input.DataSet\r\n            payload_obj[\"line_cnt\"] = 0\r\n            payload_obj[\"fld_category\"] = \"\"\r\n            payload_obj[\"temp_code\"] = jscall.input.Template\r\n            payload_obj[\"mandatory\"] = []\r\n            payload_obj[\"unmapped\"] = []\r\n            payload_obj[\"sctg\"] = get_sctg(payload_obj[\"sctg\"])\r\n            //  println(\"Before Insert\",CralUtil.Date.Sub(st, CralUtil.Date.Now()))\r\n             println(\"Before Insert\", st, CralUtil.Date.Now())\r\n            if (payload_obj[\"comp\"] == jscall.company){\r\n                inv_creation = CralDB.PublishTopic(\"inv_interim_excl\", jscall.company, \"Upsert\", payload_obj, jscall.user)\r\n                if (inv_creation?.Success == true){\r\n                    CralUtil.LogInfo(\"Successfully Invoice Inserted\", \"ExcelUpload\", inv_creation)\r\n                    if (!inv_numbers.includes(inv_creation?.Message?.inv_no)) {\r\n                        inv_numbers.push(inv_creation?.Message?.inv_no);\r\n                    }\r\n                } else {\r\n                    // if (!submittedRecords.includes(payload_obj[\"inv_no\"]) \u0026\u0026 inv_creation?.Message == \"Invoice Already Submitted\") {\r\n                    //     submittedRecords.push(payload_obj[\"inv_no\"]);\r\n                    // } else {\r\n                        rejectedRecords.push(inv_creation)\r\n                    // }\r\n                    CralUtil.LogInfo(\"Unable to Insert to Interim Table\", \"ExcelUpload\", inv_creation)\r\n                }\r\n            } else {\r\n                comp_miss_match += 1\r\n            }\r\n             println(\"Insert Completed\", st, CralUtil.Date.Now())\r\n        }\r\n    }\r\n    if (comp_miss_match != 0){\r\n        if (comp_miss_match == jscall.input.Records.length){\r\n            message = \"Excel Upload Failed, due to Company miss match.\"\r\n        } else {\r\n            message = \"Company Miss match found in few records.\"\r\n        }\r\n    }\r\n    // if (submittedRecords.length){\r\n    //     message += ` ${submittedRecords.length} Invoices has been Already Submitted.`\r\n    // }\r\n\r\n\r\n\r\n    // Invoice Submission to another API\r\n    // inv_results = excelInvoiceCreation(inv_numbers, skip_master)\r\n\r\n    return {\r\n        \"AcceptedInvoices\": inv_numbers, \r\n        \"RejectedInvoices\": rejectedRecords,\r\n        \"Message\": message.trim(),\r\n        // \"SubmissionResult\": inv_results\r\n        \"SubmissionResult\": [],\r\n        \"SkipMaster\": skip_master\r\n    }\r\n}\r\n\r\nfunction checkAndCreateInvoice(){\r\n    return excelInvoiceCreation(jscall.input.inv_nums, jscall.input.skipMaster)\r\n}\r\n\r\nfunction excelInvoiceCreation(Invois, isMasterUpdate){\r\n    excl_inv = []\r\n    error = []\r\n    if (Array.isArray(Invois) \u0026\u0026 Invois.length \u003e 0){\r\n        for (i2 = 0; i2 \u003c Invois.length; i2++){\r\n            if (CheckInvois(Invois[i2], isMasterUpdate) == true){\r\n                if (CreateEinv(Invois[i2], isMasterUpdate) == true){\r\n                    excl_inv.push(Invois[i2])\r\n                    CralUtil.LogInfo(\"ExcelUpload\", \"DeletingInvoice\", Invois[i2])\r\n                    del_ret = CralDB.QueryByComp(`DELETE FROM {{inv_interim_excl}} WHERE inv_no='${Invois[i2]}'`, jscall.company)\r\n                } else {\r\n                    error.push(`Error While Creation: ${Invois[i2]}`)\r\n                }\r\n            } else {\r\n                error.push(`Error While Validating: ${Invois[i2]}`)\r\n            }\r\n        }\r\n    }\r\n    return {\r\n        \"Input\": Invois,\r\n        \"CreatedInvoices\": excl_inv,\r\n        \"Error\": error\r\n    }\r\n}\r\n\r\nfunction CreateEinv(inv_num, isOriginalValue){\r\n    println(\"Creating Excel Invoice\")\r\n    let header_payload = {};\r\n    err_cnt = 0\r\n    create_inv = CralDB.QueryByComp(\"select * from {{inv_interim_excl}} where inv_no='$1'\", jscall.company, inv_num)\r\n    // println(\"CreateINV\" + JSON.stringify(create_inv))\r\n    inv_fields = CralDB.QueryByComp(`select topic,fld_name,excl,excl_interim_field,dval from {{fld_parameter}}`, jscall.company)\r\n    if (create_inv?.length != 0){\r\n        inv_fields.forEach(inv_field =\u003e {\r\n            if (inv_field.topic == \"einv_header\"){\r\n                if (inv_field.excl == true || inv_field.excl_interim_field == \"inv_no\"){\r\n                    header_payload[inv_field.fld_name] = create_inv[0][inv_field.excl_interim_field]\r\n                } else {\r\n                    if (inv_field.dval != \"null\"){\r\n                        header_payload[inv_field.fld_name] = inv_field.dval\r\n                    }\r\n                }\r\n            }\r\n        })\r\n        // println(header_payload)\r\n        \r\n        // Map Master Data\r\n        if (!isOriginalValue) {\r\n            header_payload[\"doct\"] = einvois.get_doc_type(header_payload[\"doct\"])\r\n            header_payload[\"ccur\"] = einvois.get_ccur(header_payload[\"ccur\"], create_inv[0].data_set)\r\n            header_payload[\"paym\"] = einvois.get_paym(header_payload[\"paym\"], create_inv[0].data_set)\r\n            header_payload[\"cvat\"] = einvois.get_cvat(header_payload[\"cvat\"], create_inv[0].data_set)\r\n            // header_payload[\"sctg\"] = get_sctg(header_payload[\"sctg\"])\r\n            header_payload[\"sup_cste\"] = einvois.get_state(header_payload[\"sup_country\"], header_payload[\"sup_cste\"], create_inv[0].data_set)\r\n            header_payload[\"buy_cste\"] = einvois.get_state(header_payload[\"buy_country\"], header_payload[\"buy_cste\"], create_inv[0].data_set)\r\n            header_payload[\"ship_cste\"] = einvois.get_state(header_payload[\"ship_country\"], header_payload[\"ship_cste\"], create_inv[0].data_set)\r\n            header_payload[\"sup_country\"] = einvois.get_ccty(header_payload[\"sup_country\"], create_inv[0].data_set)\r\n            header_payload[\"buy_country\"] = einvois.get_ccty(header_payload[\"buy_country\"], create_inv[0].data_set)\r\n            header_payload[\"ship_country\"] = einvois.get_ccty(header_payload[\"ship_country\"], create_inv[0].data_set)\r\n        }\r\n\r\n        // Default Values\r\n        header_payload[\"dataset\"] = create_inv[0].data_set\r\n        header_payload[\"sup_code\"] = create_inv[0].comp\r\n        isInvAvil = (CralDB.QueryByComp(`select e_inv_no from {{einv_header}} where e_inv_no='${header_payload[\"e_inv_no\"]}' and einv_stat='60'`, jscall.company).length != 0)\r\n        if (isInvAvil){\r\n            einv_mode = \"Update\"\r\n            CralDB.QueryByComp(`DELETE FROM {{einv_validation}} where einv_code='${header_payload[\"e_inv_no\"]}'`, jscall.company)\r\n        } else {\r\n            einv_mode = \"Insert\"\r\n        }\r\n        header_result = CralDB.PublishTopic(\"einv_header\", create_inv[0].comp, einv_mode, header_payload, jscall.user)\r\n        if (header_result?.Success == true){\r\n            line_results = []\r\n            for (j = 0; j\u003ccreate_inv.length; j++){\r\n                line_payload = {}\r\n                inv_fields.forEach(inv_field =\u003e {\r\n                    if (inv_field.topic == \"einv_lines\"){\r\n                        if (inv_field.excl == true){\r\n                            line_payload[inv_field.fld_name] = create_inv[j][inv_field.excl_interim_field]\r\n                        } else {\r\n                            if (inv_field.dval != \"null\"){\r\n                                line_payload[inv_field.fld_name] = inv_field.dval\r\n                            }\r\n                        }\r\n                    }\r\n                })\r\n                // Map Master Data\r\n                if (!isOriginalValue){\r\n                    line_payload[\"cvat\"] = einvois.get_cvat(line_payload[\"cvat\"], create_inv[j].data_set)\r\n                    line_payload[\"clas\"] = einvois.get_clas(line_payload[\"clas\"], create_inv[j].data_set)\r\n                    line_payload[\"cuni\"] = einvois.get_cuni(line_payload[\"cuni\"], create_inv[j].data_set)\r\n                }\r\n\r\n                line_payload[\"e_inv_no\"] = header_result.Message.e_inv_no\r\n                line_result = CralDB.PublishTopic(\"einv_lines\", create_inv[0].comp, einv_mode, line_payload, jscall.user)\r\n                if (line_result?.Success != true){\r\n                    err_cnt += 1\r\n                }\r\n                line_results.push(line_result)\r\n            }\r\n            if (err_cnt == 0){\r\n                if (header_result.Message.sctg == \"20\" || header_result.Message.sctg == \"30\"){\r\n                    CralUtil.LogInfo(\"InvoiceUnderForFiling\", \"ExcelInvoice\", {\"inv\": header_result.Message.e_inv_no, \"Category\": CralUtil.GetListDesc(\"sales_catg\", header_result.Message.sctg)})\r\n                    return true\r\n                }\r\n                inv_submission = einvois.submitEinvoiceToLHDN(header_result.Message.e_inv_no)\r\n                CralUtil.LogInfo(\"InvoiceSubmission\", header_result.Message.e_inv_no, inv_submission)\r\n                return true\r\n            } else {\r\n                CralUtil.LogInfo(\"Excel Upload\", \"einv_lines\", line_results)\r\n            }\r\n        } else {\r\n            CralUtil.LogInfo(\"Excel Upload\", \"einv_header\", [create_inv, isInvAvil, header_result, header_payload])\r\n        }\r\n    }\r\n    return false\r\n}\r\n\r\nfunction get_sctg(src_sctg){\r\n    switch(src_sctg.toUpperCase()){\r\n        case \"LOCAL\":\r\n            sctg = \"10\"\r\n            break\r\n        case \"EXPORT\":\r\n            sctg = \"20\"\r\n            break\r\n        case \"IMPORT\":\r\n            sctg = \"30\"\r\n            break\r\n        default:\r\n            sctg = src_sctg == \"10\" || src_sctg == \"20\" || src_sctg == \"30\" ? src_sctg : \"\"\r\n            break\r\n    }\r\n    return sctg\r\n}\r\n\r\nfunction CheckInvois(inv_number, check_master){\r\n    check_inv_result = []\r\n    map_check = []\r\n    err_lines_count = 0\r\n    // update_payload = {}\r\n    line_check = false\r\n    check_inv = CralDB.QueryByComp(\"select * from {{inv_interim_excl}} where inv_no='$1'\", jscall.company, inv_number)\r\n    for(i1 = 0; i1 \u003c check_inv.length; i1++){\r\n        update_payload = {}\r\n        if (!check_master){\r\n            map_check = mapCheck(check_inv[i1])\r\n        }\r\n        core_fields = core_fields_valid(check_inv[i1])\r\n\r\n        update_payload[\"inv_no\"] = check_inv[i1].inv_no\r\n        update_payload[\"line\"] = check_inv[i1].line\r\n        \r\n        if (core_fields?.length != 0){\r\n            update_payload[\"fld_category\"] = \"10\"\r\n            update_payload[\"mandatory\"] = core_fields\r\n            update_payload[\"err_msg\"] = getSupplierErrorMessage(core_fields)\r\n            debug(update_payload)\r\n        }\r\n        if (map_check?.length != 0){\r\n            update_payload[\"fld_category\"] = \"100\"\r\n            update_payload[\"unmapped\"] = map_check\r\n            debug(update_payload)\r\n        }\r\n        if (!(CralDB.QueryDSByComp(\"getref\", jscall.company, \"code\", \"einv_doc_types\", \"code\", check_inv[i1].doct)).length){\r\n            update_payload[\"err_msg\"] = update_payload[\"err_msg\"] ? update_payload[\"err_msg\"] + \" Invalid Invoice Type.\" : \"Invalid Invoice Type.\"\r\n        }\r\n        debug(\"final\", update_payload)\r\n        // debug(CralDB.PublishTopic(\"inv_interim_excl\", jscall.company, \"Update\", update_payload, jscall.user))\r\n        check_inv_result.push(CralDB.PublishTopic(\"inv_interim_excl\", jscall.company, \"Update\", update_payload, jscall.user))\r\n        if (core_fields?.length != 0 || map_check?.length != 0 || update_payload[\"err_msg\"]){\r\n            CralUtil.LogInfo(inv_number, \"Error in Line\", [core_fields, map_check, update_payload[\"err_msg\"]])\r\n            err_lines_count += 1\r\n        }\r\n    }\r\n    debug(check_inv.length)\r\n    // println(check_inv[0].s_line_cnt)\r\n    if (check_inv.length == check_inv[0].s_line_cnt){\r\n        if (err_lines_count == 0){\r\n            return true\r\n        } else {\r\n            // CralDB.QueryByComp(`UPDATE {{inv_interim_excl}} SET err_msg='${update_payload[\"err_msg\"] ? update_payload[\"err_msg\"] : \"\"} No. of Lines with error: ${err_lines_count}' where inv_no='${inv_number}'`, jscall.company)\r\n            CralDB.QueryByComp(`UPDATE {{inv_interim_excl}} SET err_msg = CONCAT(err_msg, ' No. of Lines with error: ', ${err_lines_count}) WHERE inv_no = '${inv_number}'`, jscall.company)\r\n            CralUtil.LogInfo(\"ErrorInLineLevel\", \"ExcelUpload\", `No. of Lines with error: ${err_lines_count}`)\r\n            return false\r\n        }\r\n    } else {\r\n        // CralDB.QueryByComp(`UPDATE {{inv_interim_excl}} SET err_msg='${update_payload[\"err_msg\"] ? update_payload[\"err_msg\"] : \"\"} Line Count Miss Match. Source Line Count ${check_inv[0].s_line_cnt}. No. of Lines Available ${check_inv.length}' where inv_no='${inv_number}'`, jscall.company)\r\n        CralDB.QueryByComp(`UPDATE {{inv_interim_excl}} SET err_msg = CONCAT(err_msg, ' Line Count Miss Match. Source Line Count ', ${check_inv[0].s_line_cnt}, '. No. of Lines Available ', ${check_inv.length}) WHERE inv_no = '${inv_number}'`, jscall.company)\r\n        CralUtil.LogInfo(\"LineCountMissMatch\", \"ExcelUpload\", `Line Count Miss Match. Source Line Count ${check_inv[0].s_line_cnt}. No. of Lines Available ${check_inv.length}`)\r\n        return false\r\n    }\r\n}\r\n\r\n// function checkCodeField(invoice_data){\r\n//     codeValidation = []\r\n//     if (invoice_data.doct){\r\n//         if (!(CralDB.QueryDSByComp(\"getref\", jscall.company, \"code\", \"einv_doc_types\", \"code\", invoice_data.doct)).length){\r\n//             codeValidation.push(\"doct\")\r\n//         }\r\n//     }\r\n//     return codeValidation\r\n// }\r\n\r\nfunction getSupplierErrorMessage(fields){\r\n    ret_message = \"\"\r\n    fields.forEach(field =\u003e {\r\n        if (field.includes(\"sup\")){\r\n            ret_message += `${CralDB.QueryByComp(`select excl_einv_field from {{fld_parameter}} where excl_interim_field='${field}'`, jscall.company)[0].excl_einv_field} is Mandatory. `\r\n        }\r\n    })\r\n    return ret_message\r\n}\r\nfunction mapCheck(invois){\r\n    unmap = []\r\n    if (einvois.get_cvat(invois.cvat, invois.data_set) == \"\"){\r\n        unmap.push(\"cvat\")\r\n    }\r\n    if (einvois.get_ccur(invois.ccur, invois.data_set) == \"\"){\r\n        unmap.push(\"ccur\")\r\n    }\r\n    if (einvois.get_clas(invois.clas, invois.data_set) == \"\"){\r\n        unmap.push(\"clas\")\r\n    }\r\n    if (einvois.get_doc_type(invois.doct) == \"\"){\r\n        unmap.push(\"doct\")\r\n    }\r\n    if (einvois.get_ccty(invois.sup_country, invois.data_set) == \"\"){\r\n        unmap.push(\"sup_country\")\r\n    }\r\n    if (einvois.get_ccty(invois.buy_country, invois.data_set) == \"\"){\r\n        unmap.push(\"buy_country\")\r\n    }\r\n    // if (invois.ship_country){\r\n    //     if (einvois.get_ccty(invois.ship_country) == \"\"){\r\n    //         unmap.push(\"ship_country\")\r\n    //     }\r\n    // }\r\n    if (einvois.get_state(invois.sup_country, invois.sup_cste, invois.data_set) == \"\"){\r\n        unmap.push(\"sup_cste\")\r\n    }\r\n    if (einvois.get_state(invois.buy_country, invois.buy_cste, invois.data_set) == \"\"){\r\n        unmap.push(\"buy_cste\")\r\n    }\r\n    // if (invois.ship_cste){\r\n    //     if (einvois.get_state(invois.ship_country, invois.ship_cste) == \"\"){\r\n    //         unmap.push(\"ship_cste\")\r\n    //     }\r\n    // }\r\n    return unmap\r\n}\r\n\r\nfunction core_fields_valid(invois){\r\n    core_flds = []\r\n    // Invoice Data\r\n    if (invois.doct == \"\"){\r\n        core_flds.push(\"dcot\")\r\n    }\r\n    if (invois.ccur == \"\"){\r\n        core_flds.push(\"ccur\")\r\n    }\r\n    if (invois.tote == 0){\r\n        core_flds.push(\"tote\")\r\n    }\r\n    if (invois.toti == 0){\r\n        core_flds.push(\"toti\")\r\n    }\r\n    if (invois.tpat == 0){\r\n        core_flds.push(\"tpat\")\r\n    }\r\n    \r\n    if (invois?.cvat == \"\"){\r\n        core_flds.push(\"cvat\")\r\n    } //else {\r\n    //     // Total Tax amount per tax type\r\n    //     if (doc_header[0]?.tott == 0){\r\n    //         if (doc_header[0]?.cvat != \"06\" \u0026\u0026 doc_header[0]?.cvat != \"E\"){\r\n    //         }\r\n    //     }\r\n    // }\r\n\r\n    // Invoice Line\r\n    if (invois.clas == \"\"){\r\n        core_flds.push(\"clas\")\r\n    }\r\n    if (invois.item_desc == \"\"){\r\n        core_flds.push(\"item_desc\")\r\n    }\r\n\r\n    // Not Mandatory for Free of Cost Item or Service\r\n    // if (invois.pric == 0){\r\n    //     core_flds.push(\"pric\")\r\n    // }\r\n    // if (invois.stot == 0){\r\n    //     core_flds.push(\"stot\")\r\n    // }\r\n    // if (invois.amti == 0){\r\n    //     core_flds.push(\"amti\")\r\n    // }\r\n    \r\n    \r\n    if (invois?.l_cvat == \"\"){\r\n        core_flds.push(\"l_cvat\")\r\n        // tax Type\r\n    }\r\n    // if (doc_line[i].cvat != \"E\" \u0026\u0026 doc_line[i].cvat != \"\" \u0026\u0026 doc_line[i].txai == 0){\r\n    //     //Tax Amount\r\n    // }\r\n\r\n    // Supplier Data\r\n    if (invois.sup_name == \"\"){\r\n        core_flds.push(\"sup_name\")\r\n    }\r\n    if (invois.sup_tin == \"\"){\r\n        core_flds.push(\"sup_tin\")\r\n    }\r\n    if (invois.sup_reg_nric == \"\" \u0026\u0026 invois.sup_reg_brn == \"\" \u0026\u0026 invois.sup_reg_passport == \"\" \u0026\u0026 invois.sup_reg_army == \"\"){\r\n        core_flds.push(\"sup_reg_nric\", \"sup_reg_brn\", \"sup_reg_passport\", \"sup_reg_army\")\r\n    }\r\n    if (invois.sup_msic == \"\"){\r\n        core_flds.push(\"sup_msic\")\r\n    }\r\n    if (invois.sup_badsca == \"\"){\r\n        core_flds.push(\"sup_badsca\")\r\n    }\r\n    // if (invois.sup_adrs == \"\"){\r\n    //     core_flds.push(\"sup_adrs\")\r\n    // }\r\n    if (invois.sup_cont_num == \"\"){\r\n        core_flds.push(\"sup_cont_num\")\r\n    }\r\n    if (invois.sup_adrs_line0 == \"\" \u0026\u0026 invois.sup_adrs_line1 == \"\" \u0026\u0026 invois.sup_adrs_line2 == \"\"){\r\n        core_flds.push(\"sup_adrs_line0\")\r\n    }\r\n    if (invois.sup_city == \"\"){\r\n        core_flds.push(\"sup_city\")\r\n    }\r\n    if (invois.sup_cste == \"\"){\r\n        core_flds.push(\"sup_cste\")\r\n    }\r\n    if (invois.sup_country == \"\"){\r\n        core_flds.push(\"sup_country\")\r\n    }\r\n\r\n    // Buyer Data\r\n    if(invois.buy_name == \"\"){\r\n        core_flds.push(\"buy_name\")\r\n    }\r\n    if(invois.buy_tin == \"\"){\r\n        core_flds.push(\"buy_tin\")\r\n    }\r\n    if(invois.buy_reg_nric == \"\" \u0026\u0026 invois.buy_reg_brn == \"\" \u0026\u0026 invois.buy_reg_passport == \"\" \u0026\u0026 invois.buy_reg_army == \"\"){\r\n        core_flds.push(\"buy_reg_nric\", \"buy_reg_brn\", \"buy_reg_passport\", \"buy_reg_army\")\r\n    }\r\n    // if(doc_header[0].buy_sst == true \u0026\u0026 doc_buy[0].buy_sst_reg == \"\"){\r\n    //     CreatePortalValidation(doc_header[0].e_inv_no, 0, \"Buyer SST is Mandatory.\", \"Buyer\")\r\n    // }\r\n    if(invois.buy_adrs == \"\"){\r\n        // CreatePortalValidation(doc_header[0].e_inv_no, 0, \"Buyer Address is Mandatory.\", \"Buyer\")\r\n    }\r\n    if(invois.buy_cont_num == \"\"){\r\n        core_flds.push(\"buy_cont_num\")\r\n    }\r\n    if(invois.buy_adrs_line0 == \"\" \u0026\u0026 invois.buy_adrs_line1 == \"\" \u0026\u0026 invois.buy_adrs_line2 == \"\"){\r\n        core_flds.push(\"buy_adrs_line0\")\r\n    }\r\n    if(invois.buy_city == \"\"){\r\n        core_flds.push(\"buy_city\")\r\n    }\r\n    if(invois.buy_cste == \"\"){\r\n        core_flds.push(\"buy_cste\")\r\n    }\r\n    if(invois.buy_country == \"\"){\r\n        core_flds.push(\"buy_country\")\r\n    }\r\n    return core_flds\r\n}\r\n\r\nfunction check_validations(EInvoiceCodeNumber){\r\n    debug(\"Checking...\")\r\n\r\n    eih_data = CralDB.QueryByComp(\"select * from {{einv_header}} where e_inv_no='$1'\", jscall.company, EInvoiceCodeNumber)\r\n    if (eih_data.length == 0){\r\n        jscall_error = \"Record not found\"\r\n        return false\r\n    } else {\r\n         let [sup_id_val, sup_id_type] = get_reg_num_type(eih_data[0].sup_reg_brn, eih_data[0].sup_reg_nric, eih_data[0].sup_reg_army, eih_data[0].sup_reg_passport)\r\n        debug(eih_data[0].sup_tin, sup_id_type, sup_id_val)\r\n        if( validate_tin(eih_data[0].sup_tin, sup_id_type, sup_id_val) != true){\r\n            CreatePortalValidation(eih_data[0].e_inv_no, 0, \"Supplier TIN Validation Failed\", \"Supplier\")\r\n        }\r\n        let [buy_id_val, buy_id_type] = get_reg_num_type(eih_data[0].buy_reg_brn, eih_data[0].buy_reg_nric, eih_data[0].buy_reg_army, eih_data[0].buy_reg_passport)\r\n        if (eih_data[0].inv_bp != \"\" \u0026\u0026 eih_data[0].inv_bp != null \u0026\u0026 eih_data[0].inv_bp != undefined){\r\n            if( validate_tin(eih_data[0].buy_tin, buy_id_type, buy_id_val) != true){\r\n                CreatePortalValidation(eih_data[0].e_inv_no, 0, \"Buyer TIN Validation Failed\", \"Buyer\")\r\n            }\r\n        }\r\n        if (CralDB.QueryByComp(\"select einv_code from {{einv_validation}} where einv_code='$1'\", jscall.company, eih_data[0].e_inv_no)?.length == 0){\r\n            if (eih_data[0].err_msg != \"\" || eih_data[0].einv_stat != \"10\"){\r\n                resolved_update = {\r\n                    \"e_inv_no\": eih_data[0].e_inv_no,\r\n                    \"err_msg\": \"\",\r\n                    \"einv_stat\": \"10\"\r\n                }\r\n                CralDB.PublishTopic(\"einv_header\", jscall.company, \"Update\", resolved_update, jscall.user)\r\n            };\r\n            return true\r\n        }\r\n    }\r\n    return false\r\n}\r\n\r\nfunction validate_tin(tin, idType, idVal){\r\n    \r\n    lhdn = NewLHDN()\r\n    token = get_lhdn_token()\r\n    if (token == false){\r\n        return false;   \r\n    } else {\r\n        lhdn_response = lhdn.ValidateTaxPayerTIN(token, tin, idType, idVal)\r\n        switch(lhdn_response.Result.Status){\r\n            case 200:\r\n                return lhdn_response.Result.Response\r\n                break;\r\n            default:\r\n                // jscall_error = lhdn_response.Result.Status + \" - \" + JSON.stringify(lhdn_response.Result.Response)\r\n                return false;\r\n                break\r\n        }\r\n    }\r\n    return false\r\n}\r\n\r\nfunction test_DataUpsert(){\r\n    return DataUpsert(jscall.input.temp_code, jscall.input.records)\r\n}\r\nfunction DataUpsert(temp_code, input_data){\r\n    // temp_code = \"EX_TP0001\"\r\n    update_data = []\r\n    old_data = CralDB.QueryByComp(`SELECT * FROM {{inv_interim_excl}} WHERE temp_code='${temp_code}'`, jscall.company)\r\n    // return old_data\r\n    update_data = input_data.filter(old_rec =\u003e {\r\n        return !old_data.some(new_rec =\u003e {\r\n            return Object.keys(new_rec).every(keys =\u003e new_rec[keys] === old_rec[keys])\r\n        });\r\n    });\r\n    // const update_data = input_data.filter(obj1 =\u003e {\r\n    //     return !old_data.some(obj2 =\u003e {\r\n    //         return Object.keys(obj1).every(key =\u003e obj1[key] === obj2[key]);\r\n    //     });\r\n    // });\r\n    // const update_data = input_data.filter(obj2 =\u003e {\r\n    //     return !old_data.some(obj1 =\u003e {\r\n    //         return Object.keys(obj1).every(key =\u003e obj1[key] === obj2[key]);\r\n    //     });\r\n    // });\r\n    return update_data\r\n}\r\n\r\nfunction getMasterData(){\r\n    data_update = []\r\n    \r\n    inv_data = CralDB.QueryByComp(`SELECT * FROM {{inv_interim_excl}} WHERE temp_code='${jscall.input.temp_code}'`, jscall.company)\r\n    inv_data.forEach(inv =\u003e {\r\n        if (!CralDB.QueryByComp(`select skip_master from {{entity_data_set}} where sup_company=${inv.comp} and data_set='${inv.data_set}'`, jscall.company)[0]?.skip_master){\r\n            payload = {}\r\n            payload[\"inv_no\"] = inv.inv_no\r\n            payload[\"line\"] = inv.line\r\n            payload[\"inv_bp\"] = inv.inv_bp\r\n            payload[\"ship_bp\"] = inv.ship_bp\r\n            payload[\"sup_adrs\"] = inv.sup_adrs\r\n            payload[\"buy_adrs\"] = inv.buy_adrs\r\n            payload[\"ship_adrs\"] = inv.ship_adrs\r\n            buyer_data = CralDB.QueryByComp(`select * from {{buyer_companies}} where data_set='${inv.data_set}' and buy_code='${inv.inv_bp}'`, jscall.company)\r\n            if (buyer_data.length != 0){\r\n                payload[\"buy_name\"] = buyer_data[0].buy_name\r\n                payload[\"buy_cont_num\"] = buyer_data[0].buy_cont_num\r\n                payload[\"buy_email\"] = buyer_data[0].buy_email\r\n                payload[\"buy_sst_reg\"] = buyer_data[0].buy_sst_reg\r\n                payload[\"buy_tin\"] = buyer_data[0].buy_tin\r\n                payload[\"buy_reg_brn\"] = buyer_data[0].buy_reg_brn\r\n                payload[\"buy_reg_nric\"] = buyer_data[0].buy_reg_nric\r\n                payload[\"buy_reg_passport\"] = buyer_data[0].buy_reg_passport\r\n                payload[\"buy_reg_army\"] = buyer_data[0].buy_reg_army\r\n                if (!inv.buy_adrs){\r\n                    payload[\"buy_adrs\"] = buyer_data[0].buy_adrs\r\n                }\r\n            }\r\n            ship_data = CralDB.QueryByComp(`select * from {{buyer_companies}} where data_set='${inv.data_set}' and buy_code='${inv.ship_bp}'`, jscall.company)\r\n            if (ship_data.length != 0){\r\n                payload[\"ship_name\"] = ship_data[0].buy_name\r\n                payload[\"ship_tin\"] = ship_data[0].buy_tin\r\n                payload[\"ship_reg_brn\"] = ship_data[0].buy_reg_brn\r\n                payload[\"ship_reg_nric\"] = ship_data[0].buy_reg_nric\r\n                payload[\"ship_reg_passport\"] = ship_data[0].buy_reg_passport\r\n                payload[\"ship_reg_army\"] = ship_data[0].buy_reg_army\r\n                if (!inv.ship_adrs){\r\n                    payload[\"ship_adrs\"] = ship_data[0].buy_adrs\r\n                }\r\n            }\r\n            sup_address = CralDB.QueryByComp(`select * from {{address_master}} where data_set='${inv.data_set}' and adrs_code='${inv.sup_adrs}'`, jscall.company)\r\n            if (sup_address.length != 0){\r\n                payload[\"sup_city\"] = sup_address[0].adrs_city\r\n                payload[\"sup_postal_zone\"] = sup_address[0].postal_zone\r\n                payload[\"sup_adrs_line0\"] = sup_address[0].adrs_line0\r\n                payload[\"sup_adrs_line1\"] = sup_address[0].adrs_line1\r\n                payload[\"sup_adrs_line2\"] = sup_address[0].adrs_line2\r\n                payload[\"sup_country\"] = sup_address[0].adrs_country\r\n                payload[\"sup_cste\"] = sup_address[0].adrs_state\r\n            }\r\n            buy_address = CralDB.QueryByComp(`select * from {{address_master}} where data_set='${inv.data_set}' and adrs_code='${inv.buy_adrs}'`, jscall.company)\r\n            if (buy_address.length != 0){\r\n                payload[\"buy_city\"] = buy_address[0].adrs_city\r\n                payload[\"buy_postal_zone\"] = buy_address[0].postal_zone\r\n                payload[\"buy_adrs_line0\"] = buy_address[0].adrs_line0\r\n                payload[\"buy_adrs_line1\"] = buy_address[0].adrs_line1\r\n                payload[\"buy_adrs_line2\"] = buy_address[0].adrs_line2\r\n                payload[\"buy_country\"] = buy_address[0].adrs_country\r\n                payload[\"buy_cste\"] = buy_address[0].adrs_state\r\n            }\r\n            ship_address = CralDB.QueryByComp(`select * from {{address_master}} where data_set='${inv.data_set}' and adrs_code='${inv.ship_adrs}'`, jscall.company)\r\n            if (ship_address.length != 0){\r\n                payload[\"ship_city\"] = ship_address[0].adrs_city\r\n                payload[\"ship_postal_zone\"] = ship_address[0].postal_zone\r\n                payload[\"ship_adrs_line0\"] = ship_address[0].adrs_line0\r\n                payload[\"ship_adrs_line1\"] = ship_address[0].adrs_line1\r\n                payload[\"ship_adrs_line2\"] = ship_address[0].adrs_line2\r\n                payload[\"ship_country\"] = ship_address[0].adrs_country\r\n                payload[\"ship_cste\"] = ship_address[0].adrs_state\r\n            }\r\n            data_update.push({\r\n                \"input\": payload,\r\n                \"result\" : CralDB.PublishTopic(\"inv_interim_excl\", jscall.company, \"Update\", payload, jscall.user)\r\n            })\r\n        }\r\n    })\r\n    return data_update\r\n}"
        },
        {
            "Bizobj": {
                "ObjectName": "generate_report",
                "Description": "Generate Report",
                "external": true
            },
            "Script": "//**** Business Object generate_report Created by malai on 26-Sep-2024 13:05:38 ****//\r\n\r\nlet rpt_def = {\r\n    header: CralDB.QueryByComp(`select * from {{rep_layouts_header}} where layout_code='${jscall.input.layout_code}'`, jscall.company)[0],\r\n    lines: CralDB.QueryByComp(`select * from {{rep_layouts_line}} where layout_code='${jscall.input.layout_code}' and print=true order by grp_typ, seq`, jscall.company)\r\n}\r\n\r\nlet amountFields = [\"tpat\", \"toti\", \"tott\", \"tote\", \"tote + tdis\", \"amti + txai\", \"txai\", \"stot\", \"pric\", \"tdis\"]\r\nlet printCurrency = rpt_def.lines.filter(obj =\u003e obj.grp_typ == \"Detail\" \u0026\u0026 obj.field_value == \"ccur\").length ? true : false;\r\n\r\nfunction saveAndCompile(){\r\n\r\n    let headerBg = rpt_def.header.back_clr_head\r\n    let detailBg = rpt_def.header.back_clr_table\r\n    let footerBg = rpt_def.header.back_clr_footer\r\n    let glFont = rpt_def.header.font == \"arial\" ? \"Arial\" : \"Arial\"\r\n    let hdrContentAlign = rpt_def.header.cont_align_head == \"right\" ? \"R\" : rpt_def.header.cont_align_head == \"center\" ? \"C\" : \"L\"\r\n    let footerContentAlign = rpt_def.header.cont_align_footer == \"right\" ? \"R\" : rpt_def.header.cont_align_footer == \"center\" ? \"C\" : \"L\"\r\n    let repeatHeader = rpt_def.header.r_rep_head\r\n    let repeatFooter = rpt_def.header.r_footer\r\n    \r\n    let leftMargin = 6\r\n    let rightMargin = 203\r\n    let topMargin = 5\r\n    let bottomMargin = 295\r\n    let footerHeight = calculateLayoutHeight(\"Report Footer\", 5, 1, 0)\r\n    let pageNumHeight = 5\r\n\r\n    let reportWidth = rightMargin - leftMargin\r\n    let titleConstraint = getLogoConstraint(rpt_def.header.logo_const, leftMargin, rightMargin, topMargin)\r\n    let infoConstraint = getInfoLayoutConstrains(leftMargin, rightMargin)\r\n    let qr_code = {\r\n        type: \"QRCODE\",\r\n        x: infoConstraint.qr.x,\r\n        y: 0,\r\n        h: infoConstraint.qr.w,\r\n        w: infoConstraint.qr.w,\r\n        content: `qr_url + \"/\" + doc_uuid + \"/share/\" + qr_code`\r\n    }\r\n    let detailConstraint = getDetailLayoutXPosition(reportWidth, \r\n                                                    rpt_def.lines\r\n                                                    .filter(obj =\u003e obj.grp_typ === \"Detail\")\r\n                                                    .map(obj =\u003e obj.field_value))\r\n    let title_height = calculateLayoutHeight(\"Title\", 4, 1, 2 + (titleConstraint.content.y + 8))\r\n    let inv_info_height = calculateLayoutHeight(\"Report Header\", 4, 0, 8)\r\n\r\n    let inv_info = getTextChild(\r\n        infoConstraint.inv.x, 1, infoConstraint.inv.w, 5, glFont, 9,\r\n        '#666666', true, false, false, false, 'L', 'Invoice Info'\r\n    )\r\n    let sup_info = getTextChild(\r\n        infoConstraint.bp.x, 1, infoConstraint.bp.w, 5, glFont, 9,\r\n        '#666666', true, false, false, false, 'L', 'Supplier Info'\r\n    )\r\n    let buy_info = getTextChild(\r\n        infoConstraint.bp.x, 1, infoConstraint.bp.w, 5, glFont, 9,\r\n        '#666666', true, false, false, false, 'L', 'Buyer Info'\r\n    )\r\n\r\n    let layouts = {\r\n        title: {\r\n            id: \"ReportTitle\",\r\n            type: \"header\",\r\n            x: leftMargin,\r\n            y: topMargin,\r\n            // h: 2 + (titleConstraint.content.y + 8) + (rpt_def.lines.filter(obj =\u003e obj.grp_typ === \"Title\").length - 1) * 4,\r\n            h: title_height,\r\n            w: reportWidth,\r\n            bg: headerBg,\r\n            bw: 0.25,\r\n            bs: \"B\",\r\n            ce: `(doct==\"01\" || doct==\"02\" || doct==\"03\" || doct==\"04\")`,\r\n            childern: [\r\n                {\r\n                    id: \"Logo\",\r\n                    type: \"Image\",\r\n                    path: rpt_def.header.logo,\r\n                    x: titleConstraint.x,\r\n                    y: titleConstraint.y,\r\n                    h: titleConstraint.h,\r\n                    w: titleConstraint.w,\r\n                    mar: true\r\n                },\r\n                getTextChild(\r\n                    titleConstraint.documentType.x,\r\n                    (title_height / 2) - (titleConstraint.documentType.h / 2),\r\n                    titleConstraint.documentType.w,\r\n                    titleConstraint.documentType.h,\r\n                    glFont, 10, '#808080', true, false, false, true, 'C',\r\n                    `doc_dsca.toUpperCase()`\r\n                ),\r\n                {\r\n                    type: \"rect\",\r\n                    x: titleConstraint.documentType.x,\r\n                    y: topMargin + 3,\r\n                    w: titleConstraint.documentType.w,\r\n                    h: title_height - 6,\r\n                    bs: \"D\",\r\n                    bw: 0.4,\r\n                    bc: \"#777777\"\r\n                }\r\n            ]\r\n        },\r\n        title2: {\r\n            id: \"ReportTitle2\",\r\n            type: \"header\",\r\n            x: leftMargin,\r\n            y: topMargin,\r\n            // h: 2 + (titleConstraint.content.y + 8) + (rpt_def.lines.filter(obj =\u003e obj.grp_typ === \"Title\").length - 1) * 4,\r\n            h: title_height,\r\n            w: reportWidth,\r\n            bg: headerBg,\r\n            bw: 0.25,\r\n            bs: \"B\",\r\n            ce: `(doct!=\"01\" \u0026\u0026 doct!=\"02\" \u0026\u0026 doct!=\"03\" \u0026\u0026 doct!=\"04\")`,\r\n            childern: [\r\n                {\r\n                    id: \"Logo\",\r\n                    type: \"Image\",\r\n                    path: rpt_def.header.logo,\r\n                    x: titleConstraint.x,\r\n                    y: titleConstraint.y,\r\n                    h: titleConstraint.h,\r\n                    w: titleConstraint.w,\r\n                    mar: true\r\n                },\r\n                getTextChild(\r\n                    titleConstraint.documentType.x,\r\n                    (title_height / 2) - titleConstraint.documentType.h,\r\n                    titleConstraint.documentType.w,\r\n                    titleConstraint.documentType.h,\r\n                    glFont, 10, '#808080', true, false, false, true, 'C',\r\n                    `doc_dsca.toUpperCase()`\r\n                ),\r\n                {\r\n                    type: \"rect\",\r\n                    x: titleConstraint.documentType.x,\r\n                    y: topMargin + 3,\r\n                    w: titleConstraint.documentType.w,\r\n                    h: title_height - 6,\r\n                    bs: \"D\",\r\n                    bw: 0.4,\r\n                    bc: \"#777777\"\r\n                }\r\n            ]\r\n        },\r\n        rpt_header : { childern: [inv_info] },\r\n        rpt_header2 : { childern: [inv_info] },\r\n        grp_supplier: {\r\n            id: \"SupplierInfo\",\r\n            type: \"header\",\r\n            x: leftMargin,\r\n            y: 0,\r\n            h: calculateLayoutHeight(\"Group Supplier\", 4, 0, 8),\r\n            w: reportWidth,\r\n            ce: `(doct==\"11\")`,\r\n            childern: [sup_info]\r\n        },\r\n        grp_supplier2: {\r\n            id: \"SupplierInfo2\",\r\n            type: \"header\",\r\n            x: leftMargin,\r\n            y: 0,\r\n            h: calculateLayoutHeight(\"Group Supplier\", 4, 0, 8),\r\n            w: reportWidth,\r\n            ce: `(doct==\"12\" || doct==\"13\" || doct==\"14\")`,\r\n            childern: [sup_info]\r\n        },\r\n        grp_buyer: {\r\n            id: \"BuyerInfo\",\r\n            type: \"header\",\r\n            x: leftMargin,\r\n            y: 0,\r\n            h: calculateLayoutHeight(\"Group Buyer\", 4, 0, 8),\r\n            w: reportWidth,\r\n            ce: `(doct==\"01\")`,\r\n            childern: [buy_info]\r\n        },\r\n        grp_buyer2: {\r\n            id: \"BuyerInfo2\",\r\n            type: \"header\",\r\n            x: leftMargin,\r\n            y: 0,\r\n            h: calculateLayoutHeight(\"Group Buyer\", 4, 0, 8),\r\n            w: reportWidth,\r\n            ce: `(doct==\"02\" || doct==\"03\" || doct==\"04\")`,\r\n            childern: [buy_info]\r\n        },\r\n        detail1: {\r\n            id: \"detail1\",\r\n            type: \"Detail\",\r\n            x: leftMargin,\r\n            y: 0,\r\n            w: rightMargin -leftMargin,\r\n            h: 7,\r\n            bg: detailBg,\r\n            bw: 0.25,\r\n            childern: []\r\n        },\r\n        detail2: {\r\n            id: \"detail2\",\r\n            type: \"Detail\",\r\n            x: leftMargin,\r\n            y: 0,\r\n            h: 7,\r\n            w: reportWidth,\r\n            re: \"e_inv_no\",\r\n            rc: 1,\r\n            bw: 0.25,\r\n            bs: \"LR\",\r\n            childern: []\r\n        },\r\n        detailLine: {\r\n            id: \"detailLine\",\r\n            type: \"Detail\",\r\n            x: leftMargin,\r\n            y: 0,\r\n            w: reportWidth,\r\n            h: 0,\r\n            bw: 0.25,\r\n            bs: \"B\",\r\n            childern: []\r\n        },\r\n        detail_footer: {\r\n            id: \"subTotal\",\r\n            type: \"Detail\",\r\n            x: leftMargin,\r\n            y: 0,\r\n            h: calculateLayoutHeight(\"Detail Footer\", 8, 0, 0),\r\n            w: reportWidth,\r\n            bw: 0.25,\r\n            bs: \"LRB\",\r\n            soc: true,\r\n            ce: `(tott != 0 \u0026\u0026 tdis != 0)`,\r\n            childern: []\r\n        },\r\n        detail_footer2: {\r\n            id: \"subTotal2\",\r\n            type: \"Detail\",\r\n            x: leftMargin,\r\n            y: 0,\r\n            h: calculateLayoutHeight(\"Detail Footer\", 8, 2, 0),\r\n            w: reportWidth,\r\n            bw: 0.25,\r\n            bs: \"LRB\",\r\n            soc: true,\r\n            ce: `(tott == 0 \u0026\u0026 tdis == 0)`,\r\n            childern: []\r\n        },\r\n        detail_footer3: {\r\n            id: \"subTotal3\",\r\n            type: \"Detail\",\r\n            x: leftMargin,\r\n            y: 0,\r\n            h: calculateLayoutHeight(\"Detail Footer\", 8, 1, 0),\r\n            w: reportWidth,\r\n            bw: 0.25,\r\n            bs: \"LRB\",\r\n            soc: true,\r\n            ce: `(tott != 0 \u0026\u0026 tdis == 0)`,\r\n            childern: []\r\n        },\r\n        detail_footer4: {\r\n            id: \"subTotal4\",\r\n            type: \"Detail\",\r\n            x: leftMargin,\r\n            y: 0,\r\n            h: calculateLayoutHeight(\"Detail Footer\", 8, 1, 0),\r\n            w: reportWidth,\r\n            bw: 0.25,\r\n            bs: \"LRB\",\r\n            soc: true,\r\n            ce: `(tott == 0 \u0026\u0026 tdis != 0)`,\r\n            childern: []\r\n        },\r\n        grp_footer: {},\r\n        report_footer: {\r\n            id: \"Footer\",\r\n            type: \"Header\",\r\n            x: leftMargin,\r\n            y: bottomMargin - (footerHeight + pageNumHeight),\r\n            h: footerHeight,\r\n            w: reportWidth,\r\n            bw: 0.25,\r\n            bs: \"DB\",\r\n            bg: footerBg,\r\n            soc: repeatFooter ? false : true,\r\n            childern: []\r\n        },\r\n        pageNum: {\r\n            id: \"pageNumber\",\r\n            type: \"Footer\",\r\n            x: leftMargin,\r\n            y: bottomMargin - pageNumHeight,\r\n            h: pageNumHeight,\r\n            w: reportWidth,\r\n            childern: []\r\n        }\r\n    }\r\n    let titleEndYPos = layouts.title.y + layouts.title.h;\r\n    \r\n    [\"grp_supplier\", \"grp_supplier2\", \"grp_buyer\", \"grp_buyer2\"].forEach(group =\u003e {\r\n        // Repeat Header Handling\r\n        if (!repeatHeader){\r\n            layouts[group].ce += ` \u0026\u0026 (e_inv_no != tracker.Prev.e_inv_no)`\r\n        }\r\n        // Set Y Position and Adjust Height\r\n        layouts[group].y = titleEndYPos\r\n        layouts[group].h = Math.max(layouts[group].h, inv_info_height)\r\n    });\r\n    let detailEndMargin = bottomMargin - (footerHeight + pageNumHeight + layouts.detail_footer.h)\r\n    let detailStartMargin = Math.max(layouts.grp_buyer.h, layouts.grp_supplier.h, layouts.grp_buyer2.h, layouts.grp_supplier2.h) + titleEndYPos\r\n    layouts.detail2.rc = parseInt((detailEndMargin - detailStartMargin) / layouts.detail2.h) - 1\r\n\r\n    rpt_def.lines.forEach(element =\u003e {\r\n        date_fields = [\"e_invdt\", \"etim\"]\r\n        if (date_fields.includes(element.field_value)){\r\n            element.field_value = `new Date(${element.field_value}.toString().slice(0,21).replace(' ', 'T').replace(' +', 'Z')).toLocaleString().replace(\",\", \"\").replaceAll(\"/\", \"-\").replace(/(\\\\d{2})-(\\\\d{2})-(\\\\d{4})/, \"$2-$1-$3\");`\r\n        }\r\n        elementStyle = getFieldStyle(element.style, \r\n                                     element.grp_typ === \"Title\" ? hdrContentAlign : \r\n                                     element.grp_typ === \"Report Footer\" ? footerContentAlign : \"\")\r\n        switch(element.grp_typ){\r\n            case \"Title\":\r\n                const isCompName = element.field_name === \"comp_name\";\r\n                const yPositionTitle = isCompName ? titleConstraint.content.y : getNextFieldPosition(layouts.title, \"y\");\r\n                const yPositionTitle2 = isCompName ? titleConstraint.content.y : getNextFieldPosition(layouts.title2, \"y\");\r\n                const fontSize = isCompName ? 14 : 8;\r\n                const textHeight = isCompName ? 8 : 4;\r\n                const color = isCompName ? '#222222' : '#444444';\r\n\r\n                const textContent = isCompName\r\n                    ? `${element.field_value}${elementStyle.textCase}`\r\n                    : element.field_name === \"comp_address\" || element.field_name === \"comp_cont_details\"\r\n                        ? `${element.field_value}${elementStyle.textCase}`\r\n                        : `fPrint(\"${element.print_label ? element.print_label : element.field_label}: \", ${element.field_value}${elementStyle.textCase})`;\r\n\r\n                layouts.title.childern.push(\r\n                    getTextChild(\r\n                        titleConstraint.content.x, yPositionTitle,\r\n                        titleConstraint.content.w, textHeight,\r\n                        glFont, fontSize, color, elementStyle.fb, elementStyle.fi, elementStyle.fu,\r\n                        false, elementStyle.al, textContent\r\n                    )\r\n                );\r\n\r\n                layouts.title2.childern.push(\r\n                    getTextChild(\r\n                        titleConstraint.content.x, yPositionTitle2,\r\n                        titleConstraint.content.w, textHeight,\r\n                        glFont, fontSize, color, elementStyle.fb, elementStyle.fi, elementStyle.fu,\r\n                        false, elementStyle.al, textContent\r\n                    )\r\n                );\r\n            break;\r\n\r\n            case \"Report Header\":\r\n                const rep_layouts = [\r\n                    { layout: layouts.rpt_header, exclude: [] },\r\n                    { layout: layouts.rpt_header2, exclude: [\"org_e_inv_no\"] }\r\n                ];\r\n\r\n                rep_layouts.forEach(({ layout, exclude }) =\u003e {\r\n                    if (!exclude.includes(element.field_value)) {\r\n                        y_value = getNextFieldPosition(layout, \"y\");\r\n                        layout.childern.push(\r\n                            getTextChild(\r\n                                infoConstraint.inv.x, y_value, infoConstraint.inv.label_width, 4,\r\n                                glFont, 7, \"\", true, false, false, false, \"L\",\r\n                                `fPrint(\"${(element.print_label) ? element.print_label : element.field_label}\")`\r\n                            ),\r\n                            getTextChild(\r\n                                infoConstraint.inv.x + infoConstraint.inv.label_width, y_value,\r\n                                infoConstraint.inv.content_width, 4, glFont, 7,\r\n                                '#545454', elementStyle.fb, elementStyle.fi, elementStyle.fu,\r\n                                true, elementStyle.al, `${element.field_value}${elementStyle.textCase}`\r\n                            )\r\n                        );\r\n                    }\r\n                });\r\n            break;\r\n            case \"Group Supplier\":\r\n                const sup_layouts = [\r\n                    { layout: layouts.grp_supplier, exclude: [] },\r\n                    { layout: layouts.grp_supplier2, exclude: [] }\r\n                ];\r\n\r\n                sup_layouts.forEach(({ layout, exclude }) =\u003e {\r\n                    if (!exclude.includes(element.field_value)) {\r\n                        y_value = getNextFieldPosition(layout, \"y\");\r\n                        layout.childern.push(\r\n                            getTextChild(\r\n                                infoConstraint.bp.x, y_value, infoConstraint.bp.label_width, 4,\r\n                                glFont, 7, '', true, false, false, false, \"L\", \r\n                                `fPrint(\"${(element.print_label) ? element.print_label : element.field_label}\")`\r\n                            ),\r\n                            getTextChild(\r\n                                infoConstraint.bp.x + infoConstraint.bp.label_width, y_value,\r\n                                infoConstraint.bp.content_width, 4,\r\n                                glFont, 7, '#545454', elementStyle.fb, elementStyle.fi,\r\n                                elementStyle.fu, true, elementStyle.al,\r\n                                `${element.field_value}${elementStyle.textCase}`\r\n                            )\r\n                        );\r\n                    }\r\n                });\r\n            break;\r\n            case \"Group Buyer\":\r\n                const buy_layouts = [\r\n                    { layout: layouts.grp_buyer, exclude: [] },\r\n                    { layout: layouts.grp_buyer2, exclude: [] }\r\n                ];\r\n\r\n                buy_layouts.forEach(({ layout, exclude }) =\u003e {\r\n                    if (!exclude.includes(element.field_value)) {\r\n                        y_value = getNextFieldPosition(layout, \"y\");\r\n                        layout.childern.push(\r\n                            getTextChild(\r\n                                infoConstraint.bp.x, y_value, infoConstraint.bp.label_width, 4,\r\n                                glFont, 7, '', true, false, false, false, 'L', \r\n                                `fPrint(\"${(element.print_label) ? element.print_label : element.field_label}\")`\r\n                            ),\r\n                            getTextChild(\r\n                                infoConstraint.bp.x + infoConstraint.bp.label_width, y_value,\r\n                                infoConstraint.bp.content_width, 4, glFont, 7, '#545454',\r\n                                elementStyle.fb, elementStyle.fi, elementStyle.fu, true,\r\n                                elementStyle.al, `${element.field_value}${elementStyle.textCase}`\r\n                            )\r\n                        );\r\n                    }\r\n                });\r\n            break;\r\n            case \"Detail\":\r\n                if (element.field_value !== \"ccur\"){\r\n                    x_value = getNextFieldPosition(layouts.detail1, \"x\")\r\n                    layouts.detail1.childern.push(\r\n                        getTextChild(\r\n                            x_value ? x_value : leftMargin, 0,\r\n                            detailConstraint[element.field_value], 7,\r\n                            glFont, 10, '#FFFFFF', true, false, false, false, 'C',\r\n                            `fPrint(\"${(element.print_label) ? element.print_label : element.field_label}\")`\r\n                        )\r\n                    )\r\n                    layouts.detail2.childern.push(\r\n                        getTextChild(\r\n                            x_value ? x_value : leftMargin, 0, \r\n                            detailConstraint[element.field_value], 7, \r\n                            glFont, 8, '#414141', elementStyle.fb, elementStyle.fi, elementStyle.fu,\r\n                            false, elementStyle.al,\r\n                            (amountFields.includes(element.field_value)) ? \r\n                                printCurrency ? \r\n                                    `fPrint(ccur, \" \", (toNum(${element.field_value})).toFixed(2).replace(/\\\\B(?=(\\\\d{3})+(?!\\\\d))/g, \",\"))` : \r\n                                    `(toNum(${element.field_value})).toFixed(2).replace(/\\\\B(?=(\\\\d{3})+(?!\\\\d))/g, \",\")` : \r\n                                `${element.field_value}${elementStyle.textCase}`\r\n                        )\r\n                    )\r\n                }\r\n            break;\r\n            case \"Detail Footer\":\r\n                const detailFooters = [\r\n                    { layout: layouts.detail_footer, exclude: [] },\r\n                    { layout: layouts.detail_footer2, exclude: [\"tott\", \"tdis\"] },\r\n                    { layout: layouts.detail_footer3, exclude: [\"tdis\"] },\r\n                    { layout: layouts.detail_footer4, exclude: [\"tott\"] }\r\n                ];\r\n\r\n                detailFooters.forEach(({ layout, exclude }) =\u003e {\r\n                    if (!exclude.includes(element.field_value)) {\r\n                        y_value = getNextFieldPosition(layout, \"y\");\r\n\r\n                        layout.childern.push(\r\n                            getTextChild(\r\n                                rightMargin - 60, y_value, 22, 8, glFont, 10, '#444444',\r\n                                true, false, false, false, \"R\",\r\n                                `fPrint(\"${(element.print_label) ? element.print_label : element.field_label}\")`\r\n                            ),\r\n                            getTextChild(\r\n                                rightMargin - 38, y_value, 38, 8, glFont, 10, '#444444',\r\n                                elementStyle.fb, elementStyle.fi, elementStyle.fu, false,\r\n                                elementStyle.al, \r\n                                (amountFields.includes(element.field_value)) ? \r\n                                    printCurrency ? \r\n                                        `fPrint(ccur, \" \", (toNum(${element.field_value})).toFixed(2).replace(/\\\\B(?=(\\\\d{3})+(?!\\\\d))/g, \",\"))` : \r\n                                        `(toNum(${element.field_value})).toFixed(2).replace(/\\\\B(?=(\\\\d{3})+(?!\\\\d))/g, \",\")` : \r\n                                    `${element.field_value}${elementStyle.textCase}`\r\n                            )\r\n                        );\r\n                    }\r\n                });\r\n            break;\r\n            case \"Report Footer\":\r\n                if (element.field_value != \"tracker.Page\"){\r\n                    y_value = getNextFieldPosition(layouts.report_footer, \"y\")\r\n                    layouts.report_footer.childern.push(\r\n                        getTextChild(\r\n                            leftMargin, y_value, 22, 5, glFont, 8, '#444444',\r\n                            true, false, false, false, 'L',\r\n                            `fPrint(\"${(element.print_label) ? element.print_label : element.field_label}\")`\r\n                        ),\r\n                        getTextChild(\r\n                            leftMargin + 32, y_value, 32, 5, glFont, 8, '#444444',\r\n                            elementStyle.fb, elementStyle.fi, elementStyle.fu, false,\r\n                            elementStyle.al, `${element.field_value}${elementStyle.textCase}`\r\n                        )\r\n                    )\r\n                } else {\r\n                    layouts.pageNum.childern.push(\r\n                        {\r\n                            type: \"expr\",\r\n                            expression: `tPages=Math.ceil(s_line_cnt / ${layouts.detail2.rc});`\r\n                        },\r\n                        getTextChild(\r\n                            leftMargin, 0, reportWidth, pageNumHeight,\r\n                            glFont, 7, '#444444', elementStyle.fb, elementStyle.fi,\r\n                            elementStyle.fu, false, elementStyle.al,\r\n                            `fPrint(\"Page \", tracker.Page, \" of \", tPages)`\r\n                        )\r\n                    )\r\n                }\r\n            break;\r\n        }\r\n    });\r\n\r\n    // To Add QR in Layout\r\n\r\n    [\r\n        {group: \"grp_supplier\", invInfoChilds: layouts.rpt_header2.childern},\r\n        {group: \"grp_supplier2\", invInfoChilds: layouts.rpt_header.childern},\r\n        {group: \"grp_buyer\", invInfoChilds: layouts.rpt_header2.childern},\r\n        {group: \"grp_buyer2\", invInfoChilds: layouts.rpt_header.childern}\r\n    ].forEach(({group, invInfoChilds}) =\u003e {\r\n        qr_code.y = (layouts[group].h - infoConstraint.qr.w) / 2\r\n        layouts[group].childern = [...layouts[group].childern, ...invInfoChilds, qr_code];\r\n    });\r\n\r\n    // To Draw Line in Sub Total\r\n    [\r\n        layouts.detail_footer, layouts.detail_footer2, \r\n        layouts.detail_footer3, layouts.detail_footer4\r\n    ].forEach(layout =\u003e {\r\n        layout.childern.push({\r\n            type: \"line\",\r\n            x: leftMargin,\r\n            x2: rightMargin,\r\n            y: layout.h - 8,\r\n            y2: layout.h - 8,\r\n            bw: 0.25\r\n        })\r\n    });\r\n\r\n    // To Add the line \"This is a computer generated invoice\"\r\n    layouts.report_footer.childern.push(\r\n        getTextChild(\r\n            rightMargin - 50, 0, 50, 5, glFont, 8, '#444444', false, true, false,\r\n            false, 'R', 'This is a computer generated invoice'\r\n        )\r\n    );\r\n    \r\n\r\n    return update_report(jscall.input.layout_code, getReportCode(layouts));\r\n}\r\n\r\nfunction getTextChild(x, y, w, h, fn, fs, fc, fb, fi, fu, mul, al, content){\r\n    return {\r\n        type: \"text\",\r\n        x, y, w, h,\r\n        fn, fs, fc,\r\n        fb, fi, fu,\r\n        mul, al,\r\n        content\r\n    }\r\n}\r\n\r\n\r\nfunction update_report(rpt_code, rpt_str){\r\n    rpt = Reports.GetReport(rpt_code)\r\n    if (rpt.ReportID){\r\n        rpt[\"DesignFile\"] = rpt_str\r\n        result = Reports.UpdateReport(rpt)\r\n    } else {\r\n        result = Reports.CreateReport({\r\n            \"CreatedAt\": CralUtil.Date.Now(),\r\n            \"CreatedBy\": jscall.user,\r\n            \"Description\": rpt_def.header.layout_desc,\r\n            \"DesignFile\": rpt_str,\r\n            \"ObjectFile\": null,\r\n            \"ParamDefault\": \"\",\r\n            \"Params\": \"e_inv_no\",\r\n            \"ReportID\": rpt_code,\r\n            \"SourceDSID\": \"einv_data\",\r\n            \"SourceQuery\": \"\",\r\n            \"SourceType\": \"Dataset\",\r\n            \"UpdatedAt\": null,\r\n            \"UpdatedBy\": \"\"\r\n        })\r\n    }\r\n    if (!result){\r\n        if (!Reports.CompileReport(rpt_code)){\r\n            return true\r\n        } else {\r\n            return false\r\n        }\r\n    } else {\r\n        return false\r\n    }\r\n}\r\n\r\n\r\nfunction getReportCode(input_layouts){\r\n\r\n    let report_code = `#PDF -P A4 -O p -M mm -ML 10 -MR 10 -MT 0 -MB 5`;\r\n\r\n    [\r\n        \"title\", \"title2\", \"grp_buyer\", \"grp_buyer2\", \"grp_supplier\", \"grp_supplier2\",\r\n        \"detail1\", \"detail2\", \"detailLine\", \"detail_footer\", \"detail_footer2\",\r\n        \"detail_footer3\", \"detail_footer4\", \"report_footer\", \"pageNum\"\r\n    ].forEach(layout =\u003e {\r\n        report_code += getLayout(input_layouts[layout])\r\n    });\r\n\r\n    report_code += `\\n#PDFEND -N 'sample.pdf'`\r\n    return report_code\r\n}\r\n\r\nfunction getLayout(js_layout) {\r\n    let layout_str = `\\n\\n#LAYOUT`;\r\n\r\n    if (js_layout.id) layout_str += ` -ID \"${js_layout.id}\"`;\r\n    if (js_layout.type === \"Detail\") layout_str += ` -T Detail`;\r\n\r\n    layout_str += addAttributes(\r\n        ['x', 'y', 'w', 'h', 'bg', 'bw', 'bs', 'bc', 'ce', 're', 'rc', 'soc'], \r\n        {}, {x: 0, y: 0, w: 0, h: 0}, js_layout, ['soc']\r\n    )\r\n    \r\n    layout_str += `\\n${getChilderns(js_layout.childern)}`;\r\n    layout_str += `\\n#LAYOUTEND`;\r\n\r\n    return layout_str;\r\n}\r\n\r\n\r\nfunction getChilderns(js_child) {\r\n    let child_data = ``;\r\n\r\n    js_child.forEach(child =\u003e {\r\n        if (!child.type) return;\r\n\r\n        child_data += `\\n#${child.type.toUpperCase()} `;\r\n        \r\n        if (child.expression \u0026\u0026 child.type.toUpperCase() === \"EXPR\") {\r\n            child_data += ` ${child.expression}`\r\n            return\r\n        }\r\n        \r\n        default_attr = (child.type.toUpperCase() === \"TEXT\") ? \r\n                                {x: 0, y: 0, w: 0, h: 0, fn: 'Arial'} : \r\n                                {x: 0, y: 0, w: 0, h: 0};\r\n\r\n        child_data += addAttributes(\r\n            ['id', 'path', 'x', 'y', 'w', 'h', 'x2', 'y2',\r\n            'mar', 'al', 'fn', 'fs', 'fc', 'fb', 'fi', 'fu', 'mul',\r\n            'bw', 'bs', 'bc', 'content'],\r\n            {'path': 'P', 'content': 'C'}, default_attr, child, \r\n            ['mar', 'fb', 'fi', 'fu', 'mul']\r\n        )\r\n    });\r\n\r\n    return child_data;\r\n}\r\n\r\nfunction addAttributes(attributes, alternativeKeys, default_value, content_value, noValue){\r\n    let result = '';\r\n    attributes.forEach(key =\u003e {\r\n        isBlankAttr = noValue.includes(key)\r\n        if (content_value[key] || Object.keys(default_value).includes(key)){\r\n            let attr = alternativeKeys[key] ? alternativeKeys[key] : key\r\n            let value = content_value[key] ? content_value[key] : (default_value[key])\r\n            result += (isBlankAttr) ? ` -${attr.toUpperCase()}` : ` -${attr.toUpperCase()} ${value}`\r\n        }\r\n    })\r\n    return result\r\n}\r\nfunction getLogoConstraint(styles, lm, rm, tm){\r\n    let constraint = styles.split(\",\")\r\n    \r\n    let yPos = parseFloat(constraint[1]??0)\r\n    let img_width = parseFloat(constraint[2]??10)\r\n    let docType_width = 30\r\n    switch (constraint[0]){\r\n        case \"R\":\r\n            return {\r\n                x: rm - img_width,\r\n                y: yPos,\r\n                w: img_width,\r\n                h: img_width,\r\n                content: {\r\n                    x: lm + docType_width,\r\n                    y: 0 ,\r\n                    w: rm - (lm + img_width + docType_width)\r\n                },\r\n                documentType: {\r\n                    x: lm, y:yPos, w:docType_width, h:6\r\n                }\r\n            }\r\n        break;\r\n        case \"C\":\r\n            return {\r\n                x: ( (lm + rm) / 2 ) - (img_width / 2),\r\n                y: 0,\r\n                w: img_width,\r\n                h: img_width,\r\n                content: {\r\n                    x: lm + docType_width,\r\n                    y: yPos,\r\n                    w: rm - ((docType_width * 2) + lm) \r\n                },\r\n                documentType: {\r\n                    x: rm - docType_width, y:0 , w:docType_width , h:6 \r\n                }\r\n            }\r\n        break;\r\n        default:\r\n            return {\r\n                x: lm,\r\n                y: yPos,\r\n                w: img_width,\r\n                h: img_width,\r\n                content: {\r\n                    x: lm + img_width,\r\n                    y: 0,\r\n                    w: rm - (lm + img_width + docType_width)\r\n                },\r\n                documentType: {\r\n                    x: rm - docType_width, y:yPos , w:docType_width , h:6\r\n                }\r\n            }\r\n        break;\r\n    }\r\n}\r\n\r\nfunction getInfoLayoutConstrains(lm, rm) {\r\n    // const [qr_layout_width, qr_width] = rpt_def.header.qr_code.split(\",\");\r\n    const [qr_layout_width, qr_width] = [40,30]\r\n\r\n    const availableWidth = rm - lm - qr_layout_width;\r\n    const halfWidth = availableWidth / 2;\r\n    const labelWidth = halfWidth / 3.5;\r\n    const contentWidth = halfWidth - labelWidth;\r\n\r\n    return {\r\n        bp: {\r\n            x: lm,\r\n            w: halfWidth,\r\n            label_width: labelWidth,\r\n            content_width: contentWidth,\r\n        },\r\n        inv: {\r\n            x: lm + halfWidth,\r\n            w: halfWidth,\r\n            label_width: labelWidth,\r\n            content_width: contentWidth,\r\n        },\r\n        qr: {\r\n            x: rm - qr_layout_width + ((qr_layout_width - qr_width) / 2),\r\n            w: qr_width\r\n        },\r\n    };\r\n}\r\n\r\n// function calculateLayoutHeight(layout, height, omited_fields_count, additionalHeight){\r\n//     let totalFields = rpt_def.lines.filter(obj =\u003e obj.grp_typ === layout).length\r\n//     return ((totalFields - omited_fields_count) * height) + additionalHeight\r\n// }\r\n\r\nfunction calculateLayoutHeight(layout, height, omited_fields_count, additionalHeight){\r\n    let totalFields = rpt_def.lines.filter(obj =\u003e obj.grp_typ === layout).length\r\n    if (layout == \"Group Supplier\"){\r\n        rpt_def.lines.forEach(line =\u003e {\r\n            // if ([\"supplier_address\", \"sup_badsca\"].includes(line.field_value)){\r\n            if ([\"supplier_address\"].includes(line.field_value)){\r\n                additionalHeight += 8\r\n            }\r\n        })\r\n    }\r\n    if (layout == \"Group Buyer\"){\r\n        rpt_def.lines.forEach(line =\u003e {\r\n            if ([\"buyer_address\"].includes(line.field_value)){\r\n                additionalHeight += 8\r\n            }\r\n        })\r\n    }\r\n    return ((totalFields - omited_fields_count) * height) + additionalHeight\r\n}\r\n\r\n\r\nfunction getNextFieldPosition(layout, axis){\r\n    let addHeight = 0\r\n    if (layout.childern.length){\r\n        let last_child = layout.childern[layout.childern.length - 1]\r\n        if (axis == \"x\"){\r\n            return last_child.x + last_child.w\r\n        } else {\r\n            // if (last_child.content.includes(\"supplier_address\") || last_child.content.includes(\"buyer_address\") || last_child.content.includes(\"sup_badsca\")){\r\n            if (last_child.content.includes(\"supplier_address\") || last_child.content.includes(\"buyer_address\")){\r\n                addHeight = 8\r\n            }\r\n            return last_child.y + last_child.h + addHeight\r\n        }\r\n    } else {\r\n        return 0\r\n    }\r\n}\r\n\r\nfunction getDetailLayoutXPosition(total_width, fields) {\r\n    let min_length = {\r\n        \"line\": 8,\r\n        \"clas\": 12,\r\n        \"item\": 25,\r\n        \"item_desc\": 25,\r\n        \"dqua\": 8,\r\n        \"cuni\": 10,\r\n        \"pric\": 20,\r\n        \"disc\": 12,\r\n        \"ccur\": 0,\r\n        \"stot\": 20,\r\n        \"txai\": 20,\r\n        \"amti + txai\": 25\r\n    };\r\n\r\n    let max_length = {\r\n        \"line\": 10,\r\n        \"clas\": 12,\r\n        \"dqua\": 10,\r\n        \"cuni\": 10,\r\n        \"disc\": 12,\r\n        \"item\": 50,\r\n        \"item_desc\": 50,\r\n        \"amti + txai\": 35\r\n    };\r\n\r\n    // Calculate the initial sum of the lengths excluding 'ccur'\r\n    let total_sum = fields.filter(field =\u003e field !== \"ccur\").reduce((sum, field) =\u003e sum + min_length[field], 0);\r\n    \r\n    // The difference that we need to adjust\r\n    let diff = total_width - total_sum;\r\n\r\n    // Adjust \"item\" and \"item_desc\" based on the difference\r\n    if (diff !== 0) {\r\n        if (fields.includes(\"item\") \u0026\u0026 fields.includes(\"item_desc\")) {\r\n            let adjust = diff / 2;\r\n            min_length[\"item\"] = Math.min(max_length[\"item\"], Math.max(1, min_length[\"item\"] + adjust));\r\n            min_length[\"item_desc\"] = Math.min(max_length[\"item_desc\"], Math.max(1, min_length[\"item_desc\"] + adjust));\r\n        } else if (fields.includes(\"item\") \u0026\u0026 !fields.includes(\"item_desc\")) {\r\n            min_length[\"item\"] = Math.min(max_length[\"item\"], Math.max(1, min_length[\"item\"] + diff));\r\n        } else if (!fields.includes(\"item\") \u0026\u0026 fields.includes(\"item_desc\")) {\r\n            min_length[\"item_desc\"] = Math.min(max_length[\"item_desc\"], Math.max(1, min_length[\"item_desc\"] + diff));\r\n        } else if (!fields.includes(\"item\") \u0026\u0026 !fields.includes(\"item_desc\")) {\r\n            min_length[\"amti + txai\"] = Math.min(max_length[\"amti + txai\"], Math.max(1, min_length[\"amti + txai\"] + diff));\r\n        }\r\n    }\r\n\r\n    // Recalculate the total sum after the initial adjustment\r\n    total_sum = fields.filter(field =\u003e field !== \"ccur\").reduce((sum, field) =\u003e sum + min_length[field], 0);\r\n    diff = total_width - total_sum;\r\n\r\n    // Redistribute remaining diff to other fields while respecting max_length or total_width\r\n    let adjustFields = (diff) =\u003e {\r\n        let adjustableFields = fields.filter(field =\u003e min_length[field] \u003c (max_length[field] || total_width));\r\n        let totalAdjustable = adjustableFields.length;\r\n\r\n        if (totalAdjustable === 0) return; // No fields can be adjusted anymore\r\n\r\n        let adjustPerField = diff / totalAdjustable;\r\n\r\n        adjustableFields.forEach(field =\u003e {\r\n            let fieldMax = max_length[field] || total_width;  // Use total_width as max if max_length is undefined\r\n            let newValue = min_length[field] + adjustPerField;\r\n\r\n            // Apply adjustment but respect the max_length or total_width limit\r\n            if (newValue \u003e fieldMax) {\r\n                diff -= (fieldMax - min_length[field]);  // Subtract the amount that can actually be added\r\n                min_length[field] = fieldMax;  // Set to max_length or total_width\r\n            } else {\r\n                min_length[field] = newValue;  // Apply the adjustment\r\n            }\r\n        });\r\n\r\n        // Recalculate the remaining difference after adjustment\r\n        total_sum = fields.filter(field =\u003e field !== \"ccur\").reduce((sum, field) =\u003e sum + min_length[field], 0);\r\n        diff = total_width - total_sum;\r\n\r\n        // If there's still a difference, call adjustFields again\r\n        if (Math.abs(diff) \u003e 0.1) {\r\n            adjustFields(diff);\r\n        }\r\n    };\r\n\r\n    // Redistribute the remaining difference\r\n    if (diff !== 0) {\r\n        adjustFields(diff);\r\n    }\r\n\r\n    // Create the return object with only keys from the 'fields' array\r\n    let result = {};\r\n    fields.forEach(field =\u003e {\r\n        result[field] = min_length[field];\r\n    });\r\n\r\n    return result;\r\n}\r\n\r\nfunction getFieldStyle(style, defaultAlignment){\r\n    let alignment = \"\"\r\n    let bold = false\r\n    let italic = false\r\n    let underline = false\r\n    let textCase = \"\"\r\n\r\n    // Font Styles - Bold, Italic, Underline\r\n    let styles = style.split(\",\")\r\n    if (styles[0].includes(\"B\")){\r\n        bold = true\r\n    }\r\n    if (styles[0].includes(\"I\")){\r\n        italic = true\r\n    }\r\n    if (styles[0].includes(\"U\")){\r\n        underline = true\r\n    }\r\n\r\n    // Font Case\r\n    switch(styles[1]){\r\n        case \"C\":\r\n            textCase = `.toUpperCase()`\r\n        break;\r\n        case \"L\":\r\n            textCase = `.toLowerCase()`\r\n        break;\r\n        case \"T\":\r\n            textCase = `.split(' ').map(word =\u003e word.charAt(0).toUpperCase() + word.slice(1).toLowerCase()).join(' ')`\r\n        break;\r\n    }\r\n\r\n\r\n    // ALignment \r\n    if (defaultAlignment != \"R\" \u0026\u0026 defaultAlignment != \"C\"){\r\n        defaultAlignment = \"L\"\r\n    }\r\n    switch(styles[2]){\r\n        case \"AC\":\r\n            alignment = \"C\"\r\n        break;\r\n        case \"AR\":\r\n            alignment = \"R\"\r\n        break;\r\n        case \"AL\":\r\n            alignment = \"L\"\r\n        break;\r\n        default:\r\n            alignment = defaultAlignment;\r\n        break;\r\n    }\r\n\r\n    return {\r\n        al: alignment,\r\n        fb: bold,\r\n        fi: italic,\r\n        fu: underline,\r\n        textCase: textCase\r\n    }\r\n}"
        },
        {
            "Bizobj": {
                "ObjectName": "json_sumqty_by_item",
                "Description": "Sum Qty by Item per Invoice (JSON)",
                "external": false
            },
            "Script": "//**** Business Object json_sumqty_by_item Created by sathish on 29-Aug-2024 12:55:12 ****//\r\nfunction sum_quantity_by_item(input_object){\r\n\r\n    output_object = {}\r\n    output_sumqty_object = {}\r\n    output_sumqty_line_object = []\r\n    item_array = []\r\n    unit_array = []\r\n    price_array = []\r\n    tax_array = []\r\n    tax_certificate_array = []\r\n    discount_array = []\r\n    \r\n    checked_object_count = 0\r\n    sumup_object_count = 0\r\n\r\n    CralUtil.LogInfo(\"Sum Qty's by Item\",\"Input Object\",input_object)\r\n\r\n    trans_id = jscall.BeginTransaction()\r\n\r\n    interim_header_result = jscall.RunQueryTx(trans_id,generate_query_interim_header(input_object),jscall.company)\r\n    if (interim_header_result.status == false){\r\n        log_error_object = {\r\n            \"object\" : input_object,\r\n            \"result\" : interim_header_result.error\r\n        }\r\n        CralUtil.LogInfo(\"Sum Qty's by Item\",\"Interim Header Record Insert\",log_error_object)\r\n        output_object = {\r\n            \"result\" : false,\r\n            \"object\" : output_sumqty_object\r\n        }\r\n        jscall.RollBack(trans_id)\r\n        return output_object\r\n    }\r\n\r\n    for(a=0; a\u003cinput_object.lines.length; a++){\r\n        // interim_line_input_object = insert_to_interim_line(input_object.lines[a])\r\n        // interim_line_result = CralDB.PublishTopic(\"interim_einv_line\",jscall.company,\"Insert\",interim_line_input_object,jscall.user)\r\n        // if (typeof interim_line_result == \"string\"){\r\n        //     CralUtil.LogInfo(\"Sum Qty's by Item\",\"Interim Record Insert\",log_error_object)\r\n        //     output_object = {\r\n        //         \"result\" : false,\r\n        //         \"object\" : output_sumqty_object\r\n        //     }\r\n        //     return output_object\r\n        // }\r\n        // else{\r\n        //     if (interim_line_result.Success == false){\r\n        //         CralUtil.LogInfo(\"Sum Qty's by Item\",\"Interim Record Insert\",log_error_object)\r\n        //         output_object = {\r\n        //         \"result\" : false,\r\n        //         \"object\" : output_sumqty_object\r\n        //         }\r\n        //         return output_object\r\n        //     }  \r\n        // }\r\n        interim_line_result = jscall.RunQueryTx(trans_id,generate_query_interim_line(input_object.lines[a]),jscall.company)\r\n        if (interim_line_result.status == false){\r\n            log_error_object = {\r\n                \"inputobject\" : input_object.lines[a],\r\n                \"result\" : interim_line_result\r\n            }\r\n            CralUtil.LogInfo(\"Sum Qty's by Item\",\"Interim Line Record Insert\",log_error_object)\r\n            output_object = {\r\n                \"result\" : false,\r\n                \"object\" : output_sumqty_object\r\n            }\r\n            jscall.RollBack(trans_id)\r\n            return output_object\r\n        }\r\n    }\r\n\r\n    jscall.Commit(trans_id)\r\n    \r\n    output_sumqty_object = input_object\r\n\r\n    for(i=0; i\u003cinput_object.lines.length; i++){\r\n\r\n        if (input_object.lines[i].item != \"\"){\r\n\r\n            result = check_object_already_sumupped( checked_object_count,item_array,unit_array,price_array,\r\n                                                tax_array,tax_certificate_array,discount_array,input_object.lines[i])\r\n            if (result == false){\r\n\r\n                output_sumqty_line_object[sumup_object_count] = input_object.lines[i]\r\n\r\n                total_excluding_tax = input_object.lines[i].amti\r\n                amount_exempted_from_tax = input_object.lines[i].amtt\r\n                quantity = input_object.lines[i].dqua\r\n                discount_amount = input_object.lines[i].ldai\r\n                subtotal = input_object.lines[i].stot\r\n                tax_amount = input_object.lines[i].txai\r\n\r\n                for(j=i+1; j\u003cinput_object.lines.length; j++){\r\n\r\n                    if (input_object.lines[i].item == input_object.lines[j].item \u0026\u0026\r\n                        input_object.lines[i].cuni == input_object.lines[j].cuni \u0026\u0026\r\n                        input_object.lines[i].pric == input_object.lines[j].pric \u0026\u0026\r\n                        input_object.lines[i].cvat == input_object.lines[j].cvat \u0026\u0026\r\n                        input_object.lines[i].ceno == input_object.lines[j].ceno \u0026\u0026\r\n                        input_object.lines[i].disc == input_object.lines[j].disc){\r\n\r\n                        total_excluding_tax = total_excluding_tax + input_object.lines[j].amti\r\n                        amount_exempted_from_tax = amount_exempted_from_tax + input_object.lines[j].amtt\r\n                        quantity = quantity + input_object.lines[j].dqua\r\n                        discount_amount = discount_amount + input_object.lines[j].ldai\r\n                        subtotal = subtotal + input_object.lines[j].stot\r\n                        tax_amount = tax_amount + input_object.lines[j].txai\r\n\r\n                    }\r\n\r\n                }\r\n\r\n                output_sumqty_line_object[sumup_object_count].amti = parseFloat(total_excluding_tax.toFixed(2))\r\n                output_sumqty_line_object[sumup_object_count].amtt = parseFloat(amount_exempted_from_tax.toFixed(2))\r\n                output_sumqty_line_object[sumup_object_count].dqua = parseFloat(quantity.toFixed(2))\r\n                output_sumqty_line_object[sumup_object_count].ldai = parseFloat(discount_amount.toFixed(2))\r\n                output_sumqty_line_object[sumup_object_count].stot = parseFloat(subtotal.toFixed(2))\r\n                output_sumqty_line_object[sumup_object_count].txai = parseFloat(tax_amount.toFixed(2))\r\n\r\n                item_array[checked_object_count] = input_object.lines[i].item\r\n                unit_array[checked_object_count] = input_object.lines[i].cuni\r\n                price_array[checked_object_count] = input_object.lines[i].pric\r\n                tax_array[checked_object_count] = input_object.lines[i].cvat\r\n                tax_certificate_array[checked_object_count] = input_object.lines[i].ceno\r\n                discount_array[checked_object_count] = input_object.lines[i].disc\r\n\r\n                checked_object_count = checked_object_count + 1\r\n                sumup_object_count = sumup_object_count + 1\r\n            }\r\n        }\r\n        else{\r\n            output_sumqty_line_object[sumup_object_count] = input_object.lines[i]\r\n            sumup_object_count = sumup_object_count + 1\r\n        }\r\n    }\r\n    \r\n    output_sumqty_object.lines = output_sumqty_line_object\r\n    output_sumqty_object.line_cnt = output_sumqty_object.lines.length\r\n\r\n    output_object = {\r\n        \"result\" : true,\r\n        \"object\" : output_sumqty_object\r\n    }\r\n\r\n    return output_object\r\n}\r\n\r\nexports.sum_quantity_by_item = sum_quantity_by_item\r\n\r\nfunction check_object_already_sumupped( get_check_object_count,get_item_array,get_unit_array,get_price_array,\r\n                                        get_tax_array,get_tax_certificate_array,get_discount_array,get_line_object){\r\n\r\n    for (k=0; k\u003cget_check_object_count; k++){\r\n\r\n        if (get_line_object.item == get_item_array[k] \u0026\u0026 \r\n            get_line_object.cuni == get_unit_array[k] \u0026\u0026\r\n            get_line_object.pric == get_price_array[k] \u0026\u0026\r\n            get_line_object.cvat == get_tax_array[k] \u0026\u0026\r\n            get_line_object.ceno == get_tax_certificate_array[k] \u0026\u0026\r\n            get_line_object.disc == get_discount_array[k]){\r\n            return true\r\n        }\r\n\r\n    }\r\n\r\n    return false\r\n}\r\n\r\n// function generate_query_interim_header(input_data_object){\r\n//     output_query = 'INSERT INTO {{interim_einv_header}} (e_inv_no,comp,tran,idoc,doct,src_line_cnt,dataset)' +\r\n//                     \" VALUES('\"+ input_data_object.e_inv_no + \"',\" + input_data_object.comp + \",'\" + input_data_object.tran + \"',\" +\r\n//                     input_data_object.idoc + \",'\" + input_data_object.doct + \"',\" + input_data_object.line_cnt + \",'\" +\r\n//                     input_data_object.dataset + \"');\"\r\n//     CralUtil.LogInfo(\"Sum Qty's by Item\",\"Interim Header Generated Query\",output_query)\r\n//     return output_query\r\n// }\r\n\r\n// function generate_query_interim_line(input_data_object){\r\n//     output_query = 'INSERT INTO {{interim_einv_line}} (e_inv_no,line,cuni,ccty,clas_grp,clas,item,item_desc,' + \r\n//                     'pric,pvat,txai,ceno,amtt,stot,amti,dqua,disc,ldai,ccde,feer,feea,disc_reason,fee_reason,err_msg,tax_type)' +\r\n//                     \" VALUES('\"+ input_data_object.e_inv_no + \"',\" + input_data_object.line + \",'\" + input_data_object.cuni + \"','\" +\r\n//                     input_data_object.ccty + \"','\" + input_data_object.clas_grp + \"','\" + input_data_object.clas + \"','\" +\r\n//                     input_data_object.item + \"','\" + input_data_object.item_desc + \"',\" + input_data_object.pric + ',' +\r\n//                     input_data_object.pvat + ',' + input_data_object.txai + \",'\" + input_data_object.ceno + \"',\" +\r\n//                     input_data_object.amtt + ',' + input_data_object.stot + ',' + input_data_object.amti + ',' +\r\n//                     input_data_object.dqua + ',' + input_data_object.disc + ',' + input_data_object.ldai + \",'\" +\r\n//                     input_data_object.ccde + \"',\" + input_data_object.feer + ',' + input_data_object.feea + \",'\" +\r\n//                     input_data_object.disc_reason + \"','\" + input_data_object.fee_reason + \"','\" + input_data_object.err_msg + \"','\" +\r\n//                     input_data_object.cvat + \"');\"\r\n//     CralUtil.LogInfo(\"Sum Qty's by Item\",\"Interim Line Generated Query\",output_query)\r\n//     return output_query\r\n// }\r\n\r\nfunction generate_query_interim_header(input_data_object){\r\n    output_query = `INSERT INTO {{interim_einv_header}} (e_inv_no,comp,tran,idoc,doct,src_line_cnt,dataset) VALUES('${input_data_object.e_inv_no}',${input_data_object.comp},'${input_data_object.tran}',${input_data_object.idoc},'${input_data_object.doct}',${input_data_object.line_cnt},'${input_data_object.dataset}');`\r\n    CralUtil.LogInfo(\"Sum Qty's by Item\",\"Interim Header Generated Query\",output_query)\r\n    return output_query\r\n}\r\n\r\nfunction generate_query_interim_line(input_data_object){\r\n    output_query = `INSERT INTO {{interim_einv_line}} (e_inv_no,line,cuni,ccty,clas_grp,clas,item,item_desc,pric,pvat,txai,ceno,amtt,stot,amti,dqua,disc,ldai,ccde,feer,feea,disc_reason,fee_reason,err_msg,tax_type) VALUES('${input_data_object.e_inv_no}',${input_data_object.line},'${input_data_object.cuni}','${input_data_object.ccty}','${input_data_object.clas_grp}','${input_data_object.clas}','${input_data_object.item}','${input_data_object.item_desc.replaceAll(\"'\",\"' || chr(39) || '\")}',${input_data_object.pric},${input_data_object.pvat},${input_data_object.txai},'${input_data_object.ceno}',${input_data_object.amtt},${input_data_object.stot},${input_data_object.amti},${input_data_object.dqua},${input_data_object.disc},${input_data_object.ldai},'${input_data_object.ccde}',${input_data_object.feer},${input_data_object.feea},'${input_data_object.disc_reason}','${input_data_object.fee_reason}','${input_data_object.err_msg}','${input_data_object.cvat}');`\r\n    CralUtil.LogInfo(\"Sum Qty's by Item\",\"Interim Line Generated Query\",output_query)\r\n    return output_query\r\n}\r\n\r\n// function insert_to_interim_line(input_data_object){\r\n//     output_data_object = {\r\n//         \"e_inv_no\" : input_data_object.e_inv_no,\r\n//         \"line\" : input_data_object.line,\r\n//         \"cuni\" : input_data_object.cuni,\r\n//         \"ccty\" : input_data_object.ccty,\r\n//         \"clas_grp\" : input_data_object.clas_grp,\r\n//         \"clas\" : input_data_object.clas,\r\n//         \"item\" : input_data_object.item,\r\n//         \"item_desc\" : input_data_object.item_desc,\r\n//         \"pric\" : input_data_object.pric,\r\n//         \"pvat\" : input_data_object.pvat,\r\n//         \"txai\" : input_data_object.txai,\r\n//         \"ceno\" : input_data_object.ceno,\r\n//         \"amtt\" : input_data_object.amtt,\r\n//         \"stot\" : input_data_object.stot,\r\n//         \"amti\" : input_data_object.amti,\r\n//         \"dqua\" : input_data_object.dqua,\r\n//         \"disc\" : input_data_object.disc,\r\n//         \"ldai\" : input_data_object.ldai,\r\n//         \"ccde\" : input_data_object.ccde,\r\n//         \"feer\" : input_data_object.feer,\r\n//         \"feea\" : input_data_object.feea,\r\n//         \"disc_reason\" : input_data_object.disc_reason,\r\n//         \"fee_reason\" : input_data_object.fee_reason,\r\n//         \"err_msg\" : input_data_object.err_msg\r\n//     }\r\n//     return output_data_object\r\n// }"
        },
        {
            "Bizobj": {
                "ObjectName": "printReport",
                "Description": "printReportLayout",
                "external": false
            },
            "Script": "//**** Business Object printReport Created by parthi on 27-Jun-2024 19:25:25 ****//\r\n\r\nlet vld_date;\r\nfunction printReportLayout(e_inv_no, qr_link, lhdn_vld){\r\n    vld_date = lhdn_vld\r\n   \r\n    headerArray =[]\r\n    einv_header = CralDB.QueryByComp(\"select * from {{einv_header}} where e_inv_no='$1'\",jscall.company,e_inv_no)\r\n   \r\n    if(einv_header.length != 0){\r\n        supcomp = CralDB.QueryByComp(\"select sup_name, sup_email, sup_cont_num, sup_adrs,def_type, free_trade from {{supplier_companies}} where sup_company = '$1'\",jscall.company,einv_header[0].comp)\r\n       \r\n        if(einv_header[0].sctg == \"20\"){\r\n            \r\n            if(supcomp[0].free_trade == \"\"){\r\n                salectg = supcomp[0].def_type\r\n            }else{\r\n                salectg = supcomp[0].free_trade\r\n            }\r\n        }else{\r\n            salectg = supcomp[0].def_type\r\n        }\r\n\r\n        if (!salectg){\r\n            return {\r\n                \"error\": \"Default Layout Type is not Maintained.\",\r\n                \"result\": \"\"\r\n            }\r\n        }\r\n        // Check for Custom Report and Print it.\r\n        let customReportDetails = getCustomReport(e_inv_no)\r\n        if (customReportDetails.rpt_id){\r\n            if (Reports.GetReport(customReportDetails.rpt_id).ReportID){\r\n                pdf_result = Reports.GenerateReportWithCustomVars(customReportDetails.rpt_id, jscall.company, customReportDetails.cus_var, e_inv_no)\r\n                if (!pdf_result?.Error \u0026\u0026 pdf_result?.ResourceID){\r\n                    Resources.UpdateResource(pdf_result.ResourceID, `${e_inv_no}.pdf`)\r\n                    return {\r\n                        \"error\": \"\",\r\n                        \"result\": pdf_result.ResourceID\r\n                    }\r\n                } else {\r\n                    return {\r\n                        \"error\": pdf_result?.Error,\r\n                        \"result\": pdf_result?.ResourceID\r\n                    }\r\n                }\r\n            } else {\r\n                return {\r\n                    \"error\": `Custom Report ${customReportDetails.rpt_id} Not Found.`,\r\n                    \"result\": \"\"\r\n                }\r\n            }\r\n        } \r\n\r\n        // Checking validation print report layout\r\n        \r\n        var reportHeader = CralDB.QueryByComp(\"select * from {{rep_layouts_header}} where layout_code='$1'\", jscall.company, salectg)\r\n        if (reportHeader[0].is_report == true){\r\n            \r\n            pdf_result = Reports.GenerateReport(reportHeader[0].report_name ? reportHeader[0].report_name : salectg, jscall.company, e_inv_no)\r\n            if (!pdf_result?.Error \u0026\u0026 pdf_result?.ResourceID){\r\n                Resources.UpdateResource(pdf_result.ResourceID, `${e_inv_no}.pdf`)\r\n                return {\r\n                    \"error\": \"\",\r\n                    \"result\": pdf_result.ResourceID\r\n                }\r\n            } else {\r\n                return {\r\n                    \"error\": pdf_result?.Error,\r\n                    \"result\": pdf_result?.ResourceID\r\n                }\r\n            }\r\n        }\r\n        if(reportHeader.length != 0){\r\n        \r\n            var LayoutValidation= {\r\n                    \"repeatreportheader\": reportHeader[0].r_rep_head,\r\n                    \"repeatgroupheader\": reportHeader[0].r_grp_head,\r\n                    \"repeatreportfooter\": reportHeader[0].r_footer,\r\n                    \"pagenumber\": reportHeader[0].page_no,\r\n                    \"orientation\": reportHeader[0].rep_format,\r\n                    \"uniqueid\": e_inv_no,\r\n                    \"font\": reportHeader[0].font\r\n                }\r\n       \r\n            reportLine = returnObjValues(reportHeader, e_inv_no,supcomp, qr_link,salectg);\r\n        //  return reportLine\r\n        }else{\r\n            jscall_error = \"Given Report layout not maintain supplier company table\"\r\n            return false\r\n        }\r\n        response = {\r\n            LayoutValidation,\r\n            ReportHeader,\r\n            GroupHeaderLeft,\r\n            GroupHeaderRight,\r\n            Details,\r\n            DetailFooter,\r\n            Taxdetails,\r\n            ReportFooter,\r\n            QRData,\r\n            LogoPath\r\n        }\r\n        \r\n        var pdfObj = PrintPDF.PrintPDFMain(JSON.stringify(response))\r\n\r\n        if(pdfObj == \"\"){\r\n\r\n            var result = Resources.CreateResource(\"PDF\",\"./PrintPDF/PDFs/\"+e_inv_no+\".pdf\")\r\n            return result\r\n            \r\n        }else{\r\n            return {\r\n                \"error\": pdfObj,\r\n                \"result\": \"\"\r\n            }  \r\n        }\r\n    }else{\r\n        jscall_error = \"No Data Found\"\r\n    }\r\n   \r\n}\r\n\r\nexports.printReportLayout = printReportLayout\r\n\r\nfunction getCustomReport(einv_number){\r\n    custom_rpts = CralDB.QueryByComp(`select DISTINCT report_id,criteria from {{rpt_parameter}} order by report_id,criteria`, jscall.company)\r\n    if (custom_rpts.length){\r\n        for (let i=0; i\u003ccustom_rpts.length; i++){\r\n            rpt_criteria = CralDB.QueryByComp(`select * from {{rpt_parameter}} where report_id='${custom_rpts[i].report_id}' and criteria=${custom_rpts[i].criteria}`, jscall.company)\r\n            // return rpt_criteria\r\n            // return checkCustomReportCode(rpt_criteria, einv_number)\r\n            customReport = checkCustomReportCode(rpt_criteria, einv_number)\r\n            if (customReport){\r\n                return {\r\n                    \"rpt_id\": custom_rpts[i].report_id, \r\n                    \"cus_var\": getCustomVariables(rpt_criteria, einv_number)\r\n                }\r\n            } else {\r\n                continue\r\n            }\r\n        }\r\n    } //else {\r\n    //     return {\r\n    //         \"rpt_id\": \"\", \r\n    //         \"cus_var\": {}\r\n    //     }\r\n    // }\r\n    return {\r\n        \"rpt_id\": \"\", \r\n        \"cus_var\": {}\r\n    }\r\n}\r\nexports.getCustomReport = getCustomReport\r\n\r\nfunction checkCustomReportCode(criteria, einv_number){\r\n    let query = `select e_inv_no from {{einv_header}} where e_inv_no='${einv_number}'`\r\n    criteria.forEach(data =\u003e {\r\n        if (!data.is_cus_var){\r\n            query += ` and (${data.field_name} ${data.condition.replaceAll('or', `or ${data.field_name} `).replaceAll('and', `and ${data.field_name} `)})`\r\n        }\r\n    })\r\n    debug(query)\r\n    if (CralDB.QueryByComp(query, jscall.company).length){\r\n        return true\r\n    } else {\r\n        return false\r\n    }\r\n}\r\n\r\nfunction getCustomVariables(criteria, einv_number){\r\n    let results = {}\r\n    criteria.forEach(data =\u003e {\r\n        if (data.is_cus_var){\r\n            check_query = `select e_inv_no from {{einv_header}} where e_inv_no='${einv_number}' and ${data.field_name} ${data.condition.replace('or', `or ${data.field_name} `).replace('and', `and ${data.field_name} `)}`\r\n            if (CralDB.QueryByComp(check_query, jscall.company).length) {\r\n                results[data.cus_var_key] = data.cus_var_value\r\n            }\r\n        }\r\n    })\r\n    return results\r\n}\r\n\r\nfunction returnObjValues(reportHeader, e_inv_no,supcomp, qr_link,salectg) {\r\n    // return einv_header[0].tote\r\n    if(reportHeader[0].back_clr_head == \"\"){\r\n        RH = 255\r\n        GH = 255\r\n        BH = 255\r\n        AH = 1\r\n    }else{\r\n\r\n        if(reportHeader[0].back_clr_head.length \u003c 10){ //*  Report Header Background Color (hex to RGB)\r\n\r\n            var colorVal_Header = hexToRGB(reportHeader[0].back_clr_head);\r\n            \r\n            if(colorVal_Header.a == \"null\"){\r\n                \r\n                RH = colorVal_Header.r \r\n                GH = colorVal_Header.g\r\n                BH = colorVal_Header.b\r\n                AH = 1\r\n            \r\n            }else{\r\n                RH = colorVal_Header.r \r\n                GH = colorVal_Header.g\r\n                BH = colorVal_Header.b\r\n                AH = colorVal_Header.a\r\n                \r\n            }\r\n            \r\n        }else{\r\n            var colorVal_Header = rgbaToRgb(reportHeader[0].back_clr_head) //* (RGBA to RGB)\r\n\r\n            RH = colorVal_Header.r \r\n            GH = colorVal_Header.g\r\n            BH = colorVal_Header.b\r\n            AH = colorVal_Header.a\r\n        }\r\n    }\r\n    if(reportHeader[0].back_clr_footer == \"\"){\r\n        RL = 255\r\n        GL = 255\r\n        BL = 255\r\n        AL = 1\r\n    }else{\r\n        if(reportHeader[0].back_clr_footer.length \u003c 10){ //* Report Footer Background color (hex to RGB)\r\n\r\n            var colorVal_Line = hexToRGB(reportHeader[0].back_clr_footer);\r\n\r\n            if(colorVal_Line.a == \"null\" ){\r\n                \r\n                RL = colorVal_Line.r \r\n                GL = colorVal_Line.g\r\n                BL = colorVal_Line.b\r\n                AL = 1\r\n                \r\n            }else{\r\n                RL = colorVal_Line.r \r\n                GL = colorVal_Line.g\r\n                BL = colorVal_Line.b\r\n                AL = colorVal_Line.a\r\n                \r\n            }\r\n        \r\n        }else{\r\n            var colorVal_Line = rgbaToRgb(reportHeader[0].back_clr_footer) //* (RGBA to RGB)\r\n\r\n            RL = colorVal_Line.r \r\n            GL = colorVal_Line.g\r\n            BL = colorVal_Line.b\r\n            AL = colorVal_Line.a\r\n        }\r\n    }\r\n    if(reportHeader[0].back_clr_table == \"\"){\r\n        RT = 236\r\n        GT = 236\r\n        BT = 236\r\n        AT = 1\r\n    }else{\r\n\r\n        if(reportHeader[0].back_clr_table.length \u003c 10){ //* Report Table Header Color (Hex to RGB)\r\n\r\n            var colorVal_TblHeader = hexToRGB(reportHeader[0].back_clr_table);\r\n\r\n            if(colorVal_TblHeader.a == \"null\" ){\r\n                \r\n                RT = colorVal_TblHeader.r \r\n                GT = colorVal_TblHeader.g\r\n                BT = colorVal_TblHeader.b\r\n                AT = 1\r\n                \r\n            }else{\r\n                RT = colorVal_TblHeader.r \r\n                GT = colorVal_TblHeader.g\r\n                BT = colorVal_TblHeader.b\r\n                AT = colorVal_TblHeader.a\r\n                \r\n            }\r\n        }else{\r\n            var colorVal_TblHeader = rgbaToRgb(reportHeader[0].back_clr_table)//* (RGBA to RGB)\r\n                \r\n            RT = colorVal_TblHeader.r \r\n            GT = colorVal_TblHeader.g\r\n            BT = colorVal_TblHeader.b\r\n            AT = colorVal_TblHeader.a\r\n                \r\n        }\r\n    }\r\n    // stateCode = CralDB.QueryByComp(\"select src_dsca from {{map_state_codes}} where data_set='$1' and src_cste ='$2' and src_ccty ='$3'\",jscall.company,einv_header[0].dataset,einv_header[0].sup_cste,einv_header[0].sup_country)\r\n    stateCode = CralDB.QueryByComp(\"select dsca from {{state_codes}} where code ='$1'\",jscall.company,einv_header[0].sup_cste)\r\n    countryCodesup = CralDB.QueryByComp(\"select dsca from {{country}} where ccty ='$1'\",jscall.company,einv_header[0].sup_country)\r\n\r\n    sup_adrLine = []\r\n\r\n    if (einv_header[0].sup_adrs_line0)sup_adrLine.push(` ${einv_header[0].sup_adrs_line0}`);\r\n    if (einv_header[0].sup_adrs_line1)sup_adrLine.push(` ${einv_header[0].sup_adrs_line1}`);\r\n    if (einv_header[0].sup_adrs_line2)sup_adrLine.push(` ${einv_header[0].sup_adrs_line2}`);\r\n    if (einv_header[0].sup_postal_zone)sup_adrLine.push(` ${einv_header[0].sup_postal_zone}`);\r\n    if (einv_header[0].sup_city)sup_adrLine.push(` ${einv_header[0].sup_city}`);\r\n    if (stateCode.length != 0){\r\n        sup_adrLine.push(` ${stateCode[0].dsca}`);\r\n    }\r\n    if (countryCodesup.length != 0){\r\n        sup_adrLine.push(  `${\" \"+countryCodesup[0].dsca}`)\r\n    }\r\n    suplierAddress = sup_adrLine.join(',') //* Get Supplier Address if any empty space tirm the that space condition\r\n\r\n    stateCodebuy = CralDB.QueryByComp(\"select dsca from {{state_codes}} where code ='$1'\",jscall.company,einv_header[0].buy_cste)\r\n    countryCodebuy = CralDB.QueryByComp(\"select dsca from {{country}} where ccty ='$1'\",jscall.company,einv_header[0].buy_country)\r\n    addressLines = [];\r\n    // return countryCodebuy\r\n    // Check each field and add it to the array if it's not empty\r\n    if (einv_header[0].buy_adrs_line0)  addressLines.push(` ${einv_header[0].buy_adrs_line0}`);\r\n    if (einv_header[0].buy_adrs_line1)  addressLines.push(` ${einv_header[0].buy_adrs_line1}`);\r\n    if (einv_header[0].buy_adrs_line2)  addressLines.push(` ${einv_header[0].buy_adrs_line2}`);\r\n    if (einv_header[0].buy_postal_zone) addressLines.push(` ${einv_header[0].buy_postal_zone}`);\r\n    if (einv_header[0].buy_city)        addressLines.push(` ${einv_header[0].buy_city}`);\r\n\r\n    if (stateCodebuy.length != 0){\r\n        // if (stateCode[0].src_dsca)sup_adrLine.push(` ${stateCode[0].src_dsca}`);\r\n        addressLines.push(` ${stateCodebuy[0].dsca}`); //* Get Buyer Address if any empty space tirm the that space condition\r\n    }\r\n    if (countryCodebuy.length != 0) {\r\n        addressLines.push(` ${countryCodebuy[0].dsca}`)\r\n    }\r\n    // Join the non-empty lines into a single string separated by newline characters\r\n    addressString = addressLines.join(',')\r\n    // return addressString\r\n\r\n    einv_line = CralDB.QueryByComp(\"select * from {{einv_lines}} where e_inv_no='$1' order by line\",jscall.company,e_inv_no)\r\n    einv_line_tax = CralDB.QueryByComp(\"select sum(amti),cvat,pvat from {{einv_lines}} where e_inv_no='$1' group by cvat,pvat \",jscall.company,e_inv_no)\r\n    \r\n    rep_line_detail = CralDB.QueryByComp(\"select field_name,seq from {{rep_layouts_line}} where layout_code ='$1' and print = true and grp_typ ='Detail' order by seq\", jscall.company, salectg);\r\n    rep_line_detail_footer = CralDB.QueryByComp(\"select field_name,seq from {{rep_layouts_line}} where layout_code ='$1' and print = true and grp_typ = 'Detail Footer' order by seq\", jscall.company, salectg);\r\n    rep_line_footer = CralDB.QueryByComp(\"select field_name,seq from {{rep_layouts_line}} where layout_code ='$1' and print = true and grp_typ = 'Footer' order by seq\", jscall.company, salectg);\r\n    rep_line_group_header = CralDB.QueryByComp(\"select field_name,seq from {{rep_layouts_line}} where layout_code ='$1' and print = true and grp_typ = 'Group Header' order by seq\", jscall.company, salectg);\r\n    rep_line_report_header = CralDB.QueryByComp(\"select field_name,seq from {{rep_layouts_line}} where layout_code ='$1' and print = true and grp_typ = 'Report Header' order by seq\", jscall.company, salectg);\r\n    // var currentDate = dateValidation()\r\n    \r\n    var Values = []\r\n    var values = []\r\n\r\n    subTotal = 0\r\n   \r\n\r\n    if(einv_line_tax.length != 0){\r\n        \r\n        for(var j = 0; j \u003c einv_line_tax.length; j++){\r\n\r\n             row = []\r\n\r\n            for (var line_t = 0; line_t \u003c rep_line_footer.length; line_t++){\r\n                tot_serv_pric = einv_line_tax[j].sum.toFixed(2)\r\n                switch (rep_line_footer[line_t].field_name){\r\n\r\n                    case \"Total Product / Service Price\":\r\n                        if(tot_serv_pric == \"\"){\r\n                            row.push({ \"value\": \"0.00\"})\r\n                        }else{\r\n                            row.push({ \"value\": tot_serv_pric })\r\n                        }\r\n                        break;\r\n                    case \"Tax Type\":\r\n                        if(einv_line_tax[j].cvat == \"\"){\r\n                            row.push({ \"value\": \"-\" })\r\n                        }else{\r\n                            row.push({ \"value\": einv_line_tax[j].cvat })\r\n                        }\r\n                        break;\r\n                    case \"Tax Rate\":\r\n                        if( einv_line_tax[j].pvat == \"\"){\r\n                            row.push({\"value\": \"0\"})\r\n                        }else{\r\n                            row.push({\"value\": einv_line_tax[j].pvat.toString()})\r\n                        }\r\n                        break;\r\n                    case \"Tax Amount\":\r\n                        if(einv_header[0].tott == \"\"){\r\n                            row.push({\"value\": \"0.00\"})\r\n                        }else{\r\n                            row.push({\"value\": einv_line[j].txai.toFixed(2).toString()})\r\n                            // row.push({\"value\": einv_header[0].tott.toString()})\r\n                        }\r\n                        break;\r\n                \r\n                }\r\n            }\r\n\r\n            values.push({\r\n                \"row\": row  \r\n            })\r\n\r\n            \r\n        }\r\n    }else{\r\n\r\n        jscall_error = \"No data found in E-Invoice table\"\r\n        return false\r\n    }\r\n        \r\n    if (rep_line_report_header.length == 0){\r\n        jscall_error = \"Invalid Report Header Fields\"\r\n        return false \r\n    }else{\r\n\r\n        Namedvalues =[]\r\n\r\n        // report_header = CralDB.QueryByComp(\"select max(seq) from {{rep_layouts_line}} where layout_code='$1' and print=true and grp_typ='Report Header'\", jscall.company, salectg);\r\n\r\n        for(var hseqn = 0; hseqn \u003c rep_line_report_header.length; hseqn++){\r\n            Namedvalues.push({ \"FieldName\": rep_line_report_header[hseqn].field_name, \"FieldValue\": get_report_header_Value(rep_line_report_header[hseqn].field_name) })\r\n        }\r\n        \r\n        \r\n        supAdrress = CralDB.QueryByComp(\"select * from {{address_master}} where adrs_code = '$1'\",jscall.company,supcomp[0].sup_adrs)\r\n\r\n        stateCodesup = CralDB.QueryByComp(\"select src_dsca,dsca from {{map_state_codes}} where src_cste='$1' and src_ccty='$2'\",jscall.company,supAdrress[0].adrs_state,supAdrress[0].adrs_country)\r\n        countyCodesup = CralDB.QueryByComp(\"select src_dsca,dsca from {{country_codes}} where src_ccty='$1'\",jscall.company,supAdrress[0].adrs_country)\r\n        // return countyCodesup\r\n        // return supAdrress[0].data_set\r\n        supAdre = [];\r\n\r\n        if (supAdrress[0].adrs_line0)supAdre.push(` ${supAdrress[0].adrs_line0}`);\r\n        if (supAdrress[0].adrs_line1)supAdre.push(` ${supAdrress[0].adrs_line1}`);     \r\n        if (supAdrress[0].adrs_line2)supAdre.push(` ${supAdrress[0].adrs_line2}`);\r\n        if (supAdrress[0].postal_zone)supAdre.push(` ${supAdrress[0].postal_zone}`);\r\n        if (supAdrress[0].adrs_city)supAdre.push(` ${supAdrress[0].adrs_city}`);\r\n        if (stateCodesup.length !== 0){\r\n            supAdre.push(` ${stateCodesup[0].dsca}`);\r\n        }\r\n        if (countyCodesup[0].dsca)supAdre.push(` ${countyCodesup[0].dsca}`);\r\n        address_sup = supAdre.join(',');\r\n        \r\n        ReportHeader = {\r\n            \"bgcolor\": {\r\n                \"r\": RH,\r\n                \"g\": GH,\r\n                \"b\": BH,\r\n                \"a\": AH\r\n            },\r\n            \"Title\": supcomp[0].sup_name,\r\n            \"Directvalues\": [\r\n                \r\n                { \"value\": address_sup.trim() },\r\n                { \"value\": \"Contact No: \"+supcomp[0].sup_cont_num+\" \"+\"Mail ID: \"+supcomp[0].sup_email}\r\n                \r\n            ],\r\n            \"Namedvalues\": Namedvalues\r\n            \r\n        }\r\n    }\r\n    if(rep_line_group_header.length == 0 ){\r\n\r\n        jscall_error = \"Invalid Report Group Header Fields\"\r\n        return false\r\n\r\n    }else{\r\n\r\n        Namedvalues = []\r\n        NamedValues = []\r\n        \r\n        // group_header = CralDB.QueryByComp(\"select max(seq) from {{rep_layouts_line}} where layout_code='$1' and print=true and grp_typ='Group Header'\", jscall.company, salectg);\r\n        \r\n        for(var seqn = 0; seqn \u003c rep_line_group_header.length; seqn++){\r\n\r\n            if(rep_line_group_header[seqn].field_name == \"Buyer TIN\" || rep_line_group_header[seqn].field_name == \"Buyer Name\" || rep_line_group_header[seqn].field_name == \"Buyer Reg.No\" || rep_line_group_header[seqn].field_name == \"Buyer SST reg.ID\" || rep_line_group_header[seqn].field_name == \"Contact Number\" || rep_line_group_header[seqn].field_name == \"Address\" || rep_line_group_header[seqn].field_name == \"Buyer Exemption Number\" || rep_line_group_header[seqn].field_name == \"Bill Reference Number\"){\r\n            \r\n                Namedvalues.push({ \"FieldName\": rep_line_group_header[seqn].field_name, \"FieldValue\": get_grp_header(rep_line_group_header[seqn].field_name) })    \r\n            }else{\r\n                NamedValues.push({ \"FieldName\": rep_line_group_header[seqn].field_name, \"FieldValue\": get_grp_header(rep_line_group_header[seqn].field_name) })\r\n\r\n            }\r\n        }\r\n\r\n        GroupHeaderLeft = {\r\n            \"Title\": \"Supplier Info\",\r\n            \"Namedvalues\": NamedValues\r\n            \r\n        }\r\n        GroupHeaderRight = {\r\n            \"Title\": \"Buyer Info\",\r\n            \"Namedvalues\": Namedvalues\r\n            \r\n        }\r\n    }\r\n    if(rep_line_detail.length == 0){\r\n\r\n        jscall_error = \"Invalid Report Detail Fields\"\r\n        return false\r\n\r\n    }else{\r\n\r\n        if (einv_line.length != 0) {\r\n            \r\n            for(var i = 0; i \u003c einv_line.length; i++){\r\n                subTotal = subTotal + einv_line[i].stot\r\n                row = []\r\n\r\n                for (line_t = 0; line_t \u003c rep_line_detail.length; line_t++){\r\n                    switch (rep_line_detail[line_t].field_name){\r\n                       \r\n                        case \"Classification\":\r\n                            row.push({ \"value\": einv_line[i].clas })\r\n                            break;\r\n                        case \"Item\":\r\n                            row.push({ \"value\":einv_line[i].item })\r\n                            break;\r\n                        case \"Item Description\":\r\n                            row.push({ \"value\": einv_line[i].item_desc })\r\n                            break;\r\n                        case \"Qty\":\r\n                            row.push({\"value\": einv_line[i].dqua.toString()})\r\n                            break;\r\n                        case \"Unit Price\":\r\n                            row.push({\"value\": einv_line[i].pric.toFixed(2).toString()})\r\n                            break;\r\n                        case \"Disc\":\r\n                            row.push({\"value\": einv_line[i].disc.toString()})\r\n                            break;\r\n                        case \"Amount\":\r\n                            row.push({\"value\": einv_line[i].amti.toFixed(2).toString()})\r\n                            break;\r\n                        case \"Tax Amount\":\r\n                            row.push({\"value\": einv_line[i].txai.toFixed(2).toString()})\r\n                            break;\r\n                        case \"Total Product / Service(Incl.Tax)\":\r\n                            // row.push({\"value\": einv_line[i].amti.toString()})\r\n                            row.push({\"value\": (einv_line[i].amti + einv_line[i].txai).toFixed(2).toString()})\r\n                            break;\r\n                    }\r\n                }\r\n\r\n                Values.push({\r\n                    \"row\": row\r\n                })\r\n\r\n            }\r\n        }else{\r\n\r\n            jscall_error = \"No data found in E-Invoice Line\"\r\n            return false\r\n\r\n        }\r\n        \r\n        Titles = []\r\n        // detail = CralDB.QueryByComp(\"select max(seq) from {{rep_layouts_line}} where layout_code='$1' and print = true and grp_typ='Detail'\", jscall.company, salectg);\r\n        \r\n        for(var dseq = 0; dseq \u003c rep_line_detail.length; dseq++){\r\n            if(rep_line_detail[dseq].field_name == \"Unit Price\" || rep_line_detail[dseq].field_name == \"Amount\" || rep_line_detail[dseq].field_name == \"Total Product / Service(Incl.Tax)\"){\r\n                \r\n                Titles.push({ \"Title\": rep_line_detail[dseq].field_name+\" (\"+einv_header[0].ccur+\")\" , \"type\": \"string\", \"Length\": getLength(rep_line_detail[dseq].field_name) })\r\n           \r\n            }else{    \r\n            \r\n                Titles.push({ \"Title\": rep_line_detail[dseq].field_name , \"type\": \"string\", \"Length\": getLength(rep_line_detail[dseq].field_name) })\r\n            \r\n            }\r\n        }\r\n\r\n        Details = {\r\n            \"bgcolor\": {\r\n                \"r\": RT,\r\n                \"g\": GT,\r\n                \"b\": BT,\r\n                \"a\": AT\r\n            },\r\n            \"Titles\": Titles,\r\n            \"Values\": Values\r\n        }   \r\n    }\r\n    if(rep_line_detail_footer.length == 0){\r\n        jscall_error = \"Invalid Report Detail Footer Fields\"\r\n        return false\r\n    }else{\r\n\r\n        DetailFooter = []\r\n\r\n        // detail_footer = CralDB.QueryByComp(\"select max(seq) from {{rep_layouts_line}} where layout_code='$1' and print=true and grp_typ='Detail Footer'\", jscall.company, salectg);\r\n\r\n        for(var dfseqn = 0; dfseqn \u003c rep_line_detail_footer.length; dfseqn++){\r\n            DetailFooter.push({ \"FieldName\": rep_line_detail_footer[dfseqn].field_name, \"FieldValue\": get_detail_footer_Value(rep_line_detail_footer[dfseqn].field_name) })           \r\n        }\r\n        \r\n    }\r\n    if(rep_line_footer.length == 0){\r\n\r\n        jscall_error = \"Invalid Report Line Footer Fields\"\r\n        return false\r\n\r\n    }else{\r\n\r\n        Titles = []\r\n        Namedvalues =[]\r\n\r\n        // footer = CralDB.QueryByComp(\"select max(seq) from {{rep_layouts_line}} where layout_code='$1' and print=true and grp_typ='Footer'\", jscall.company, salectg);\r\n\r\n        for(var fseq = 0; fseq \u003c rep_line_footer.length; fseq++){\r\n            if(rep_line_footer[fseq].field_name !== \"Date \u0026 Time of Validation\" \u0026\u0026 rep_line_footer[fseq].field_name !== \"Digital Signature\"){\r\n                Titles.push({ \"Title\": rep_line_footer[fseq].field_name, \"type\": \"string\", \"Length\": lineFooterLenth(rep_line_footer[fseq].field_name) })\r\n            }else{\r\n                Namedvalues.push({ \"FieldName\": rep_line_footer[fseq].field_name, \"FieldValue\": get_field_ValuesLF(rep_line_footer[fseq].field_name) })\r\n            }\r\n        }\r\n\r\n        Taxdetails = {\r\n            \"Titles\": Titles,\r\n            \"Values\": values\r\n        }\r\n        ReportFooter = {\r\n            \"bgcolor\": {\r\n                \"r\": RL,\r\n                \"g\": GL,\r\n                \"b\": BL,\r\n                \"a\": AL\r\n            },\r\n            \"Namedvalues\": Namedvalues\r\n            \r\n        }\r\n    }   \r\n        \r\n        QRData= qr_link\r\n        \r\n        LogoPath = \"C:\\Logo\\pngtree-salon-logo-png-image_4004444.png\"\r\n\r\n    return {\r\n        ReportHeader,\r\n        GroupHeaderLeft,\r\n        GroupHeaderRight,\r\n        Details,\r\n        DetailFooter,\r\n        Taxdetails,\r\n        ReportFooter,\r\n        QRData,\r\n        LogoPath\r\n        }\r\n}\r\nfunction get_report_header_Value(rep_fieldname){\r\n   \r\n    switch(rep_fieldname){\r\n       \r\n        case \"E-Invoice Type\":\r\n            if(einv_header[0].doct == \"\"){\r\n                return \"\"\r\n            }\r\n            return einv_header[0].doct + \" - \" + CralDB.QueryByComp(\"select dsca from {{einv_doc_types}} where code='\" + einv_header[0].doct + \"'\", jscall.company)[0].dsca \r\n        case \"E-Invoice Version\":\r\n            return \"1.0\"\r\n        case \"E-Invoice Number\":\r\n            if(einv_header[0].e_inv_no == \"\"){\r\n                return \"\"\r\n            }\r\n            return einv_header[0].e_inv_no\r\n        case \"Unique Identifier No\":\r\n            if(einv_header[0].doc_uuid == \"\"){\r\n                return \"\"\r\n            }\r\n            return einv_header[0].doc_uuid\r\n        case \"Original Invoice Ref No\":\r\n            if(einv_header[0].org_e_inv_no == \"\"){\r\n                return \"\"\r\n            }\r\n            return einv_header[0].org_e_inv_no\r\n        case \"Date \u0026 Time\":\r\n            return dateValidation()\r\n        \r\n        \r\n    }\r\n}\r\nfunction get_grp_header(rep_fieldname){\r\n    \r\n    switch(rep_fieldname){\r\n        case \"Supplier Name\":\r\n            if(einv_header[0].sup_name == \"\"){\r\n                return \"\"\r\n            }\r\n            return einv_header[0].sup_name\r\n        case \"Supplier TIN\":\r\n            if(einv_header[0].sup_tin == \"\"){\r\n                return \"\"\r\n            }\r\n            return einv_header[0].sup_tin\r\n        case \"Supplier Reg No\":\r\n            if(einv_header[0].sup_reg_brn == \"\"){\r\n                return \"\"\r\n            }\r\n            return einv_header[0].sup_reg_brn\r\n        case \"Supplier SST ID\":\r\n            if(einv_header[0].sup_sst_reg == \"\"){\r\n                return \"\"\r\n            }\r\n            return einv_header[0].sup_sst_reg\r\n        case \"Supplier MSIC Code\":\r\n            if(einv_header[0].sup_misc == \"\"){\r\n                return \"\"\r\n            }\r\n            return einv_header[0].sup_msic\r\n        case \"Business Activity Description\":\r\n            if(einv_header[0].sup_badsca == \"\"){\r\n                return \"\"\r\n            }\r\n            return einv_header[0].sup_badsca\r\n        case \"Supplier Address\":\r\n            if(suplierAddress == \"\"){\r\n                return \"\"\r\n            }\r\n            return suplierAddress.trim()\r\n        case \"Supplier Contact\":\r\n            if(einv_header[0].sup_cont_num == \"\"){\r\n                return \"\"\r\n            }\r\n            return einv_header[0].sup_cont_num\r\n        case \"Supplier Mail\":\r\n            if(einv_header[0].sup_email == \"\"){\r\n                return \"\"\r\n            }\r\n            return einv_header[0].sup_email\r\n        case \"Buyer TIN\": \r\n            if(einv_header[0].buy_tin == \"\"){\r\n                return \"\"\r\n            }\r\n            return einv_header[0].buy_tin\r\n        case \"Buyer Name\":\r\n            if(einv_header[0].buy_name == \"\"){\r\n                return \"\"\r\n            }\r\n            return einv_header[0].buy_name\r\n        case \"Buyer Reg.No\":\r\n            if(einv_header[0].buy_reg_brn == \"\"){\r\n                return \"\"\r\n            }\r\n            return einv_header[0].buy_reg_brn\r\n        case \"Address\":\r\n            if(addressString == \"\"){\r\n                return \"\"\r\n            }\r\n            return addressString.trim()\r\n        case \"Contact Number\":\r\n            if(einv_header[0].buy_cont_num == \"\"){\r\n                return \"\"\r\n            }\r\n            return einv_header[0].buy_cont_num\r\n        case \"Buyer SST reg.ID\":\r\n            if(einv_header[0].buy_sst_reg == \"\"){\r\n                return \"\"\r\n            }\r\n            return einv_header[0].buy_sst_reg\r\n        case \"Buyer Exemption Number\":\r\n            if(einv_header[0].det_tax == \"\"){\r\n                return \"\"\r\n            }\r\n            return einv_header[0].det_tax\r\n        case \"Bill Reference Number\":\r\n            if(einv_header[0].bref == \"\"){\r\n                return \"\"\r\n            }\r\n            return einv_header[0].bref\r\n    }\r\n}\r\nfunction get_detail_footer_Value(rep_fieldname){\r\n\r\n    switch(rep_fieldname){\r\n\r\n        case \"Sub Total\":\r\n            // if(einv_header[0].tote == \"\"){\r\n            //     return \"0\"\r\n            // }\r\n            // // return einv_header[0].tote\r\n            // return einv_header[0].tote.toString()\r\n            if (subTotal == \"\"){\r\n                return \"0.00\"\r\n            }else{\r\n                return subTotal.toFixed(2).toString()\r\n            }\r\n\r\n        case \"Total Excluding Tax\":\r\n            if(einv_header[0].tote == \"\"){\r\n                return \"0.00\"\r\n            }\r\n            return einv_header[0].tote.toFixed(2).toString()\r\n        case \"Tax Amount\":\r\n            if(einv_header[0].tott == \"\"){\r\n                return \"0.00\"\r\n            }\r\n            return einv_header[0].tott.toFixed(2).toString()\r\n        case \"Total Including Tax\":\r\n            if(einv_header[0].toti == \"\"){\r\n                return \"0.00\"\r\n            }\r\n            return einv_header[0].toti.toFixed(2).toString()\r\n        case \"Total Payable Amount\":\r\n            if(einv_header[0].tpat == \"\"){\r\n                return \"0.00\"\r\n            }\r\n            return einv_header[0].tpat.toFixed(2).toString()\r\n\r\n    }\r\n}\r\nfunction get_field_ValuesLF(rep_fieldname){\r\n    switch(rep_fieldname){\r\n        case \"Date \u0026 Time of Validation\":\r\n            if(einv_header[0].etim){\r\n                return einv_header[0].etim\r\n            }\r\n            if(vld_date){\r\n                return vld_date\r\n            }\r\n            return \"\"\r\n        case \"Digital Signature\":\r\n            return \"\"\r\n\r\n    }\r\n}\r\n\r\nfunction getLength(rep_fieldname){\r\n    switch(rep_fieldname){\r\n        case \"Classification\":\r\n            return 20\r\n\r\n        case \"Item\":\r\n            return 20\r\n\r\n        case \"Item Description\":\r\n            return 30\r\n\r\n        case \"Qty\":\r\n            return 10\r\n\r\n        case \"Unit Price\":\r\n            return 20\r\n\r\n        case \"Disc\":\r\n            return 10\r\n\r\n        case \"Amount\":\r\n            return 20\r\n\r\n        case \"Tax Amount\":\r\n            return 20\r\n\r\n        case \"Total Product / Service(Incl.Tax)\":\r\n            return 30\r\n    \r\n        default: return 10\r\n\r\n    }            \r\n}\r\nfunction lineFooterLenth(rep_lineFieldName){\r\n    switch(rep_lineFieldName){\r\n        case \"Total Product / Service Price\":\r\n            return 40\r\n        case \"Tax Type\":\r\n            return 20\r\n        case \"Tax Rate\":\r\n            return 20\r\n        case \"Tax Amount\":\r\n            return 20\r\n\r\n        default : return 10\r\n    }\r\n}\r\nfunction hexToRGB(hex) {//calling function\r\n\r\n    // Ensure hex is a string\r\n    if (typeof hex !== 'string') {\r\n        throw new Error('Expected a string input');\r\n    }\r\n\r\n    // Remove the hash at the start if it's there\r\n    hex = hex.replace(/^#/, '');\r\n\r\n    // Parse the r, g, b values\r\n    let r, g, b;\r\n\r\n    if (hex.length === 3) {\r\n        \r\n        // Convert shorthand hex (e.g., #03F) to full form (e.g., #0033FF)\r\n        r = parseInt(hex[0] + hex[0], 16);\r\n        g = parseInt(hex[1] + hex[1], 16);\r\n        b = parseInt(hex[2] + hex[2], 16);\r\n\r\n    } else if (hex.length === 6) {\r\n\r\n        // Parse the hex string normally\r\n        r = parseInt(hex.slice(0, 2), 16);\r\n        g = parseInt(hex.slice(2, 4), 16);\r\n        b = parseInt(hex.slice(4, 6), 16);\r\n        a = \"null\"\r\n        // debug({ r, g, b, a })\r\n        return { r, g, b, a };\r\n\r\n    } else if (hex.length === 8) {\r\n        // Parse the hex string normally\r\n        r = parseInt(hex.slice(0, 2), 16);\r\n        g = parseInt(hex.slice(2, 4), 16);\r\n        b = parseInt(hex.slice(4, 6), 16);\r\n        a = parseInt(hex.slice(6, 8), 16) / 255;\r\n\r\n        return { r, g, b, a };\r\n\r\n    }else {\r\n       jscall_error = \"Invalid hexadecimal string\"\r\n       return false\r\n    }\r\n\r\n}\r\n\r\nfunction dateValidation(){\r\n\r\n    var currentDate = new Date()\r\n    var year = currentDate.getFullYear(); // Full year (e.g., 2024)\r\n    var month = String(currentDate.getMonth() +1).padStart(2, '0'); // Month (0-11, so add 1 for January to December)\r\n    var day = String(currentDate.getDate()).padStart(2, '0'); // Day of the month (1-31)\r\n\r\n    var hours = String(currentDate.getHours()).padStart(2, '0'); // Hours (0-23)\r\n    var minutes = String(currentDate.getMinutes()).padStart(2, '0'); // Minutes (0-59)\r\n    var seconds = String(currentDate.getSeconds()).padStart(2, '0'); // Seconds (0-59)\r\n\r\n    return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;\r\n}\r\n\r\nfunction rgbaToRgb(rgba) {\r\n\r\n    // Destructure the rgba values\r\n    const [r, g, b, a] = rgba.match(/\\d+(\\.\\d+)?/g).map(Number);\r\n\r\n    // Return the rgb values\r\n    return { r, g, b, a};\r\n}\r\nfunction convertIndiaToMalaysiaTimeManual() {\r\n    // Create a Date object for the current date and time in India\r\n    const nowIndia = new Date();\r\n\r\n    // Calculate the time difference in hours (Malaysia is 2.5 hours ahead of India)\r\n    const timeDifference = 2.5 * 60 * 60 * 1000;\r\n\r\n    // Get the time in milliseconds since the epoch for the current date and time in India\r\n    const timeInMilliseconds = nowIndia.getTime();\r\n\r\n    // Add the time difference to the current time in milliseconds\r\n    const malaysiaTimeInMilliseconds = timeInMilliseconds + timeDifference;\r\n\r\n    // Create a new Date object for the converted time\r\n    const nowMalaysia = new Date(malaysiaTimeInMilliseconds);\r\n\r\n    // Extract date components\r\n    const day = String(nowMalaysia.getDate()).padStart(2, '0');\r\n    const month = String(nowMalaysia.getMonth() + 1).padStart(2, '0'); // Months are zero-based\r\n    const year = nowMalaysia.getFullYear();\r\n    const hours = String(nowMalaysia.getHours()).padStart(2, '0');\r\n    const minutes = String(nowMalaysia.getMinutes()).padStart(2, '0');\r\n    const seconds = String(nowMalaysia.getSeconds()).padStart(2, '0');\r\n\r\n    // Format date and time as dd/mm/yyyy, HH:MM:SS\r\n    const formattedDate = `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;\r\n\r\n    return formattedDate;\r\n}\r\n"
        },
        {
            "Bizobj": {
                "ObjectName": "submitEinvoiceToPortal",
                "Description": "Submit the E-Invoice to Portal",
                "external": true
            },
            "Script": "//**** Business Object submitEinvoiceToPortal Created by malai on 24-Apr-2024 11:17:26 ****//\r\n\r\nlet header_err_msg = \"\"\r\nlet line_err_msg = \"\"\r\nlet isSumbyQty = false\r\nvar einvois = require(\"./scripts/Business_Objects/createEinvoice\")\r\nvar jsoncmp = require(\"./scripts/Business_Objects/json_sumqty_by_item\")\r\n// var jsoncmp = require(\"./scripts/Business_Objects/json_sumby_qty\")\r\n\r\nfunction submit_einv_to_portal(){\r\n    CralUtil.LogInfo(\"Einvois Input\", \"InvoiceCreation\", jscall.input)\r\n    entity_ds = CralDB.QueryByComp(`select sum_line250,sum_lineb250 from {{entity_data_set}} where sup_company=${jscall.input.comp} and data_set='${jscall.input.dataset}'`, jscall.company)\r\n    if (entity_ds.length == 0){\r\n        jscall_error = `Entity Data Set is Not Maintained for ${jscall.input.comp} - ${jscall.input.dataset}`\r\n        CralUtil.LogInfo(\"Einvois Output\", \"\", jscall_error)\r\n        return false;\r\n    } else {\r\n        if (entity_ds[0].sum_lineb250 == true \u0026\u0026 jscall.input.line_cnt \u003c= 250){\r\n            jscall.input.e_inv_no = jscall.input.tran + jscall.input.idoc.toString()\r\n            jscall.input.lines.forEach(line =\u003e {\r\n                line.e_inv_no = jscall.input.e_inv_no\r\n            })\r\n            comp_result = jsoncmp.sum_quantity_by_item(jscall.input)\r\n            CralUtil.LogInfo(\"AfterCompress\", \"Invoice\", comp_result)\r\n            if (comp_result.result){\r\n                jscall.input = comp_result.object\r\n                isSumbyQty = true\r\n            } else {\r\n                jscall_error = \"Unable to perform Sum by Quantity and Item.\"\r\n                CralUtil.LogInfo(\"Einvois Output\", \"Invoice\", jscall_error)\r\n                return false\r\n            }\r\n            CralUtil.LogInfo(\"InputAfterJsonCompress\", \"Invoice\", jscall.input)\r\n        } else {\r\n            if (entity_ds[0].sum_line250 == true \u0026\u0026 jscall.input.line_cnt \u003e 250){\r\n                jscall.input.e_inv_no = jscall.input.tran + jscall.input.idoc.toString()\r\n                jscall.input.lines.forEach(line =\u003e {\r\n                    line.e_inv_no = jscall.input.e_inv_no\r\n                })\r\n                comp_result = jsoncmp.sum_quantity_by_item(jscall.input)\r\n                if (comp_result.result){\r\n                    jscall.input = comp_result.object\r\n                    isSumbyQty = true\r\n                } else {\r\n                    jscall_error = \"Unable to perform Sum by Quantity and Item.\"\r\n                    CralUtil.LogInfo(\"Einvois Output\", \"Invoice\", jscall_error)\r\n                    return false\r\n                }\r\n            }\r\n        }\r\n    }\r\n    if (jscall.input.doct == \"\" || jscall.input.doct == null || jscall.input.doct == undefined){\r\n        jscall_error = \"Document Type is Mandatory\"\r\n        CralUtil.LogInfo(\"Einvois Output\", \"\", jscall_error)\r\n        return false;\r\n    }\r\n    document_Type = einvois.get_doc_type(jscall.input.doct)\r\n    if (document_Type == \"\"){\r\n        jscall_error = \"Unmapped or Invalid Document Type\"\r\n        CralUtil.LogInfo(\"Einvois Output\", \"\", jscall_error)\r\n        return false;\r\n    }\r\n    if (GetInvImpStatus(document_Type) != true){\r\n        jscall_error = \"Document Type Not Implemented.\"\r\n        CralUtil.LogInfo(\"Einvois Output\", \"\", jscall_error)\r\n        return false;\r\n    }\r\n    if (jscall.input.line_cnt == 0 || jscall.input.lines?.length == 0){\r\n        jscall_error = \"Lines is Empty.\"\r\n        CralUtil.LogInfo(\"Einvois Output\", \"\", jscall_error)\r\n        return false\r\n    }\r\n    if (document_Type == \"11\" || document_Type == \"12\"){\r\n        if (jscall.input.styp.toUpperCase() == \"LOCAL\"){\r\n            sb_imp = CralDB.QueryByComp(\"select src_tran_type from {{self_billed}} where src_tran_type='$1' and active=true and delf=false\", jscall.company, jscall.input.tran)\r\n            if (sb_imp.length == 0){\r\n                jscall_error = \"Transaction Type not defined in Self E-Invois\";\r\n                CralUtil.LogInfo(\"Einvois Output\", \"\", jscall_error)\r\n                // return false;\r\n                return{\r\n                    \"resend\":false\r\n                }\r\n            }\r\n        }\r\n    }\r\n    isConsoInv = CheckConsoInv(jscall.input.doct)\r\n    if (isConsoInv == true){\r\n        // return CreateConsoInvoice()\r\n        inv_out = CreateConsoInvoice()\r\n        inv_out[\"SumByQty\"] = isSumbyQty\r\n        // println(\"E-Invois Output(Consolidated Invoice): \" + JSON.stringify(inv_out))\r\n        CralUtil.LogInfo(\"Einvois Output\", \"Consolidated Invoice\", inv_out)\r\n        return inv_out\r\n    } else {\r\n        // if (jscall.input.line_cnt \u003e 120){\r\n        //     return CreateEInvoiceMultipleHeaders()\r\n        // } else {\r\n            // return CreateEInvoice()\r\n            inv_out = CreateEInvoice()\r\n            // println(\"E-Invois Output: \" + JSON.stringify(inv_out))\r\n            inv_out[\"SumByQty\"] = isSumbyQty\r\n            CralUtil.LogInfo(\"Einvois Output\", \"Invoice Created Successfully\", inv_out)\r\n            return inv_out\r\n        // }\r\n    }\r\n    // return header_result\r\n}\r\n\r\nfunction CreateEInvoice(){\r\n    header_result = insert_header()\r\n    println(\"Creating E-Invoice...\")\r\n    // header_result = einvoice.insert_header()\r\n    check_error = GetInsertErrorMessage(header_result, jscall.input.comp, jscall.input.tran, jscall.input.idoc, 0)\r\n    println(\"Header Inserted\")\r\n    println(JSON.stringify(check_error))\r\n    if (check_error.Status == true){\r\n        println(\"IN\")\r\n        if (header_result.Message.ccur == \"\" || header_result.Message.ccur == null || header_result.Message.ccur == undefined){\r\n            einvois.CreateValidation(header_result.Message.e_inv_no, 0, \"10\", \"MAP\", \"Unmapped Currency Code\", \"Invoice.Map\", \"ccur\", jscall.input.ccur)\r\n        }\r\n        if (header_result.Message.cvat == \"\" || header_result.Message.cvat == null || header_result.Message.cvat == undefined){\r\n            einvois.CreateValidation(header_result.Message.e_inv_no, 0, \"10\", \"MAP\", \"Unmapped Tax Code\", \"Invoice.Map\", \"cvat\", jscall.input.cvat)\r\n        }\r\n        println(\"Before Line Inserting\")\r\n        header_result.Lines = insert_multiple_lines(jscall.input.lines, \"einv_lines\", header_result.Message.e_inv_no)\r\n        println(\"Output To LN: \" + JSON.stringify(header_result))\r\n        println(\"Invoice Inserted Successfully \" + header_result.Message.e_inv_no)\r\n        if (einvois.check_validations(header_result.Message.e_inv_no) == true){\r\n            println(\"Validation Pass\")\r\n            debug(\"Validation Pass\")\r\n            if (header_result.Message.sctg == \"10\"){\r\n                einvois.submitEinvoiceToLHDN(header_result.Message.e_inv_no)\r\n                return header_result\r\n                // Moved to Function on Sept.5 \r\n                // var doc_json = einvois.BuildJSONFormat(header_result.Message.e_inv_no)\r\n                // println(\"After Doc\")\r\n                // if (typeof doc_json == \"string\"){\r\n                //     println(\"Error Doc\")\r\n                //     einvois.CreatePortalValidation(header_result.Message.e_inv_no, 0, doc_json, \"\")\r\n                //     return header_result\r\n                // } else {\r\n                //     // Convert JSON to XML and hash the doc to string.\r\n                //     println(\"Success Doc\")\r\n                //     submission_ret = einvois.SubmitTOLHDN(doc_json.document, doc_json.InvoiceCodeNumber)\r\n                //     if (submission_ret == false){\r\n                //         return header_result\r\n                //     } else {\r\n                //         sub_data = einvois.SubmissionUpdate(submission_ret)\r\n                //         return header_result\r\n                //     }\r\n                // }\r\n            }\r\n        }\r\n        println(\"Validation Fail\")\r\n        debug(\"Validation Fail\")\r\n        return header_result\r\n    } else {\r\n        return check_error.Result\r\n    }\r\n}\r\n\r\nfunction CreateConsoInvoice(){\r\n    conso_header = insert_conso_header()\r\n    check_error = GetInsertErrorMessage(conso_header, jscall.input.comp, jscall.input.tran, jscall.input.idoc, 0)\r\n    if (check_error.Status == true){\r\n        conso_header.Lines = insert_multiple_lines(jscall.input.lines, \"conso_line\", \"\")\r\n        return conso_header\r\n    }\r\n    return check_error.Result\r\n}\r\n\r\nfunction CreateEInvoiceMultipleHeaders(){\r\n    header_result = []\r\n    line_results = []\r\n    // src_header = einvoice.insert_header()\r\n    src_header = insert_header()\r\n    check_error = GetInsertErrorMessage(src_header, jscall.input.comp, jscall.input.tran, jscall.input.idoc, 0)\r\n    if (check_error.Status == true){\r\n        total_headers = parseInt(jscall.input.line_cnt/120) + 1\r\n        start_line = 0;\r\n        end_line = 120;\r\n        for (i = 1; i \u003c total_headers; i++){\r\n            temp_lines = jscall.input.lines.slice(start_line, end_line)\r\n            head_num_str = i.toString()\r\n            insert_result = insert_header()\r\n            // insert_result = einvoice.insert_header()\r\n            insert_error = GetInsertErrorMessage(insert_result, jscall.input.comp, jscall.input.tran, jscall.input.idoc, 0)\r\n            if (insert_error.Status == true){\r\n                temp_line_result = insert_multiple_lines(temp_lines, \"einv_lines\", insert_result.Message.e_inv_no)\r\n                Array.prototype.push.apply(line_results, temp_line_result)\r\n            } else {\r\n                ret = CralDB.PublishTopic(\"einv_header\", jscall.company, \"Delete\", jscall.input, jscall.user)\r\n                return insert_error.Result\r\n            }\r\n            start_line = end_line;\r\n            end_line = (i == total_headers)?(jscall.input.lines.length - 1):(end_line + 120)\r\n        }\r\n        src_header.Lines = line_results\r\n        return src_header\r\n    } else {\r\n        return check_error.Result\r\n    }\r\n}\r\n\r\nfunction submit_mlines_to_portal(){\r\n    header_data = CralDB.QueryByComp(\"select * from {{einv_header}} where comp=$1 and tran='$2' and idoc=$3 and src_type='$4'\", jscall.company, jscall.input.comp.toString(), jscall.input.tran, jscall.input.idoc.toString(), einvois.get_src_inv_type(jscall.input.src_type))\r\n    if (header_data.length == 0){\r\n        conso_data = CralDB.QueryByComp(\"select * from {{conso_header}} where comp=$1 and tran='$2' and idoc=$3 and src_type='$4'\", jscall.company, jscall.input.comp.toString(), jscall.input.tran, jscall.input.idoc.toString(), einvois.get_src_inv_type(jscall.input.src_type))\r\n        if (conso_data.length == 0){\r\n            jscall_error = \"Header Not Found in Portal.\"\r\n            return false\r\n        } else {\r\n            println(\"Inserting Missing Lines\")\r\n            line_results = insert_multiple_lines(jscall.input.lines, \"conso_line\", \"\")\r\n        }\r\n    } else {\r\n        missing_lines = []\r\n        for (i=0;i\u003cjscall.input.lines.length;i++){\r\n            isAvil = CralDB.QueryByComp(\"select line from {{einv_lines}} where e_inv_no='$1' and line=$2\", jscall.company, header_data[0].e_inv_no, jscall.input.lines[i].line)\r\n            if (isAvil.length == 0){\r\n                missing_lines.push(jscall.input.lines[i])\r\n            }\r\n        }\r\n        line_results = insert_multiple_lines(missing_lines, \"einv_lines\", header_data[0].e_inv_no)\r\n        // line_results = insert_multiple_lines(jscall.input.lines, \"einv_lines\", header_data[0].e_inv_no)\r\n        // Go to Check Validation...\r\n    }\r\n    return {\r\n        \"Lines\": line_results\r\n    }\r\n}\r\n\r\nfunction insert_multiple_lines(array_lines, table_code, einvNumber){\r\n    line_results = []\r\n    println(\"Inserting Line\")\r\n    for ( i = 0; i \u003c array_lines.length; i++){\r\n        line_result = insert_line(array_lines[i], table_code, einvNumber)\r\n        check_error = GetInsertErrorMessage(line_result, array_lines[i].comp, array_lines[i].tran, array_lines[i].idoc, array_lines[i].line)\r\n        if (table_code == \"einv_lines\" \u0026\u0026 check_error.Status == true){\r\n            println(\"Line Inserted Successfully\")\r\n            if (line_result.Message.cvat == \"\" || line_result.Message.cvat == undefined || line_result.Message.cvat == null){\r\n                einvois.CreateValidation(einvNumber, array_lines[i].line, \"10\", \"MAP\", \"Unmapped Tax Code\", \"InvoiceLine.Map\", \"cvat\", array_lines[i].cvat)\r\n            }\r\n            if (line_result.Message.clas == \"\" || line_result.Message.clas == undefined || line_result.Message.clas == null){\r\n                einvois.CreateValidation(einvNumber, array_lines[i].line, \"10\", \"MAP\", \"Unmapped Classification Code\", \"InvoiceLine.Map\", \"clas\", array_lines[i].clas)\r\n            }\r\n            println(\"After Map Validations\")\r\n        }\r\n        line_results.push(check_error.Result)\r\n    }\r\n    return line_results\r\n}\r\n\r\nfunction GetInsertErrorMessage(result, comp, tran, idoc, line){\r\n    if (typeof result == \"string\"){\r\n        return {\r\n            \"Status\": false,\r\n            \"Result\": {\r\n                \"comp\": comp,\r\n                \"tran\": tran,\r\n                \"idoc\": idoc,\r\n                \"line\": line,\r\n                \"Message\": result,\r\n                \"Success\":false\r\n            }\r\n        }\r\n    } else {\r\n        if (result.Success == false){\r\n            result.comp = comp\r\n            result.tran = tran\r\n            result.idoc = idoc\r\n            result.line = line\r\n            return {\r\n                \"Status\": false,\r\n                \"Result\": result\r\n            }\r\n        } else {\r\n            return {\r\n                \"Status\": true,\r\n                \"Result\": result\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nfunction GetInvImpStatus(inv_type){\r\n    switch (inv_type){\r\n        case \"01\":\r\n            // CralDB.QueryByComp(\"select imp_inv from {{einv_implementation}}\", jscall.company)\r\n            fld_name = \"imp_inv\"\r\n            break;\r\n        case \"02\":\r\n            fld_name = \"imp_crd_nt\"\r\n            break;\r\n        case \"11\":\r\n            fld_name = \"imp_slf_inv\"\r\n            break;\r\n        case \"12\":\r\n            fld_name = \"imp_slf_crd_nt\"\r\n            break;\r\n        default:\r\n            return false\r\n    }\r\n    imp_data = CralDB.QueryByComp(\"select \" + fld_name + \" from {{einv_implementation}}\", jscall.company)\r\n    if (imp_data.length == 0){\r\n        return false;\r\n    }\r\n    return imp_data[0][fld_name]\r\n}\r\n// function test_conso_check(){\r\n//     return CheckConsoInv(jscall.input.doct)\r\n// }\r\nfunction CheckConsoInv(docType){\r\n    println(\"Checking Conso......\")\r\n    imp_data = CralDB.QueryByComp(\"select consolidation from {{einv_implementation}}\", jscall.company)\r\n    println(JSON.stringify(imp_data))\r\n    if (imp_data.length == 0){\r\n        return false\r\n    }\r\n    if (imp_data[0].consolidation == true){\r\n        srcType = einvois.get_src_inv_type(jscall.input.src_type)\r\n        println(srcType)\r\n        // if (docType == \"01\"){ //Invoice or Sales Invoice\r\n        println(docType)\r\n        // if (docType.toUpperCase() == \"INVOICE\"){\r\n        //     switch (srcType){\r\n        //         case \"20\": //Sales Order\r\n        //             conso_fld = \"conso_sls\"\r\n        //             list_name = \"conso_sls_list\"\r\n        //             // get_conso_data = CralDB.QueryByComp(\"select conso_sls from {{conso_filing}} where comp=$1\", jscall.company, jscall.company)\r\n        //         break;\r\n        //         case \"10\": // Manual Sales\r\n        //             conso_fld = \"conso_man_sls\"\r\n        //             list_name = \"conso_man_sls_list\"\r\n        //         break;\r\n        //         default:\r\n        //         return false;\r\n        //         break;\r\n        //     }\r\n        // } else {\r\n        //     if (docType.toUpperCase() == \"SALES INVOICE\" \u0026\u0026 srcType == \"40\"){ //Sales Invoice\r\n        //         conso_fld = \"conso_acr\"\r\n        //         list_name = \"conso_acr_list\"\r\n        //     } else {\r\n        //         return false;\r\n        //     }\r\n        // }\r\n        if (docType.toUpperCase() == \"INVOICE\" || docType.toUpperCase() == \"SALES INVOICE\"){\r\n            switch (srcType){\r\n                case \"20\": //Sales Order\r\n                    conso_fld = \"conso_sls\"\r\n                    list_name = \"conso_sls_list\"\r\n                    // get_conso_data = CralDB.QueryByComp(\"select conso_sls from {{conso_filing}} where comp=$1\", jscall.company, jscall.company)\r\n                break;\r\n                case \"10\": // Manual Sales\r\n                    conso_fld = \"conso_man_sls\"\r\n                    list_name = \"conso_man_sls_list\"\r\n                break;\r\n                case \"40\":\r\n                    conso_fld = \"conso_acr\"\r\n                    list_name = \"conso_acr_list\"\r\n                break;\r\n                default:\r\n                return false;\r\n                break;\r\n            }\r\n        } else {\r\n            return false;\r\n        }\r\n        get_conso_data = CralDB.QueryByComp(\"select \" + conso_fld + \" from {{conso_filing}} where comp=$1\", jscall.company, jscall.input.comp)\r\n        println(JSON.stringify(get_conso_data))\r\n        if (get_conso_data.length != 0){\r\n            println(CralUtil.GetListDesc(list_name, get_conso_data[0][conso_fld]))\r\n            switch (CralUtil.GetListDesc(list_name, get_conso_data[0][conso_fld]).toUpperCase()){\r\n                case \"BUYER\":\r\n                    println(jscall.input.inv_bp)\r\n                    if (jscall.input.inv_bp != undefined \u0026\u0026 jscall.input.inv_bp != null \u0026\u0026 jscall.input.inv_bp != \"\"){\r\n                        conso_data = CralDB.QueryByComp(\"select count(buy_code) from {{buyer_companies}} where buy_code='$1' and conso_buyer=true and data_set='$2'\", jscall.company, jscall.input.inv_bp, jscall.input.dataset)\r\n                        println(JSON.stringify(conso_data))\r\n                        // if (CralDB.QueryByComp(\"select buy_code from {{buyer_companies}} where buy_code='$1'\", jscall.company, jscall.input.itbp).length != 0){\r\n                        //     return true;\r\n                        // }\r\n                    } else {\r\n                        return false;\r\n                    }\r\n                break;\r\n                case \"ORDER TYPE\":\r\n                    if (jscall.input.ord_typ != undefined \u0026\u0026 jscall.input.ord_typ != null \u0026\u0026 jscall.input.ord_typ != \"\"){\r\n                        conso_data = CralDB.QueryByComp(\"select count(ord_typ) from {{conso_ord_type}} where ord_typ='$1' and data_set='$2'\", jscall.company, jscall.input.ord_typ, jscall.input.dataset)\r\n                    } else {\r\n                        return false;\r\n                    }\r\n                break;\r\n                case \"SERIES\":\r\n                    if (jscall.input.ngrp != undefined \u0026\u0026 jscall.input.ngrp != null \u0026\u0026 jscall.input.ngrp != \"\" \u0026\u0026 jscall.input.seri != undefined \u0026\u0026 jscall.input.seri != null \u0026\u0026 jscall.input.seri != \"\"){\r\n                        conso_data = CralDB.QueryByComp(\"select count(seri) from {{conso_sls_seri}} where ngrp='$1' and seri='$2' and data_set='$3'\", jscall.company, jscall.input.ngrp, jscall.input.seri, jscall.input.dataset)\r\n                    } else {\r\n                        return false;\r\n                    }\r\n                break;\r\n                case \"SALES OFFICE\":\r\n                    if (jscall.input.sls_ofc != undefined \u0026\u0026 jscall.input.sls_ofc != null \u0026\u0026 jscall.input.sls_ofc != \"\"){\r\n                        conso_data = CralDB.QueryByComp(\"select count(sls_ofc) from {{conso_sls_off}} where sls_ofc='$1' and data_set='$2'\", jscall.company, jscall.input.sls_ofc, jscall.input.dataset)\r\n                    } else {\r\n                        return false;\r\n                    }\r\n                break;\r\n                case \"MANUAL ID\":\r\n                    println(jscall.input.ngrp)\r\n                    println(jscall.input.seri)\r\n                    if (jscall.input.ngrp != undefined \u0026\u0026 jscall.input.ngrp != null \u0026\u0026 jscall.input.ngrp != \"\" \u0026\u0026 jscall.input.seri != undefined \u0026\u0026 jscall.input.seri != null \u0026\u0026 jscall.input.seri != \"\"){\r\n                        conso_data = CralDB.QueryByComp(\"select count(seri) from {{conso_man_id}} where ngrp='$1' and seri='$2' and data_set='$3'\", jscall.company, jscall.input.ngrp, jscall.input.seri, jscall.input.dataset)\r\n                    } else {\r\n                        return false;\r\n                    }\r\n                break;\r\n                case \"TRANSACTION TYPE\":\r\n                    println(jscall.input.tran)\r\n                    if (jscall.input.tran != undefined \u0026\u0026 jscall.input.tran != null \u0026\u0026 jscall.input.tran != \"\"){\r\n                        conso_data = CralDB.QueryByComp(\"select count(conso_tran_type) from {{conso_tran_types}} where conso_tran_type='$1' and data_set='$2'\", jscall.company, jscall.input.tran, jscall.input.dataset)\r\n                    } else {\r\n                        return false;\r\n                    }\r\n                break;\r\n                default:\r\n                    return false;\r\n                break;\r\n            }\r\n            if (conso_data[0].count != 0){\r\n                return true;\r\n            } else {\r\n                return false;\r\n            }\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n    return false\r\n}\r\n\r\nfunction insert_header(){\r\n    header_err_msg = \"\"\r\n    temp_doct = einvois.get_doc_type(jscall.input.doct)\r\n    // if (temp_doct == \"\"){\r\n    //     header_err_msg = write_err_msg(header_err_msg, \"Document Type\")\r\n    // }\r\n    temp_ccur = einvois.get_ccur(jscall.input.ccur, jscall.input.dataset)\r\n    // if (temp_ccur == \"\"){\r\n    //     header_err_msg = write_err_msg(header_err_msg, \"Currency Code\")\r\n    // }\r\n    temp_paym = einvois.get_paym(jscall.input.paym, jscall.input.dataset)\r\n    // if (temp_paym == \"\"){\r\n    //     // header_err_msg = write_err_msg(header_err_msg, \"Payment Mode\")\r\n    // }\r\n    temp_cvat = einvois.get_cvat(jscall.input.cvat, jscall.input.dataset)\r\n    // if (temp_cvat == \"\"){\r\n    //     header_err_msg = write_err_msg(header_err_msg, \"Tax Code\")\r\n    // }\r\n\r\n    switch(jscall.input.styp.toUpperCase()){\r\n        case \"LOCAL\":\r\n            sctg = \"10\"\r\n            break\r\n        case \"EXPORT\":\r\n            sctg = \"20\"\r\n            break\r\n        case \"IMPORT\":\r\n            sctg = \"30\"\r\n            break\r\n        default:\r\n            sctg = \"\"\r\n            break\r\n    }\r\n    sup_data = false\r\n    sup_adrs = false\r\n    buy_data = false\r\n    buy_adrs = false\r\n    ship_data = false\r\n    ship_adrs = false\r\n\r\n    supplier_data = CralDB.QueryByComp(\"select * from {{supplier_companies}} where sup_company=$1\", jscall.company, jscall.input.comp)\r\n    if (supplier_data.length != 0){\r\n        sup_data = true\r\n        supplier_address = CralDB.QueryByComp(\"select * from {{address_master}} where data_set='$1' and adrs_code='$2'\", jscall.company, jscall.input.dataset, supplier_data[0].sup_adrs)\r\n        if (supplier_address.length != 0){\r\n            sup_adrs = true\r\n        }\r\n    }\r\n\r\n    buyer_adrs = (jscall.input.buy_adrs != \"\" \u0026\u0026 jscall.input.buy_adrs != undefined \u0026\u0026 jscall.input.buy_adrs != null)?jscall.input.buy_adrs:\"\";\r\n    buyer_data = CralDB.QueryByComp(\"select * from {{buyer_companies}} where data_set='$1' and buy_code='$2'\", jscall.company, jscall.input.dataset, jscall.input.inv_bp)\r\n    if (buyer_data.length != 0){\r\n        buy_data = true\r\n        buyer_adrs = (buyer_adrs == \"\")?buyer_data[0].buy_adrs:buyer_adrs;\r\n        buyer_address = CralDB.QueryByComp(\"select * from {{address_master}} where data_set='$1' and adrs_code='$2'\", jscall.company, jscall.input.dataset, buyer_adrs)\r\n        if (buyer_address.length != 0){\r\n            buy_adrs = true\r\n        }\r\n    }\r\n\r\n    if (jscall.input.stbp != \"\" \u0026\u0026 jscall.input.stbp != undefined \u0026\u0026 jscall.input.stbp != null){\r\n        if (jscall.input.stbp != jscall.input.inv_bp){\r\n            shipper_data = CralDB.QueryByComp(\"select * from {{buyer_companies}} where data_set='$1' and buy_code='$2'\", jscall.company, jscall.input.dataset, jscall.input.stbp)\r\n            if (shipper_data.length == 0){\r\n                // ship_data = buy_data\r\n                // shipper_data = buyer_data\r\n            } else {\r\n                ship_data = true\r\n                if (jscall.input.sadr != \"\" \u0026\u0026 jscall.input.sadr != undefined \u0026\u0026 jscall.input.sadr != null){\r\n                    shipper_address = CralDB.QueryByComp(\"select * from {{address_master}} where data_set='$1' and adrs_code='$2'\", jscall.company, jscall.input.dataset, jscall.input.sadr)\r\n                    if (shipper_address.length != 0){\r\n                        ship_adrs = true\r\n                    }\r\n                } else {\r\n                    shipper_address = CralDB.QueryByComp(\"select * from {{address_master}} where data_set='$1' and adrs_code='$2'\", jscall.company, jscall.input.dataset, shipper_data[0].buy_adrs)\r\n                    if (shipper_address.length != 0){\r\n                        ship_adrs = true\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    supplier_name = (sup_data == false)?\"\":supplier_data[0].sup_name\r\n    supplier_cn = (sup_data == false)?\"\":supplier_data[0].sup_cont_num\r\n    supplier_email = (sup_data == false)?\"\":supplier_data[0].sup_email\r\n    supplier_sst = (sup_data == false)?\"\":supplier_data[0].sup_sst_reg\r\n    supplier_ttx = (sup_data == false)?\"\":supplier_data[0].sup_ttx_no\r\n    supplier_tin = (sup_data == false)?\"\":supplier_data[0].sup_tin\r\n    supplier_brn = (sup_data == false)?\"\":supplier_data[0].sup_reg_brn\r\n    supplier_nric = (sup_data == false)?\"\":supplier_data[0].sup_reg_nric\r\n    supplier_passport = (sup_data == false)?\"\":supplier_data[0].sup_reg_passport\r\n    supplier_army = (sup_data == false)?\"\":supplier_data[0].sup_reg_army\r\n    supplier_badsca = (sup_data == false)?\"\":supplier_data[0].sup_badsca\r\n    supplier_bacc = (sup_data == false)?\"\":supplier_data[0].sup_bank_acc\r\n    supplier_msic = (sup_data == false)?\"\":supplier_data[0].sup_msic\r\n\r\n    supplier_adrs = (sup_data == false)?\"\":supplier_data[0].sup_adrs\r\n    supplier_city = (sup_adrs == false)?\"\":supplier_address[0].adrs_city\r\n    supplier_pz = (sup_adrs == false)?\"\":supplier_address[0].postal_zone\r\n    supplier_l0 = (sup_adrs == false)?\"\":supplier_address[0].adrs_line0\r\n    supplier_l1 = (sup_adrs == false)?\"\":supplier_address[0].adrs_line1\r\n    supplier_l2 = (sup_adrs == false)?\"\":supplier_address[0].adrs_line2\r\n    let [sup_ccty, sup_cste] = einvois.get_country_state((sup_adrs == false)?\"\":supplier_address[0].adrs_country, (sup_adrs == false)?\"\":supplier_address[0].adrs_state, jscall.input.dataset)\r\n    \r\n    buy_name = (buy_data == false)?\"\":buyer_data[0].buy_name\r\n    buy_cont_num = (buy_data == false)?\"\":buyer_data[0].buy_cont_num\r\n    buy_email = (buy_data == false)?\"\":buyer_data[0].buy_email\r\n    buy_sst_reg = (buy_data == false)?\"\":buyer_data[0].buy_sst_reg\r\n    buy_tin = (buy_data == false)?\"\":buyer_data[0].buy_tin\r\n    buy_reg_brn = (buy_data == false)?\"\":buyer_data[0].buy_reg_brn\r\n    buy_reg_nric = (buy_data == false)?\"\":buyer_data[0].buy_reg_nric\r\n    buy_reg_passport =(buy_data == false)?\"\":buyer_data[0].buy_reg_passport \r\n    buy_reg_army = (buy_data == false)?\"\":buyer_data[0].buy_reg_army\r\n\r\n    buyer_city = (buy_adrs == false)?\"\":buyer_address[0].adrs_city\r\n    buyer_pz = (buy_adrs == false)?\"\":buyer_address[0].postal_zone\r\n    buyer_l0 = (buy_adrs == false)?\"\":buyer_address[0].adrs_line0\r\n    buyer_l1 = (buy_adrs == false)?\"\":buyer_address[0].adrs_line1\r\n    buyer_l2 = (buy_adrs == false)?\"\":buyer_address[0].adrs_line2\r\n    let [buy_ccty, buy_cste] = einvois.get_country_state((buy_adrs == false)?\"\":buyer_address[0].adrs_country, (buy_adrs == false)?\"\":buyer_address[0].adrs_state, jscall.input.dataset)\r\n    \r\n    shipper_name = (ship_data == false)?\"\":shipper_data[0].buy_name\r\n    shipper_tin = (ship_data == false)?\"\":shipper_data[0].buy_tin\r\n    shipper_brn = (ship_data == false)?\"\":shipper_data[0].buy_reg_brn\r\n    shipper_nric = (ship_data == false)?\"\":shipper_data[0].buy_reg_nric\r\n    shipper_passport = (ship_data == false)?\"\":shipper_data[0].buy_reg_passport\r\n    shipper_army = (ship_data == false)?\"\":shipper_data[0].buy_reg_army\r\n\r\n    shipper_city = (ship_adrs == false)?\"\":shipper_address[0].adrs_city\r\n    shipper_pz = (ship_adrs == false)?\"\":shipper_address[0].postal_zone\r\n    shipper_l0 = (ship_adrs == false)?\"\":shipper_address[0].adrs_line0\r\n    shipper_l1 = (ship_adrs == false)?\"\":shipper_address[0].adrs_line1\r\n    shipper_l2 = (ship_adrs == false)?\"\":shipper_address[0].adrs_line2\r\n    let [ship_ccty, ship_cste] = einvois.get_country_state((ship_adrs == false)?\"\":shipper_address[0].adrs_country, (ship_adrs == false)?\"\":shipper_address[0].adrs_state, jscall.input.dataset)\r\n    \r\n    self_inv = false\r\n    if (temp_doct == \"11\" || temp_doct == \"12\" || temp_doct == \"13\" || temp_doct == \"14\"){\r\n        self_inv = true\r\n    }\r\n\r\n    let org_e_inv_no =\"\"\r\n    let org_doc_uuid = \"\"\r\n    if (temp_doct != \"01\" \u0026\u0026 temp_doct != \"11\" \u0026\u0026 jscall.input.refDoc){\r\n        [org_e_inv_no, org_doc_uuid] = getOriginalDocumentReference(jscall.input.refDoc)\r\n    }\r\n    \r\n    header_data = {\r\n        \"comp\": jscall.input.comp,\r\n        \"tran\": jscall.input.tran,\r\n        \"idoc\": jscall.input.idoc,\r\n        \"doct\": temp_doct,\r\n        \"ccur\": temp_ccur,\r\n        \"paym\": temp_paym,\r\n        \"cvat\": temp_cvat,\r\n        \"sctg\": sctg,\r\n        \"dataset\": jscall.input.dataset,\r\n        \"line_cnt\": 0,\r\n        \"s_line_cnt\": jscall.input.line_cnt,\r\n        \"sup_code\": (self_inv == true)?jscall.input.inv_bp:jscall.input.comp,\r\n        \"sup_name\":         (self_inv == true)?buy_name:supplier_name,\r\n        \"sup_cont_num\":     (self_inv == true)?buy_cont_num:supplier_cn,\r\n        \"sup_email\":        (self_inv == true)?buy_email:supplier_email,\r\n        \"sup_sst_reg\":      (self_inv == true)?buy_sst_reg:supplier_sst,\r\n        \"sup_ttx_no\":       (self_inv == true)?(buy_data == false)?\"\":buyer_data[0].buy_ttx_reg:supplier_ttx,\r\n        \"sup_tin\":          (self_inv == true)?buy_tin:supplier_tin,\r\n        \"sup_reg_brn\":      (self_inv == true)?buy_reg_brn:supplier_brn,\r\n        \"sup_reg_nric\":     (self_inv == true)?buy_reg_nric:supplier_nric,\r\n        \"sup_reg_passport\": (self_inv == true)?buy_reg_passport:supplier_passport,\r\n        \"sup_reg_army\":     (self_inv == true)?buy_reg_army:supplier_army,\r\n        \"sup_badsca\":       (self_inv == true)?(buy_data == false)?\"\":buyer_data[0].buy_badsca:supplier_badsca,\r\n        \"sup_bank_acc\":     (self_inv == true)?\"\":supplier_bacc,\r\n        \"sup_msic\":         (self_inv == true)?(buy_data == false)?\"\":buyer_data[0].buy_msic:supplier_msic,\r\n        \"sup_adrs\":         (self_inv == true)?buyer_adrs:supplier_adrs,\r\n        \"sup_city\":         (self_inv == true)?buyer_city:supplier_city,\r\n        \"sup_postal_zone\":  (self_inv == true)?buyer_pz:supplier_pz,\r\n        \"sup_adrs_line0\":   (self_inv == true)?buyer_l0:supplier_l0,\r\n        \"sup_adrs_line1\":   (self_inv == true)?buyer_l1:supplier_l1,\r\n        \"sup_adrs_line2\":   (self_inv == true)?buyer_l2:supplier_l2,\r\n        \"sup_country\":      (self_inv == true)?buy_ccty:sup_ccty,\r\n        \"sup_cste\":         (self_inv == true)?buy_cste:sup_cste,\r\n        \"inv_bp\":           (self_inv == true)?jscall.input.comp:jscall.input.inv_bp,\r\n        \"buy_name\":         (self_inv == true)?supplier_name:buy_name,\r\n        \"buy_cont_num\":     (self_inv == true)?supplier_cn:buy_cont_num,\r\n        \"buy_email\":        (self_inv == true)?supplier_email:buy_email,\r\n        \"buy_sst_reg\":      (self_inv == true)?supplier_sst:buy_sst_reg,\r\n        \"buy_tin\":          (self_inv == true)?supplier_tin:buy_tin,\r\n        \"buy_reg_brn\":      (self_inv == true)?supplier_brn:buy_reg_brn,\r\n        \"buy_reg_nric\":     (self_inv == true)?supplier_nric:buy_reg_nric,\r\n        \"buy_reg_passport\": (self_inv == true)?supplier_passport:buy_reg_passport,\r\n        \"buy_reg_army\":     (self_inv == true)?supplier_army:buy_reg_army,\r\n        \"buy_adrs\": (self_inv == true)?supplier_adrs:buyer_adrs,\r\n        \"buy_city\":         (self_inv == true)?supplier_city:buyer_city,\r\n        \"buy_postal_zone\":  (self_inv == true)?supplier_pz:buyer_pz,\r\n        \"buy_adrs_line0\":   (self_inv == true)?supplier_l0:buyer_l0,\r\n        \"buy_adrs_line1\":   (self_inv == true)?supplier_l1:buyer_l1,\r\n        \"buy_adrs_line2\":   (self_inv == true)?supplier_l2:buyer_l2,\r\n        \"buy_country\":      (self_inv == true)?sup_ccty:buy_ccty,\r\n        \"buy_cste\":         (self_inv == true)?sup_cste:buy_cste,\r\n        \"dtrm\": jscall.input.dtrm,\r\n        \"ship_bp\": jscall.input.stbp,\r\n        \"ship_name\":        shipper_name,\r\n        \"ship_tin\":         shipper_tin,\r\n        \"ship_reg_brn\":     shipper_brn,\r\n        \"ship_reg_nric\":    shipper_nric,\r\n        \"ship_reg_passport\":shipper_passport,\r\n        \"ship_reg_army\":    shipper_army,\r\n        \"ship_adrs\": jscall.input.sadr,\r\n        \"ship_city\":        shipper_city,\r\n        \"ship_postal_zone\": shipper_pz,\r\n        \"ship_adrs_line0\":  shipper_l0,\r\n        \"ship_adrs_line1\":  shipper_l1,\r\n        \"ship_adrs_line2\":  shipper_l2,\r\n        \"ship_country\":     ship_ccty,\r\n        \"ship_cste\":        ship_cste,\r\n        // \"ship_bp\": (self_inv == true)?jscall.input.comp:jscall.input.stbp,\r\n        // \"ship_name\":        (self_inv == true)?supplier_name:shipper_name,\r\n        // \"ship_tin\":         (self_inv == true)?supplier_tin:shipper_tin,\r\n        // \"ship_reg_brn\":     (self_inv == true)?supplier_brn:shipper_brn,\r\n        // \"ship_reg_nric\":    (self_inv == true)?supplier_nric:shipper_nric,\r\n        // \"ship_reg_passport\":(self_inv == true)?supplier_passport:shipper_passport,\r\n        // \"ship_reg_army\":    (self_inv == true)?supplier_army:shipper_army,\r\n        // \"ship_adrs\": (self_inv == true)?supplier_adrs:jscall.input.sadr,\r\n        // \"ship_city\":        (self_inv == true)?supplier_city:shipper_city,\r\n        // \"ship_postal_zone\": (self_inv == true)?supplier_pz:shipper_pz,\r\n        // \"ship_adrs_line0\":  (self_inv == true)?supplier_l0:shipper_l0,\r\n        // \"ship_adrs_line1\":  (self_inv == true)?supplier_l1:shipper_l1,\r\n        // \"ship_adrs_line2\":  (self_inv == true)?supplier_l2:shipper_l2,\r\n        // \"ship_country\":     (self_inv == true)?sup_ccty:ship_ccty,\r\n        // \"ship_cste\":        (self_inv == true)?sup_cste:ship_cste,\r\n        \"frm1\": jscall.input.frm1,\r\n        \"frm2\": jscall.input.frm2,\r\n        \"rate\": jscall.input.rate,\r\n        \"tote\": jscall.input.tote,\r\n        \"toti\": jscall.input.toti,\r\n        \"tott\": jscall.input.tott,\r\n        \"pamt\": jscall.input.pamt,\r\n        // \"pydt\": \"YYYY-MM-DD\",\r\n        // \"pytm\": \"YYYY-MM-DD HH:MM\",\r\n        \"pref\": jscall.input.pref,\r\n        \"tpat\": jscall.input.tpat,\r\n        \"tnat\": jscall.input.tnat,\r\n        \"tdis\": jscall.input.tdis,\r\n        \"tfee\": jscall.input.tfee,\r\n        \"ramt\": jscall.input.ramt,\r\n        \"ttax\": jscall.input.ttax,\r\n        \"ttat\": jscall.input.ttat,\r\n        \"adis\": jscall.input.adis,\r\n        \"adis_reason\": \"\",\r\n        \"afee\": jscall.input.afee,\r\n        \"afee_reason\": \"\",\r\n        \"fbil\": jscall.input.fbil,\r\n        \"org_e_inv_no\": org_e_inv_no,\r\n        \"term\": jscall.input.term,\r\n        \"bref\": jscall.input.bref,\r\n        \"ftrd\": jscall.input.ftrd,\r\n        \"anum\": jscall.input.anum,\r\n        \"ochg\": jscall.input.ochg,\r\n        \"ochg_amnt\": jscall.input.ochg_amnt,\r\n        \"ochg_reason\": jscall.input.ochg_reason,\r\n        \"det_tax\": (jscall.input?.det_tax)?jscall.input.det_tax:\"\",\r\n        // \"bsdt\": \"YYYY-MM-DD\",\r\n        // \"bedt\": \"YYYY-MM-DD\",\r\n        \"amnt_ex\": (jscall.input?.amnt_ex)?jscall.input.amnt_ex:0,\r\n        \"dshp\": jscall.input.dshp,\r\n        \"submission_uid\": \"\",\r\n        \"doc_uuid\": \"\",\r\n        \"esta\": \"10\",\r\n        \"err_msg\": \"\",\r\n        // \"e_invdt\": getCurrentDateTime(),\r\n        \"einv_stat\": \"10\",\r\n        // \"etim\": \"YYYY-MM-DD HH:MM\",\r\n        \"modi_stat\": \"\",\r\n        \"src_type\": einvois.get_src_inv_type(jscall.input.src_type),\r\n        \"inv_pdf\": \"\",\r\n        \"reference0\": jscall.input.reference0 ? jscall.input.reference0 : \"\",\r\n        \"reference1\": jscall.input.reference1 ? jscall.input.reference1 : \"\",\r\n        \"reference2\": jscall.input.reference2 ? jscall.input.reference2 : \"\",\r\n        \"reference3\": jscall.input.reference3 ? jscall.input.reference3 : \"\",\r\n        \"reference4\": jscall.input.reference4 ? jscall.input.reference4 : \"\",\r\n        \"reference5\": jscall.input.reference5 ? jscall.input.reference5 : \"\",\r\n        \"reference6\": jscall.input.reference6 ? jscall.input.reference6 : \"\",\r\n        \"reference7\": jscall.input.reference7 ? jscall.input.reference7 : \"\",\r\n        \"reference8\": jscall.input.reference8 ? jscall.input.reference8 : \"\",\r\n        \"reference9\": jscall.input.reference9 ? jscall.input.reference9 : \"\",\r\n        \"qr_code\": \"\",\r\n        \"org_doc_uuid\": org_doc_uuid,\r\n        \"einv_version\": \"\"\r\n    }\r\n\r\n    // if (temp_doct == \"11\" || temp_doct == \"12\"){\r\n    //     [header_data[\"comp\"], header_data[\"inv_bp\"]] = [header_data[\"inv_bp\"], header_data[\"comp\"]]\r\n    //     [header_data[\"sup_adrs\"], header_data[\"buy_adrs\"]] = [header_data[\"buy_adrs\"], header_data[\"sup_adrs\"]]\r\n    // }\r\n    return CralDB.PublishTopic(\"einv_header\", jscall.company, \"Insert\", header_data, jscall.user)\r\n}\r\n\r\nfunction getOriginalDocumentReference(refDocNum){\r\n    let invoice_number = \"\"\r\n    let document_uuid = \"\"\r\n    let refDocs = refDocNum.split(\",\")\r\n    refDocs.forEach(data =\u003e {\r\n        cancel_rec = CralDB.QueryByComp(`select e_inv_no from {{cancel_header}} where adcn='${data}'`, jscall.company)\r\n        if (cancel_rec?.length){\r\n            invoice_number = cancel_rec[0].e_inv_no\r\n            org_document_uuid = CralDB.QueryByComp(`select doc_uuid from {{einv_header}} where e_inv_no='${cancel_rec[0].e_inv_no}'`, jscall.company)\r\n            if (org_document_uuid?.length){\r\n                document_uuid = org_document_uuid[0].doc_uuid\r\n            }\r\n        }\r\n    })\r\n    return [invoice_number, document_uuid]\r\n}\r\nfunction insert_conso_header(){\r\n    header_err_msg = \"\"\r\n    temp_doct = einvois.get_doc_type(jscall.input.doct)\r\n    if (temp_doct == \"\"){\r\n        header_err_msg = write_err_msg(header_err_msg, \"Document Type\")\r\n    }\r\n    temp_ccur = einvois.get_ccur(jscall.input.ccur, jscall.input.dataset)\r\n    if (temp_ccur == \"\"){\r\n        header_err_msg = write_err_msg(header_err_msg, \"Currency Code\")\r\n    }\r\n    temp_paym = einvois.get_paym(jscall.input.paym, jscall.input.dataset)\r\n    if (temp_paym == \"\"){\r\n        // header_err_msg = write_err_msg(header_err_msg, \"Payment Mode\")\r\n    }\r\n    temp_cvat = einvois.get_cvat(jscall.input.cvat, jscall.input.dataset)\r\n    if (temp_cvat == \"\"){\r\n        header_err_msg = write_err_msg(header_err_msg, \"Tax Code\")\r\n    }\r\n    header_data = {\r\n        \"comp\": jscall.input.comp,\r\n        \"tran\": jscall.input.tran,\r\n        \"idoc\": jscall.input.idoc,\r\n        // \"line\": jscall.input.line,\r\n        \"doct\": temp_doct,\r\n        \"itbp\": jscall.input.inv_bp,\r\n        \"itoa\": jscall.input.buy_adrs,\r\n        \"ccur\": temp_ccur,\r\n        \"rate\": jscall.input.rate,\r\n        \"paym\": temp_paym,\r\n        \"term\": jscall.input.term,\r\n        \"tote\": jscall.input.tote,\r\n        \"toti\": jscall.input.toti,\r\n        \"tott\": jscall.input.tott,\r\n        \"cvat\": temp_cvat,\r\n        \"stbp\": jscall.input.stbp,\r\n        \"sadr\": jscall.input.sadr,\r\n        \"dtrm\": jscall.input.dtrm,\r\n        \"styp\": jscall.input.styp,\r\n        \"cein\": false,\r\n        \"disb\": false,\r\n        \"dshp\": false,\r\n        \"sinc\": false,\r\n        \"fbil\": jscall.input.fbil,\r\n        // \"bsdt\": jscall.input.bsdt,\r\n        // \"bedt\": jscall.input.bedt,\r\n        \"pamt\": jscall.input.pamt,\r\n        // \"pydt\": jscall.input.pydt,\r\n        // \"pytm\": jscall.input.pytm,\r\n        \"pref\": jscall.input.pref,\r\n        \"bref\": jscall.input.bref,\r\n        \"tpat\": jscall.input.tpat,\r\n        \"tnat\": jscall.input.tnat,\r\n        \"tdis\": jscall.input.tdis,\r\n        \"tfee\": jscall.input.tfee,\r\n        \"ramt\": jscall.input.ramt,\r\n        \"ttax\": jscall.input.ttax,\r\n        \"ttat\": jscall.input.ttat,\r\n        \"adis\": jscall.input.adis,\r\n        \"afee\": jscall.input.afee,\r\n        \"frm1\": jscall.input.frm1,\r\n        \"ftrd\": jscall.input.ftrd,\r\n        \"anum\": jscall.input.anum,\r\n        \"frm2\": jscall.input.frm2,\r\n        \"ochg\": jscall.input.ochg,\r\n        \"ochg_amnt\": jscall.input.ochg_amnt,\r\n        \"ochg_reason\": jscall.input.ochg_reason,\r\n        \"esta\": \"10\",\r\n        // \"etim\": jscall.input.etim,\r\n        \"submission_uid\": \"\",\r\n        \"err_msg\": \"\",\r\n        \"line_cnt\": 0,\r\n        \"trgt\": \"\",\r\n        \"val_err\": \"\",\r\n        \"cncl\": false,\r\n        \"det_tax\": \"\",\r\n        \"amnt_ex\": 0,\r\n        \"e_invdt\": \"\",\r\n        \"src_type\": einvois.get_src_inv_type(jscall.input.src_type),\r\n        \"adis_reason\": \"\",\r\n        \"afee_reason\": \"\",\r\n        \"par_cncl\": false,\r\n        \"s_line_cnt\": jscall.input.line_cnt,\r\n        \"einv_stat\": \"10\",\r\n        \"conso_inv\": \"\",\r\n        \"inv_date\": getCurrentDateTime(),\r\n        \"data_set\": jscall.input.dataset\r\n    }\r\n    return CralDB.PublishTopic(\"conso_header\", jscall.company, \"Insert\", header_data, jscall.user)\r\n}\r\n\r\nfunction insert_line(input_data, table_name, einvNumber){\r\n    line_err_msg = \"\"\r\n    \r\n    temp_cvat = einvois.get_cvat(input_data.cvat, jscall.input.dataset)\r\n    if (temp_cvat == \"\"){\r\n        line_err_msg = write_err_msg(line_err_msg, \"Tax Code\")\r\n    }\r\n    \r\n    // temp_ccty = einvois.get_ccty(input_data.ccty)\r\n    // if (temp_ccty == \"\"){\r\n    //     // line_err_msg = write_err_msg(line_err_msg, \"Country Code\")\r\n    // }\r\n    temp_clas = einvois.get_clas(input_data.clas, jscall.input.dataset)\r\n    if (temp_clas == \"\"){\r\n        line_err_msg = write_err_msg(line_err_msg, \"Classification Code\")\r\n    }\r\n    if (table_name == \"einv_lines\"){\r\n        line_data = {\r\n            \"e_inv_no\": einvNumber,\r\n            \"line\": input_data.line,\r\n            \"cuni\": einvois.get_cuni(input_data.cuni, jscall.input.dataset),\r\n            \"ccty\": einvois.get_ccty(input_data.ccty, jscall.input.dataset),\r\n            \"clas_grp\": einvois.getClassificationGroup(),\r\n            \"clas\": temp_clas,\r\n            \"item\": input_data.item,\r\n            \"item_desc\": input_data.item_desc,\r\n            \"pric\": input_data.pric,\r\n            \"pvat\": input_data.pvat,\r\n            \"txai\": input_data.txai,\r\n            \"ceno\": input_data.ceno,\r\n            \"amtt\": input_data.amtt,\r\n            \"stot\": input_data.stot,\r\n            \"amti\": input_data.amti,\r\n            \"dqua\": input_data.dqua,\r\n            \"disc\": input_data.disc,\r\n            \"ldai\": input_data.ldai,\r\n            \"ccde\": input_data.ccde,\r\n            \"feer\": input_data.feer,\r\n            \"feea\": input_data.feea,\r\n            \"disc_reason\": (input_data?.disc_reason)?input_data.disc_reason:\"\",\r\n            \"fee_reason\": (input_data?.fee_reason)?input_data.fee_reason:\"\",\r\n            \"err_msg\": \"\",  \r\n            \"lsta\": \"10\",\r\n            \"modi_lsta\": \"\",\r\n            \"cvat\": temp_cvat,\r\n            \"reference0\":  input_data.reference0 ?  input_data.reference0 : \"\",\r\n            \"reference1\":  input_data.reference1 ?  input_data.reference1 : \"\",\r\n            \"reference2\":  input_data.reference2 ?  input_data.reference2 : \"\",\r\n            \"reference3\":  input_data.reference3 ?  input_data.reference3 : \"\",\r\n            \"reference4\":  input_data.reference4 ?  input_data.reference4 : \"\",\r\n            \"reference5\":  input_data.reference5 ?  input_data.reference5 : \"\",\r\n            \"reference6\":  input_data.reference6 ?  input_data.reference6 : \"\",\r\n            \"reference7\":  input_data.reference7 ?  input_data.reference7 : \"\",\r\n            \"reference8\":  input_data.reference8 ?  input_data.reference8 : \"\",\r\n            \"reference9\":  input_data.reference9 ?  input_data.reference9 : \"\",\r\n            \"reference10\": input_data.reference10 ? input_data.reference10 : \"\",\r\n            \"reference11\": input_data.reference11 ? input_data.reference11 : \"\",\r\n            \"reference12\": input_data.reference12 ? input_data.reference12 : \"\",\r\n            \"reference13\": input_data.reference13 ? input_data.reference13 : \"\",\r\n            \"reference14\": input_data.reference14 ? input_data.reference14 : \"\",\r\n            \"reference15\": input_data.reference15 ? input_data.reference15 : \"\",\r\n            \"reference16\": input_data.reference16 ? input_data.reference16 : \"\",\r\n            \"reference17\": input_data.reference17 ? input_data.reference17 : \"\",\r\n            \"reference18\": input_data.reference18 ? input_data.reference18 : \"\",\r\n            \"reference19\": input_data.reference19 ? input_data.reference19 : \"\",\r\n            \"reference20\": input_data.reference20 ? input_data.reference20 : \"\"\r\n        }\r\n    } else {\r\n        line_data = {\r\n            \"comp\": input_data.comp,\r\n            \"tran\": input_data.tran,\r\n            // \"doct\": temp_doct,\r\n            \"idoc\": input_data.idoc,\r\n            \"line\": input_data.line,\r\n            \"item\": input_data.item,\r\n            \"item_desc\": input_data.item_desc,\r\n            \"pric\": input_data.pric,\r\n            \"cvat\": temp_cvat,\r\n            \"pvat\": input_data.pvat,\r\n            \"txai\": input_data.txai,\r\n            \"ceno\": input_data.ceno,\r\n            \"amtt\": input_data.amtt,\r\n            \"stot\": input_data.stot,\r\n            \"amti\": input_data.amti,\r\n            \"dqua\": input_data.dqua,\r\n            \"cuni\": einvois.get_cuni(input_data.cuni, jscall.input.dataset),\r\n            \"disc\": input_data.disc,\r\n            \"ldai\": input_data.ldai,\r\n            \"ccde\": input_data.ccde,\r\n            \"ccty\": einvois.get_ccty(input_data.ccty, jscall.input.dataset),\r\n            \"clas\": temp_clas,\r\n            \"feer\": input_data.feer,\r\n            \"feea\": input_data.feea,\r\n            \"err_msg\": line_err_msg,\r\n            \"lsta\":\"10\",\r\n            // \"cncl\": false,\r\n            \"disc_reason\": \"\",\r\n            \"fee_reason\": \"\"\r\n        }\r\n    }\r\n    return CralDB.PublishTopic(table_name, jscall.company, \"Insert\", line_data, jscall.user)\r\n}\r\n\r\nfunction write_err_msg(err_msg, err_code){\r\n    if (err_msg == \"\"){\r\n        err_msg = \"Code Validation Failed for \" + err_code\r\n    } else {\r\n        err_msg = err_msg + \", \" + err_code\r\n    }\r\n    return err_msg\r\n}\r\n\r\nfunction getCurrentDateTime() {\r\n    let now = new Date();\r\n    let year = now.getUTCFullYear();\r\n    let month = String(now.getUTCMonth() + 1).padStart(2, '0');\r\n    let day = String(now.getUTCDate()).padStart(2, '0');\r\n    let hours = String(now.getUTCHours()).padStart(2, '0');\r\n    let minutes = String(now.getUTCMinutes()).padStart(2, '0');\r\n    let seconds = String(now.getUTCSeconds()).padStart(2, '0');\r\n    return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}Z`;\r\n}"
        }
    ],
    "Roles": null,
    "DataSets": [
        {
            "Dataset": {
                "Id": "initializeVersion",
                "Description": "Initialize Version",
                "Query": "-- DO $$\r\n-- BEGIN\r\n--     UPDATE {{e_inv_parameter}} set version_id='1.1';\r\n--     UPDATE {{einv_header}} set qr_code='', org_doc_uuid='';\r\n-- END $$;\r\n\r\nUPDATE {{einv_header}} SET einv_version='1.1';"
            }
        },
        {
            "Dataset": {
                "Id": "refFieldInitialize",
                "Description": "Reference Fields Initialize",
                "Query": "UPDATE {{einv_lines}} SET \r\n                    reference10='',\r\n                    reference11='',\r\n                    reference12='',\r\n                    reference13='',\r\n                    reference14='',\r\n                    reference15='',\r\n                    reference16='',\r\n                    reference17='',\r\n                    reference18='',\r\n                    reference19='',\r\n                    reference20='';"
            }
        }
    ],
    "Screens": null,
    "EmailTemplates": null,
    "Lists": null,
    "Reports": null
}