{
    "ExportedSolution": {
        "SolutionID": "1.008_01",
        "Description": "Bug Fix",
        "Status": "Created",
        "CreatedTime": "2025-04-01T17:06:29.347873+05:30",
        "ExportedTime": "0001-01-01T05:53:28+05:53",
        "LastUpdated": "0001-01-01T05:53:28+05:53",
        "CreatedUser": "parthi",
        "UpdatedUser": "",
        "ExportedUser": "",
        "ExportComponents": [
            {
                "SolutionID": "1.008_01",
                "ComponentType": "BusinessObject",
                "ComponentID": "commonBO"
            },
            {
                "SolutionID": "1.008_01",
                "ComponentType": "BusinessObject",
                "ComponentID": "printReport"
            }
        ]
    },
    "Topics": null,
    "BizObjects": [
        {
            "Bizobj": {
                "ObjectName": "commonBO",
                "Description": "Common BO for E-Invoicing",
                "external": true,
                "input_struct": "",
                "out_success": "",
                "out_fail": ""
            },
            "Script": "//**** Business Object commonBO Created by malai on 11-May-2024 12:39:04 ****//\r\n\r\nfunction getCancellationDefaults01(){\r\n    switch(jscall.input.SourceType){\r\n        case \"10\":\r\n            default_seri = CralDB.QueryByComp(\"select man_inv_seri,man_inv_ngrp from {{number_defaults}} where comp=$1\", jscall.company, jscall.input.Company)\r\n            series_list = CralDB.QueryByComp(\"select seri,dsca from {{number_grp}} where ngrp='$1'\", jscall.company, default_seri[0].man_inv_ngrp)\r\n            seri_list = []\r\n            series_list.forEach(\r\n                function(record){\r\n                    seri_list.push({\r\n                        \"Series\": record.seri,\r\n                        \"Description\": record.dsca\r\n                    })\r\n                }\r\n            )\r\n            manual_id = default_seri[0].man_inv_seri\r\n            break;\r\n        case \"20\":\r\n            default_seri = CralDB.QueryByComp(\"select man_soinv_seri,man_soinv_ngrp from {{number_defaults}} where comp=$1\", jscall.company, jscall.input.Company)\r\n            series_list = CralDB.QueryByComp(\"select seri,dsca from {{number_grp}} where ngrp='$1'\", jscall.company, default_seri[0].man_soinv_ngrp)\r\n            seri_list = []\r\n            series_list.forEach(\r\n                function(record){\r\n                    seri_list.push({\r\n                        \"Series\": record.seri,\r\n                        \"Description\": record.dsca\r\n                    })\r\n                }\r\n            )\r\n            manual_id = default_seri[0].man_soinv_seri\r\n            break;\r\n        \r\n        default:\r\n            jscall_error = \"Invalid Source Type.\"\r\n            return false;\r\n            break;\r\n    }\r\n    return {\r\n        \"manual_Id\": manual_id,\r\n        \"seri\": seri_list\r\n    }\r\n}\r\n\r\n\r\nfunction ctrlParamPage(){\r\n    if (jscall.company == 0){\r\n        return {\r\n            \"Self E-invoices\": true,\r\n            \"Consolidation Filing Selector\": true,\r\n            \"Cancellation Defaults\": true,\r\n            \"ExcelUpload\": true,\r\n            \"MasterData\": true\r\n        }\r\n    }\r\n    ret = {\r\n        \"Self E-invoices\": false,\r\n        \"Consolidation Filing Selector\": false,\r\n        \"Cancellation Defaults\": false,\r\n        \"ExcelUpload\": false,\r\n        \"MasterData\": false\r\n    }\r\n    einv_imp = CralDB.QueryByComp(\"select ctrl_cancellation,ctrl_consolidation,ctrl_slf_inv,ctrl_slf_crd_nt,ctrl_excel_upload from {{einv_implementation}}\", jscall.company)\r\n    if (einv_imp?.length != 0){\r\n        ret[\"Cancellation Defaults\"] = einv_imp[0]?.ctrl_cancellation\r\n        ret[\"Consolidation Filing Selector\"] = einv_imp[0]?.ctrl_consolidation\r\n        if (einv_imp[0]?.ctrl_slf_inv == true || einv_imp[0]?.ctrl_slf_crd_nt == true){\r\n            ret[\"Self E-invoices\"] = true\r\n        }\r\n        ret[\"ExcelUpload\"] = einv_imp[0]?.ctrl_excel_upload ? true : false\r\n    }\r\n    isSikpMaster = CralDB.QueryByComp(`select skip_master from {{entity_data_set}} where sup_company=${jscall.company} and skip_master=false`, jscall.company)\r\n    if (isSikpMaster?.length){\r\n        ret[\"MasterData\"] = true\r\n    }\r\n    return ret;\r\n}\r\n\r\nfunction isExcelUpload(){\r\n    einv_imp = CralDB.QueryByComp(\"select excel_upload from {{einv_implementation}}\", jscall.company)\r\n    if (einv_imp[0]?.excel_upload == true ){\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\nfunction getMandatoryFields()\r\n{\r\n    mand_flds = CralDB.QueryByComp(`select excl_interim_field from {{fld_parameter}} where mandatory = true`,jscall.company)\r\n    ret_mand_flds = []\r\n    for(i = 0;i<mand_flds.length;i++)\r\n    {\r\n        ret_mand_flds.push(mand_flds[i].excl_interim_field)\r\n    }\r\n    return ret_mand_flds\r\n}\r\nfunction deleteOldResources(){\r\n    results = []\r\n    allResources = Resources.ListResources()\r\n    if (allResources?.error == \"\"){\r\n        current_date = new Date()\r\n        for (i = 0; i < allResources.result.length; i++){\r\n            res = allResources.result[i]\r\n            res_date = res.CreatedTime.toString().split(\" \")[0]\r\n            \r\n            if (CralUtil.Date.Add(res_date.substring(0,23), \"48h00m00s\") < current_date.toISOString() \r\n                && ['Reports', 'PDF'].includes(res.Category)){  //To check the Category for Only E-Invoice PDFs.\r\n                result = Resources.DeleteResource(res.ID)\r\n                results.push({\r\n                    \"ID\": res.ID,\r\n                    \"status\": result?.error\r\n                })\r\n            }\r\n        }\r\n    }\r\n    return results\r\n}\r\n\r\nfunction isExcelTempAvil(){\r\n    if (CralDB.QueryByComp(`select temp_code from {{excl_temp}} where temp_code='${jscall.input.temp_code}'`, jscall.company)?.length != 0){\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n\r\nfunction UploadExcelFields(){\r\n    old_fields = CralDB.QueryByComp(\"DELETE from {{excl_temp}} where temp_code='$1'\", jscall.company, jscall.input.temp_code)\r\n    old_mapping = CralDB.QueryByComp(\"UPDATE {{upld_temp_lines}} SET excl_fld='', excl_fld_val='', check_mapping=false where temp_code='$1'\", jscall.company, jscall.input.temp_code)\r\n    topic = \"excl_temp\" \r\n    var company = jscall.company\r\n    var records = jscall.input.records \r\n    var results = []\r\n    records.forEach(\r\n        function (rec){\r\n           var result  = CralDB.PublishTopic(topic,company,\"Upsert\",rec,jscall.user,false)\r\n           results.push(result)\r\n        }\r\n    )\r\n    return results\r\n}\r\nfunction getCancellationDefaults(){\r\n\r\n    default_seri = CralDB.QueryByComp(\"select * from {{number_defaults}} where data_set = '$1' and comp = $2\",jscall.company,jscall.input.Dataset,jscall.input.Company)\r\n\r\n    seriesList = []\r\n\r\n    switch (jscall.input.SourceType) {\r\n        \r\n        case \"10\":\r\n            series_list = CralDB.QueryByComp(\"select seri,dsca from {{number_grp}} where ngrp='$1'\", jscall.company, default_seri[0].man_inv_ngrp)\r\n            seri_list = []\r\n            ManualSales = []\r\n            ManualSalesList = []\r\n            if(jscall.input.DocumentType == \"01\"){\r\n                        \r\n                series_list.forEach(\r\n                        function(record){\r\n                            ManualSalesList.push({\r\n                                \"Series\": record.seri,\r\n                                \"Description\": record.dsca\r\n                            })\r\n                        }\r\n                    )\r\n\r\n                ManualSales.push(default_seri[0].man_inv_seri)\r\n\r\n                seriesList.push(ManualSales)\r\n                seriesList.push(ManualSalesList)\r\n\r\n                return {\r\n                    seriesList\r\n                }    \r\n\r\n            }else{\r\n               \r\n                series_list.forEach(\r\n                    function(record){\r\n                        ManualSalesList.push({\r\n                            \"Series\": record.seri,\r\n                            \"Description\": record.dsca\r\n                        })\r\n                    }\r\n                )\r\n\r\n                ManualSales.push(default_seri[0].man_inv_seri) \r\n                \r\n                seriesList.push({ManualSales})\r\n                seriesList.push({ManualSalesList})\r\n\r\n                return {\r\n                   \r\n                    seriesList\r\n                } \r\n            }\r\n\r\n            break;\r\n        \r\n        case \"20\":\r\n            \r\n            if(jscall.input.withReceipts.toUpperCase() == \"YES\" && jscall.input.withShipments .toUpperCase() == \"NO\" || \r\n                jscall.input.withReceipts.toUpperCase() == \"NO\" && jscall.input.withShipments .toUpperCase() == \"YES\" ){\r\n            \r\n                default_seri.forEach(\r\n                    function(record){\r\n                        seriesList.push({\r\n                            \"SOR_Order_Type\":record.sor_ord_typ,\r\n                            \"SOR_Sales_Office\":record.sls_ofc,\r\n                            \"SOR_Return_Reason\":record.ret_reason,\r\n                            \"SOR_Invoice_Number_Group\":record.man_soinv_ngrp,\r\n                            \"SOR_Invoice_Series\":record.man_soinv_seri\r\n                        })\r\n                    }\r\n                )\r\n                seriesList.push(seriDesc(default_seri,false))\r\n\r\n                return{\r\n                    seriesList\r\n                }\r\n                \r\n            }else{\r\n\r\n                salesOrder = []\r\n                series_list = CralDB.QueryByComp(\"select seri,dsca from {{number_grp}} where ngrp='$1'\", jscall.company, default_seri[0].man_inv_ngrp)\r\n            \r\n                SalesOrderList = []\r\n                series_list.forEach(\r\n                    function(record){\r\n                        SalesOrderList.push({\r\n                            \"Series\": record.seri,\r\n                            \"Description\": record.dsca\r\n                        })\r\n                    }\r\n                )\r\n\r\n                salesOrder.push(default_seri[0].man_inv_seri) \r\n                \r\n                seriesList.push({salesOrder})\r\n                seriesList.push({SalesOrderList})\r\n\r\n                return {\r\n                   \r\n                    seriesList\r\n                }\r\n            }z\r\n\r\n            break;\r\n\r\n        case \"30\":\r\n        case \"50\":\r\n            \r\n            if(jscall.input.withShipments .toUpperCase() == \"YES\"){\r\n\r\n                default_seri.forEach(\r\n                    function(record){\r\n                        seriesList.push({\r\n                            \"Pur_Order_Type\":record.pur_ord_typ,\r\n                            \"Pur_Sales_Office\":record.pur_ofc,\r\n                            \"Pur_Return_Reason\":record.pur_ret_reson,\r\n                            \"Pur_Invoice_Number_Group\":record.pur_inv_ngrp,\r\n                            \"Pur_Invoice_Series\":record.pur_inv_seri\r\n                        })\r\n                    }\r\n                )\r\n                // pur_inv = true\r\n                seriesList.push(seriDesc(default_seri,true))\r\n\r\n            }else{\r\n                Transaction_types = []\r\n                Pur_Tran_Type = []\r\n                tranType = CralDB.QueryByComp(\"select src_tran_type, src_dsca from {{src_tran_types}} where tran_category = '$1'\",jscall.company,\"Purchase Credit Notes\") \r\n                // return tranType\r\n                tranType.forEach(\r\n                    function(record){\r\n                        Transaction_types.push({\r\n                            \"Transaction_Type\":record.src_tran_type,\r\n                            \"Description\":record.src_dsca \r\n                        })\r\n                    }\r\n                )\r\n\r\n                // tranType_dsca = CralDB.QueryByComp(\"select src_tran_type, src_dsca from {{src_tran_types}} where src_tran_type = '$1'\",jscall.company,default_seri[0].pur_tran_typ)\r\n                Pur_Tran_Type.push(default_seri[0].pur_tran_typ) \r\n                \r\n        \r\n                seriesList.push({Pur_Tran_Type})\r\n                seriesList.push({Transaction_types})\r\n            }\r\n            \r\n            return{\r\n                seriesList\r\n            }\r\n\r\n            break;\r\n\r\n        case \"40\":\r\n            Transaction_types = []\r\n            Pur_Tran_Type = []\r\n            seri_list = CralDB.QueryByComp(\"select src_tran_type, src_dsca from {{src_tran_types}} where tran_category = '$1'\",jscall.company,\"Sales Credit Notes\")\r\n            seri_list.forEach(\r\n                function(record){\r\n                    // debug(record)\r\n                    Transaction_types.push({ \r\n                        \"Transaction_Type\":record.src_tran_type,\r\n                        \"Description\":record.src_dsca\r\n                    })\r\n                }\r\n            )\r\n\r\n            Pur_Tran_Type.push(default_seri[0].sls_tran_typ)  \r\n                \r\n        \r\n            seriesList.push({Pur_Tran_Type})\r\n            seriesList.push({Transaction_types})\r\n\r\n\r\n            // sls_tran_type = default_seri[0].sls_tran_typ\r\n            return {\r\n                // sls_tran_type,\r\n                // Transaction_types\r\n                seriesList\r\n            }\r\n\r\n            break;\r\n\r\n        default:\r\n            jscall_error = \"Invalid Source Type.\"\r\n            return false;\r\n            break;\r\n    }\r\n}\r\nfunction seriDesc(default_seri,pur_inv){\r\n\r\n    // Series_List = []\r\n    // Order_Type = []\r\n    // Sales_Office = [] \r\n    // Return_Reason =[]\r\n    // Invoice_Number_Group =[]\r\n    // PurOrdType = []\r\n    // Pur_sls_offc =[]\r\n\r\n    ordType = CralDB.QueryByComp(\"select ord_typ,dsca from {{ord_type}} where data_set = '$1'\",jscall.company,default_seri[0].data_set) \r\n    slsOfc = CralDB.QueryByComp(\"select sls_ofc,dsca from {{sls_off}} where data_set = '$1'\",jscall.company,default_seri[0].data_set)\r\n    retReason = CralDB.QueryByComp(\"select ret_reason,dsca from {{ret_reason}} where data_set = '$1'\",jscall.company,default_seri[0].data_set)\r\n       // Purchase Sale_Office & Purchase Order_Type Query\r\n    pur_ordType = CralDB.QueryByComp(\"select pur_ord_type,dsca from {{pur_ord_type}} where data_set = '$1'\",jscall.company,default_seri[0].data_set) \r\n    pur_slsOfc = CralDB.QueryByComp(\"select pur_off,dsca from {{pur_off}} where data_set = '$1'\",jscall.company,default_seri[0].data_set)\r\n\r\n    if(pur_inv == true){\r\n\r\n        numberGroup = CralDB.QueryByComp(\"select ngrp,seri,dsca from {{number_grp}} where data_set = '$1' and ngrp ='$2'\",jscall.company,default_seri[0].data_set,default_seri[0].pur_inv_ngrp)\r\n\r\n        Return_Reason =[]\r\n        Invoice_Number_Group =[]\r\n        PurOrdType = []\r\n        Pur_sls_offc =[]\r\n\r\n        pur_ordType.forEach(\r\n            function(record){\r\n                PurOrdType.push({\r\n                    \"OrderType\":record.pur_ord_type,\r\n                    \"Description\":record.dsca\r\n                })\r\n            }\r\n        );\r\n        \r\n        pur_slsOfc.forEach(\r\n            function(record){\r\n                Pur_sls_offc.push({\r\n                    \"SalesOffice\":record.pur_off,\r\n                    \"Description\":record.dsca\r\n                })\r\n            }\r\n        )\r\n\r\n        retReason.forEach(\r\n            function(record){\r\n                Return_Reason.push({\r\n                    \"ReturnReason\":record.ret_reason,\r\n                    \"Description\":record.dsca\r\n                })\r\n            }\r\n        )\r\n\r\n        numberGroup.forEach(\r\n            function(record){\r\n                Invoice_Number_Group.push({\r\n                    \"InvNumberGroup\":record.ngrp,\r\n                    \"InvNumberSeries\":record.seri,\r\n                    \"Description\":record.dsca\r\n                })\r\n            }\r\n        )\r\n        return {\r\n            PurOrdType,\r\n            Pur_sls_offc,\r\n            Return_Reason,\r\n            Invoice_Number_Group\r\n        }\r\n    }else{\r\n\r\n        numberGroup = CralDB.QueryByComp(\"select ngrp,seri,dsca from {{number_grp}} where data_set = '$1' and ngrp ='$2'\",jscall.company,default_seri[0].data_set,default_seri[0].man_soinv_ngrp)\r\n\r\n        Order_Type = []\r\n        Sales_Office = []\r\n        Return_Reason = []\r\n        Invoice_Number_Group = []\r\n\r\n        ordType.forEach(\r\n            function(record){\r\n                Order_Type.push({\r\n                    \"OrderType\":record.ord_typ,\r\n                    \"Description\":record.dsca\r\n                })\r\n            }\r\n        );\r\n        \r\n        slsOfc.forEach(\r\n            function(record){\r\n                Sales_Office.push({\r\n                    \"SalesOffice\":record.sls_ofc,\r\n                    \"Description\":record.dsca\r\n                })\r\n            }\r\n        )\r\n\r\n        retReason.forEach(\r\n            function(record){\r\n                Return_Reason.push({\r\n                    \"ReturnReason\":record.ret_reason,\r\n                    \"Description\":record.dsca\r\n                })\r\n            }\r\n        )\r\n\r\n        numberGroup.forEach(\r\n            function(record){\r\n                Invoice_Number_Group.push({\r\n                    \"InvNumberGroup\":record.ngrp,\r\n                    \"InvNumberSeries\":record.seri,\r\n                    \"Description\":record.dsca\r\n                })\r\n            }\r\n        )\r\n        return {\r\n            Order_Type,\r\n            Sales_Office,\r\n            Return_Reason,\r\n            Invoice_Number_Group\r\n        }\r\n    }\r\n    // return {\r\n    //     Order_Type,\r\n    //     Sales_Office,\r\n    //     Return_Reason,\r\n    //     Invoice_Number_Group\r\n    // }\r\n}\r\n\r\nfunction getNumberingDefaultValues(){\r\n    return {\r\n        \"SalesOrderType\": CralDB.QueryByComp(`SELECT ord_typ AS \"OrderType\", dsca AS \"Description\" FROM {{ord_type}}`, jscall.company),\r\n        \"SalesOffice\": CralDB.QueryByComp(`SELECT sls_ofc AS \"SalesOffice\", dsca AS \"Description\" FROM {{sls_off}}`, jscall.company),\r\n        \"ReturnReason\": CralDB.QueryByComp(`SELECT ret_reason AS \"ReturnReason\", dsca AS \"Description\" from {{ret_reason}}`, jscall.company),\r\n        \r\n        \"SalesTransactionType\": CralDB.QueryByComp(`SELECT src_tran_type AS \"TransactionType\", src_dsca AS \"Description\" FROM {{src_tran_types}} WHERE tran_category = 'Sales Credit Notes'`, jscall.company) ,\r\n\r\n        // Common Number Group for Both Sales and Purchase Finance.\r\n        \"NumberGroup\": CralDB.QueryByComp(`SELECT DISTINCT ngrp AS \"InvNumberGroup\" from {{number_grp}}`, jscall.company),\r\n        \"Series\": CralDB.QueryByComp(`SELECT ngrp AS \"InvNumberGroup\", seri AS \"InvNumberSeries\", dsca AS \"Description\" from {{number_grp}}`, jscall.company),\r\n        // \"SOR_NumberGroup\": CralDB.QueryByComp(`SELECT ngrp AS \"InvNumberGroup\" from {{number_grp}}`, jscall.company),\r\n        // \"SOR_Series\": CralDB.QueryByComp(`SELECT ngrp AS \"InvNumberGroup\", seri AS \"InvNumberSeries\", dsca AS \"Description\" from {{number_grp}}`, jscall.company),\r\n\r\n        \"PurchaseTransactionType\": CralDB.QueryByComp(`SELECT src_tran_type AS \"TransactionType\", src_dsca AS \"Description\" FROM {{src_tran_types}} WHERE tran_category = 'Purchase Credit Notes'`, jscall.company) ,\r\n        \"PurchaseOrderType\": CralDB.QueryByComp(`SELECT pur_ord_type AS \"PurOrderType\", dsca AS \"Description\" FROM {{pur_ord_type}}`, jscall.company),\r\n        \"PurchaseOffice\": CralDB.QueryByComp(`SELECT pur_off AS \"PurchaseOffice\", dsca AS \"Description\" FROM {{pur_off}}`, jscall.company)\r\n    }\r\n}"
        },
        {
            "Bizobj": {
                "ObjectName": "printReport",
                "Description": "printReportLayout",
                "external": false,
                "input_struct": "",
                "out_success": "",
                "out_fail": ""
            },
            "Script": "//**** Business Object printReport Created by parthi on 27-Jun-2024 19:25:25 ****//\r\n\r\n// let vld_date;\r\nfunction printReportLayout(print_inv_number, qr_link, lhdn_vld){\r\n    vld_date = lhdn_vld\r\n   \r\n    headerArray =[]\r\n    einv_header = CralDB.QueryByComp(\"select * from {{einv_header}} where e_inv_no='$1'\",jscall.company,print_inv_number)\r\n   \r\n    if(einv_header.length != 0){\r\n        supcomp = CralDB.QueryByComp(\"select sup_name, sup_email, sup_cont_num, sup_adrs,def_type, free_trade from {{supplier_companies}} where sup_company = '$1'\",jscall.company,einv_header[0].comp)\r\n       \r\n        if(einv_header[0].sctg == \"20\"){\r\n            \r\n            if(supcomp[0].free_trade == \"\"){\r\n                salectg = supcomp[0].def_type\r\n            }else{\r\n                salectg = supcomp[0].free_trade\r\n            }\r\n        }else{\r\n            salectg = supcomp[0].def_type\r\n        }\r\n\r\n        if (!salectg){\r\n            return {\r\n                \"error\": \"Default Layout Type is not Maintained.\",\r\n                \"result\": \"\"\r\n            }\r\n        }\r\n        // Check for Custom Report and Print it.\r\n        let customReportDetails = getCustomReport(print_inv_number)\r\n        if (customReportDetails.rpt_id){\r\n            if (Reports.GetReport(customReportDetails.rpt_id).ReportID){\r\n                pdf_result = Reports.GenerateReportWithCustomVars(customReportDetails.rpt_id, jscall.company, customReportDetails.cus_var, print_inv_number)\r\n                if (!pdf_result?.Error && pdf_result?.ResourceID){\r\n\r\n                    file_name_ret = Resources.UpdateResource(pdf_result.ResourceID, `${print_inv_number}.pdf`)\r\n                    if (file_name_ret?.error){\r\n                        CralUtil.LogInfo(\"RenameError\", print_inv_number, file_name_ret)\r\n                        return {\r\n                            \"error\": file_name_ret.error,\r\n                            \"result\": \"\"\r\n                        }\r\n                    }\r\n                    return {\r\n                        \"error\": \"\",\r\n                        \"result\": pdf_result.ResourceID\r\n                    }\r\n                } else {\r\n                    return {\r\n                        \"error\": pdf_result?.Error,\r\n                        \"result\": pdf_result?.ResourceID\r\n                    }\r\n                }\r\n            } else {\r\n                return {\r\n                    \"error\": `Custom Report ${customReportDetails.rpt_id} Not Found.`,\r\n                    \"result\": \"\"\r\n                }\r\n            }\r\n        } \r\n\r\n        // Checking validation print report layout\r\n        \r\n        var reportHeader = CralDB.QueryByComp(\"select * from {{rep_layouts_header}} where layout_code='$1'\", jscall.company, salectg)\r\n        if (reportHeader[0].is_report == true){\r\n            \r\n            pdf_result = Reports.GenerateReport(reportHeader[0].report_name ? reportHeader[0].report_name : salectg, jscall.company, print_inv_number)\r\n            if (!pdf_result?.Error && pdf_result?.ResourceID){\r\n\r\n                file_name_ret = Resources.UpdateResource(pdf_result.ResourceID, `${print_inv_number}.pdf`)\r\n                CralUtil.LogInfo(\"RenamePDF\", print_inv_number, file_name_ret)\r\n                if (file_name_ret?.error){\r\n                    return {\r\n                        \"error\": file_name_ret.error,\r\n                        \"result\": \"\"\r\n                    }\r\n                }\r\n                return {\r\n                    \"error\": \"\",\r\n                    \"result\": pdf_result.ResourceID\r\n                }\r\n            } else {\r\n                return {\r\n                    \"error\": pdf_result?.Error,\r\n                    \"result\": pdf_result?.ResourceID\r\n                }\r\n            }\r\n        }\r\n        if(reportHeader.length != 0){\r\n        \r\n            var LayoutValidation= {\r\n                    \"repeatreportheader\": reportHeader[0].r_rep_head,\r\n                    \"repeatgroupheader\": reportHeader[0].r_grp_head,\r\n                    \"repeatreportfooter\": reportHeader[0].r_footer,\r\n                    \"pagenumber\": reportHeader[0].page_no,\r\n                    \"orientation\": reportHeader[0].rep_format,\r\n                    \"uniqueid\": print_inv_number,\r\n                    \"font\": reportHeader[0].font\r\n                }\r\n       \r\n            reportLine = returnObjValues(reportHeader, print_inv_number,supcomp, qr_link,salectg);\r\n        //  return reportLine\r\n        }else{\r\n            jscall_error = \"Given Report layout not maintain supplier company table\"\r\n            return false\r\n        }\r\n        response = {\r\n            LayoutValidation,\r\n            ReportHeader,\r\n            GroupHeaderLeft,\r\n            GroupHeaderRight,\r\n            Details,\r\n            DetailFooter,\r\n            Taxdetails,\r\n            ReportFooter,\r\n            QRData,\r\n            LogoPath\r\n        }\r\n        \r\n        var pdfObj = PrintPDF.PrintPDFMain(JSON.stringify(response))\r\n\r\n        if(pdfObj == \"\"){\r\n\r\n            var result = Resources.CreateResource(\"PDF\",\"./PrintPDF/PDFs/\"+print_inv_number+\".pdf\")\r\n            return result\r\n            \r\n        }else{\r\n            return {\r\n                \"error\": pdfObj,\r\n                \"result\": \"\"\r\n            }  \r\n        }\r\n    }else{\r\n        jscall_error = \"No Data Found\"\r\n    }\r\n   \r\n}\r\n\r\nexports.printReportLayout = printReportLayout\r\n\r\nfunction getCustomReport(einv_number){\r\n    custom_rpts = CralDB.QueryByComp(`select DISTINCT report_id,criteria from {{rpt_parameter}} order by report_id,criteria`, jscall.company)\r\n    if (custom_rpts.length){\r\n        for (let i=0; i<custom_rpts.length; i++){\r\n            rpt_criteria = CralDB.QueryByComp(`select * from {{rpt_parameter}} where report_id='${custom_rpts[i].report_id}' and criteria=${custom_rpts[i].criteria}`, jscall.company)\r\n            // return rpt_criteria\r\n            // return checkCustomReportCode(rpt_criteria, einv_number)\r\n            customReport = checkCustomReportCode(rpt_criteria, einv_number)\r\n            if (customReport){\r\n                return {\r\n                    \"rpt_id\": custom_rpts[i].report_id, \r\n                    \"cus_var\": getCustomVariables(rpt_criteria, einv_number)\r\n                }\r\n            } else {\r\n                continue\r\n            }\r\n        }\r\n    } //else {\r\n    //     return {\r\n    //         \"rpt_id\": \"\", \r\n    //         \"cus_var\": {}\r\n    //     }\r\n    // }\r\n    return {\r\n        \"rpt_id\": \"\", \r\n        \"cus_var\": {}\r\n    }\r\n}\r\nexports.getCustomReport = getCustomReport\r\n\r\nfunction checkCustomReportCode(criteria, einv_number){\r\n    let query = `select e_inv_no from {{einv_header}} where e_inv_no='${einv_number}'`\r\n    criteria.forEach(data => {\r\n        if (!data.is_cus_var){\r\n            query += ` and (${data.field_name} ${data.condition.replaceAll('or', `or ${data.field_name} `).replaceAll('and', `and ${data.field_name} `)})`\r\n        }\r\n    })\r\n    debug(query)\r\n    if (CralDB.QueryByComp(query, jscall.company).length){\r\n        return true\r\n    } else {\r\n        return false\r\n    }\r\n}\r\n\r\nfunction getCustomVariables(criteria, einv_number){\r\n    let results = {}\r\n    criteria.forEach(data => {\r\n        if (data.is_cus_var){\r\n            check_query = `select e_inv_no from {{einv_header}} where e_inv_no='${einv_number}' and ${data.field_name} ${data.condition.replace('or', `or ${data.field_name} `).replace('and', `and ${data.field_name} `)}`\r\n            if (CralDB.QueryByComp(check_query, jscall.company).length) {\r\n                results[data.cus_var_key] = data.cus_var_value\r\n            }\r\n        }\r\n    })\r\n    return results\r\n}\r\n\r\nfunction returnObjValues(reportHeader, print_inv_number,supcomp, qr_link,salectg) {\r\n    // return einv_header[0].tote\r\n    if(reportHeader[0].back_clr_head == \"\"){\r\n        RH = 255\r\n        GH = 255\r\n        BH = 255\r\n        AH = 1\r\n    }else{\r\n\r\n        if(reportHeader[0].back_clr_head.length < 10){ //*  Report Header Background Color (hex to RGB)\r\n\r\n            var colorVal_Header = hexToRGB(reportHeader[0].back_clr_head);\r\n            \r\n            if(colorVal_Header.a == \"null\"){\r\n                \r\n                RH = colorVal_Header.r \r\n                GH = colorVal_Header.g\r\n                BH = colorVal_Header.b\r\n                AH = 1\r\n            \r\n            }else{\r\n                RH = colorVal_Header.r \r\n                GH = colorVal_Header.g\r\n                BH = colorVal_Header.b\r\n                AH = colorVal_Header.a\r\n                \r\n            }\r\n            \r\n        }else{\r\n            var colorVal_Header = rgbaToRgb(reportHeader[0].back_clr_head) //* (RGBA to RGB)\r\n\r\n            RH = colorVal_Header.r \r\n            GH = colorVal_Header.g\r\n            BH = colorVal_Header.b\r\n            AH = colorVal_Header.a\r\n        }\r\n    }\r\n    if(reportHeader[0].back_clr_footer == \"\"){\r\n        RL = 255\r\n        GL = 255\r\n        BL = 255\r\n        AL = 1\r\n    }else{\r\n        if(reportHeader[0].back_clr_footer.length < 10){ //* Report Footer Background color (hex to RGB)\r\n\r\n            var colorVal_Line = hexToRGB(reportHeader[0].back_clr_footer);\r\n\r\n            if(colorVal_Line.a == \"null\" ){\r\n                \r\n                RL = colorVal_Line.r \r\n                GL = colorVal_Line.g\r\n                BL = colorVal_Line.b\r\n                AL = 1\r\n                \r\n            }else{\r\n                RL = colorVal_Line.r \r\n                GL = colorVal_Line.g\r\n                BL = colorVal_Line.b\r\n                AL = colorVal_Line.a\r\n                \r\n            }\r\n        \r\n        }else{\r\n            var colorVal_Line = rgbaToRgb(reportHeader[0].back_clr_footer) //* (RGBA to RGB)\r\n\r\n            RL = colorVal_Line.r \r\n            GL = colorVal_Line.g\r\n            BL = colorVal_Line.b\r\n            AL = colorVal_Line.a\r\n        }\r\n    }\r\n    if(reportHeader[0].back_clr_table == \"\"){\r\n        RT = 236\r\n        GT = 236\r\n        BT = 236\r\n        AT = 1\r\n    }else{\r\n\r\n        if(reportHeader[0].back_clr_table.length < 10){ //* Report Table Header Color (Hex to RGB)\r\n\r\n            var colorVal_TblHeader = hexToRGB(reportHeader[0].back_clr_table);\r\n\r\n            if(colorVal_TblHeader.a == \"null\" ){\r\n                \r\n                RT = colorVal_TblHeader.r \r\n                GT = colorVal_TblHeader.g\r\n                BT = colorVal_TblHeader.b\r\n                AT = 1\r\n                \r\n            }else{\r\n                RT = colorVal_TblHeader.r \r\n                GT = colorVal_TblHeader.g\r\n                BT = colorVal_TblHeader.b\r\n                AT = colorVal_TblHeader.a\r\n                \r\n            }\r\n        }else{\r\n            var colorVal_TblHeader = rgbaToRgb(reportHeader[0].back_clr_table)//* (RGBA to RGB)\r\n                \r\n            RT = colorVal_TblHeader.r \r\n            GT = colorVal_TblHeader.g\r\n            BT = colorVal_TblHeader.b\r\n            AT = colorVal_TblHeader.a\r\n                \r\n        }\r\n    }\r\n    // stateCode = CralDB.QueryByComp(\"select src_dsca from {{map_state_codes}} where data_set='$1' and src_cste ='$2' and src_ccty ='$3'\",jscall.company,einv_header[0].dataset,einv_header[0].sup_cste,einv_header[0].sup_country)\r\n    stateCode = CralDB.QueryByComp(\"select dsca from {{state_codes}} where code ='$1'\",jscall.company,einv_header[0].sup_cste)\r\n    countryCodesup = CralDB.QueryByComp(\"select dsca from {{country}} where ccty ='$1'\",jscall.company,einv_header[0].sup_country)\r\n\r\n    sup_adrLine = []\r\n\r\n    if (einv_header[0].sup_adrs_line0)sup_adrLine.push(` ${einv_header[0].sup_adrs_line0}`);\r\n    if (einv_header[0].sup_adrs_line1)sup_adrLine.push(` ${einv_header[0].sup_adrs_line1}`);\r\n    if (einv_header[0].sup_adrs_line2)sup_adrLine.push(` ${einv_header[0].sup_adrs_line2}`);\r\n    if (einv_header[0].sup_postal_zone)sup_adrLine.push(` ${einv_header[0].sup_postal_zone}`);\r\n    if (einv_header[0].sup_city)sup_adrLine.push(` ${einv_header[0].sup_city}`);\r\n    if (stateCode.length != 0){\r\n        sup_adrLine.push(` ${stateCode[0].dsca}`);\r\n    }\r\n    if (countryCodesup.length != 0){\r\n        sup_adrLine.push(  `${\" \"+countryCodesup[0].dsca}`)\r\n    }\r\n    suplierAddress = sup_adrLine.join(',') //* Get Supplier Address if any empty space tirm the that space condition\r\n\r\n    stateCodebuy = CralDB.QueryByComp(\"select dsca from {{state_codes}} where code ='$1'\",jscall.company,einv_header[0].buy_cste)\r\n    countryCodebuy = CralDB.QueryByComp(\"select dsca from {{country}} where ccty ='$1'\",jscall.company,einv_header[0].buy_country)\r\n    addressLines = [];\r\n    // return countryCodebuy\r\n    // Check each field and add it to the array if it's not empty\r\n    if (einv_header[0].buy_adrs_line0)  addressLines.push(` ${einv_header[0].buy_adrs_line0}`);\r\n    if (einv_header[0].buy_adrs_line1)  addressLines.push(` ${einv_header[0].buy_adrs_line1}`);\r\n    if (einv_header[0].buy_adrs_line2)  addressLines.push(` ${einv_header[0].buy_adrs_line2}`);\r\n    if (einv_header[0].buy_postal_zone) addressLines.push(` ${einv_header[0].buy_postal_zone}`);\r\n    if (einv_header[0].buy_city)        addressLines.push(` ${einv_header[0].buy_city}`);\r\n\r\n    if (stateCodebuy.length != 0){\r\n        // if (stateCode[0].src_dsca)sup_adrLine.push(` ${stateCode[0].src_dsca}`);\r\n        addressLines.push(` ${stateCodebuy[0].dsca}`); //* Get Buyer Address if any empty space tirm the that space condition\r\n    }\r\n    if (countryCodebuy.length != 0) {\r\n        addressLines.push(` ${countryCodebuy[0].dsca}`)\r\n    }\r\n    // Join the non-empty lines into a single string separated by newline characters\r\n    addressString = addressLines.join(',')\r\n    // return addressString\r\n\r\n    einv_line = CralDB.QueryByComp(\"select * from {{einv_lines}} where e_inv_no='$1' order by line\",jscall.company,print_inv_number)\r\n    einv_line_tax = CralDB.QueryByComp(\"select sum(amti),cvat,pvat from {{einv_lines}} where e_inv_no='$1' group by cvat,pvat \",jscall.company,print_inv_number)\r\n    \r\n    rep_line_detail = CralDB.QueryByComp(\"select field_name,seq from {{rep_layouts_line}} where layout_code ='$1' and print = true and grp_typ ='Detail' order by seq\", jscall.company, salectg);\r\n    rep_line_detail_footer = CralDB.QueryByComp(\"select field_name,seq from {{rep_layouts_line}} where layout_code ='$1' and print = true and grp_typ = 'Detail Footer' order by seq\", jscall.company, salectg);\r\n    rep_line_footer = CralDB.QueryByComp(\"select field_name,seq from {{rep_layouts_line}} where layout_code ='$1' and print = true and grp_typ = 'Footer' order by seq\", jscall.company, salectg);\r\n    rep_line_group_header = CralDB.QueryByComp(\"select field_name,seq from {{rep_layouts_line}} where layout_code ='$1' and print = true and grp_typ = 'Group Header' order by seq\", jscall.company, salectg);\r\n    rep_line_report_header = CralDB.QueryByComp(\"select field_name,seq from {{rep_layouts_line}} where layout_code ='$1' and print = true and grp_typ = 'Report Header' order by seq\", jscall.company, salectg);\r\n    // var currentDate = dateValidation()\r\n    \r\n    var Values = []\r\n    var values = []\r\n\r\n    subTotal = 0\r\n   \r\n\r\n    if(einv_line_tax.length != 0){\r\n        \r\n        for(var j = 0; j < einv_line_tax.length; j++){\r\n\r\n             row = []\r\n\r\n            for (var line_t = 0; line_t < rep_line_footer.length; line_t++){\r\n                tot_serv_pric = einv_line_tax[j].sum.toFixed(2)\r\n                switch (rep_line_footer[line_t].field_name){\r\n\r\n                    case \"Total Product / Service Price\":\r\n                        if(tot_serv_pric == \"\"){\r\n                            row.push({ \"value\": \"0.00\"})\r\n                        }else{\r\n                            row.push({ \"value\": tot_serv_pric })\r\n                        }\r\n                        break;\r\n                    case \"Tax Type\":\r\n                        if(einv_line_tax[j].cvat == \"\"){\r\n                            row.push({ \"value\": \"-\" })\r\n                        }else{\r\n                            row.push({ \"value\": einv_line_tax[j].cvat })\r\n                        }\r\n                        break;\r\n                    case \"Tax Rate\":\r\n                        if( einv_line_tax[j].pvat == \"\"){\r\n                            row.push({\"value\": \"0\"})\r\n                        }else{\r\n                            row.push({\"value\": einv_line_tax[j].pvat.toString()})\r\n                        }\r\n                        break;\r\n                    case \"Tax Amount\":\r\n                        if(einv_header[0].tott == \"\"){\r\n                            row.push({\"value\": \"0.00\"})\r\n                        }else{\r\n                            row.push({\"value\": einv_line[j].txai.toFixed(2).toString()})\r\n                            // row.push({\"value\": einv_header[0].tott.toString()})\r\n                        }\r\n                        break;\r\n                \r\n                }\r\n            }\r\n\r\n            values.push({\r\n                \"row\": row  \r\n            })\r\n\r\n            \r\n        }\r\n    }else{\r\n\r\n        jscall_error = \"No data found in E-Invoice table\"\r\n        return false\r\n    }\r\n        \r\n    if (rep_line_report_header.length == 0){\r\n        jscall_error = \"Invalid Report Header Fields\"\r\n        return false \r\n    }else{\r\n\r\n        Namedvalues =[]\r\n\r\n        // report_header = CralDB.QueryByComp(\"select max(seq) from {{rep_layouts_line}} where layout_code='$1' and print=true and grp_typ='Report Header'\", jscall.company, salectg);\r\n\r\n        for(var hseqn = 0; hseqn < rep_line_report_header.length; hseqn++){\r\n            Namedvalues.push({ \"FieldName\": rep_line_report_header[hseqn].field_name, \"FieldValue\": get_report_header_Value(rep_line_report_header[hseqn].field_name) })\r\n        }\r\n        \r\n        \r\n        supAdrress = CralDB.QueryByComp(\"select * from {{address_master}} where adrs_code = '$1'\",jscall.company,supcomp[0].sup_adrs)\r\n\r\n        stateCodesup = CralDB.QueryByComp(\"select src_dsca,dsca from {{map_state_codes}} where src_cste='$1' and src_ccty='$2'\",jscall.company,supAdrress[0].adrs_state,supAdrress[0].adrs_country)\r\n        countyCodesup = CralDB.QueryByComp(\"select src_dsca,dsca from {{country_codes}} where src_ccty='$1'\",jscall.company,supAdrress[0].adrs_country)\r\n        // return countyCodesup\r\n        // return supAdrress[0].data_set\r\n        supAdre = [];\r\n\r\n        if (supAdrress[0].adrs_line0)supAdre.push(` ${supAdrress[0].adrs_line0}`);\r\n        if (supAdrress[0].adrs_line1)supAdre.push(` ${supAdrress[0].adrs_line1}`);     \r\n        if (supAdrress[0].adrs_line2)supAdre.push(` ${supAdrress[0].adrs_line2}`);\r\n        if (supAdrress[0].postal_zone)supAdre.push(` ${supAdrress[0].postal_zone}`);\r\n        if (supAdrress[0].adrs_city)supAdre.push(` ${supAdrress[0].adrs_city}`);\r\n        if (stateCodesup.length !== 0){\r\n            supAdre.push(` ${stateCodesup[0].dsca}`);\r\n        }\r\n        if (countyCodesup[0].dsca)supAdre.push(` ${countyCodesup[0].dsca}`);\r\n        address_sup = supAdre.join(',');\r\n        \r\n        ReportHeader = {\r\n            \"bgcolor\": {\r\n                \"r\": RH,\r\n                \"g\": GH,\r\n                \"b\": BH,\r\n                \"a\": AH\r\n            },\r\n            \"Title\": supcomp[0].sup_name,\r\n            \"Directvalues\": [\r\n                \r\n                { \"value\": address_sup.trim() },\r\n                { \"value\": \"Contact No: \"+supcomp[0].sup_cont_num+\" \"+\"Mail ID: \"+supcomp[0].sup_email}\r\n                \r\n            ],\r\n            \"Namedvalues\": Namedvalues\r\n            \r\n        }\r\n    }\r\n    if(rep_line_group_header.length == 0 ){\r\n\r\n        jscall_error = \"Invalid Report Group Header Fields\"\r\n        return false\r\n\r\n    }else{\r\n\r\n        Namedvalues = []\r\n        NamedValues = []\r\n        \r\n        // group_header = CralDB.QueryByComp(\"select max(seq) from {{rep_layouts_line}} where layout_code='$1' and print=true and grp_typ='Group Header'\", jscall.company, salectg);\r\n        \r\n        for(var seqn = 0; seqn < rep_line_group_header.length; seqn++){\r\n\r\n            if(rep_line_group_header[seqn].field_name == \"Buyer TIN\" || rep_line_group_header[seqn].field_name == \"Buyer Name\" || rep_line_group_header[seqn].field_name == \"Buyer Reg.No\" || rep_line_group_header[seqn].field_name == \"Buyer SST reg.ID\" || rep_line_group_header[seqn].field_name == \"Contact Number\" || rep_line_group_header[seqn].field_name == \"Address\" || rep_line_group_header[seqn].field_name == \"Buyer Exemption Number\" || rep_line_group_header[seqn].field_name == \"Bill Reference Number\"){\r\n            \r\n                Namedvalues.push({ \"FieldName\": rep_line_group_header[seqn].field_name, \"FieldValue\": get_grp_header(rep_line_group_header[seqn].field_name) })    \r\n            }else{\r\n                NamedValues.push({ \"FieldName\": rep_line_group_header[seqn].field_name, \"FieldValue\": get_grp_header(rep_line_group_header[seqn].field_name) })\r\n\r\n            }\r\n        }\r\n\r\n        GroupHeaderLeft = {\r\n            \"Title\": \"Supplier Info\",\r\n            \"Namedvalues\": NamedValues\r\n            \r\n        }\r\n        GroupHeaderRight = {\r\n            \"Title\": \"Buyer Info\",\r\n            \"Namedvalues\": Namedvalues\r\n            \r\n        }\r\n    }\r\n    if(rep_line_detail.length == 0){\r\n\r\n        jscall_error = \"Invalid Report Detail Fields\"\r\n        return false\r\n\r\n    }else{\r\n\r\n        if (einv_line.length != 0) {\r\n            \r\n            for(var i = 0; i < einv_line.length; i++){\r\n                subTotal = subTotal + einv_line[i].stot\r\n                row = []\r\n\r\n                for (line_t = 0; line_t < rep_line_detail.length; line_t++){\r\n                    switch (rep_line_detail[line_t].field_name){\r\n                       \r\n                        case \"Classification\":\r\n                            row.push({ \"value\": einv_line[i].clas })\r\n                            break;\r\n                        case \"Item\":\r\n                            row.push({ \"value\":einv_line[i].item })\r\n                            break;\r\n                        case \"Item Description\":\r\n                            row.push({ \"value\": einv_line[i].item_desc })\r\n                            break;\r\n                        case \"Qty\":\r\n                            row.push({\"value\": einv_line[i].dqua.toString()})\r\n                            break;\r\n                        case \"Unit Price\":\r\n                            row.push({\"value\": einv_line[i].pric.toFixed(2).toString()})\r\n                            break;\r\n                        case \"Disc\":\r\n                            row.push({\"value\": einv_line[i].disc.toString()})\r\n                            break;\r\n                        case \"Amount\":\r\n                            row.push({\"value\": einv_line[i].amti.toFixed(2).toString()})\r\n                            break;\r\n                        case \"Tax Amount\":\r\n                            row.push({\"value\": einv_line[i].txai.toFixed(2).toString()})\r\n                            break;\r\n                        case \"Total Product / Service(Incl.Tax)\":\r\n                            // row.push({\"value\": einv_line[i].amti.toString()})\r\n                            row.push({\"value\": (einv_line[i].amti + einv_line[i].txai).toFixed(2).toString()})\r\n                            break;\r\n                    }\r\n                }\r\n\r\n                Values.push({\r\n                    \"row\": row\r\n                })\r\n\r\n            }\r\n        }else{\r\n\r\n            jscall_error = \"No data found in E-Invoice Line\"\r\n            return false\r\n\r\n        }\r\n        \r\n        Titles = []\r\n        // detail = CralDB.QueryByComp(\"select max(seq) from {{rep_layouts_line}} where layout_code='$1' and print = true and grp_typ='Detail'\", jscall.company, salectg);\r\n        \r\n        for(var dseq = 0; dseq < rep_line_detail.length; dseq++){\r\n            if(rep_line_detail[dseq].field_name == \"Unit Price\" || rep_line_detail[dseq].field_name == \"Amount\" || rep_line_detail[dseq].field_name == \"Total Product / Service(Incl.Tax)\"){\r\n                \r\n                Titles.push({ \"Title\": rep_line_detail[dseq].field_name+\" (\"+einv_header[0].ccur+\")\" , \"type\": \"string\", \"Length\": getLength(rep_line_detail[dseq].field_name) })\r\n           \r\n            }else{    \r\n            \r\n                Titles.push({ \"Title\": rep_line_detail[dseq].field_name , \"type\": \"string\", \"Length\": getLength(rep_line_detail[dseq].field_name) })\r\n            \r\n            }\r\n        }\r\n\r\n        Details = {\r\n            \"bgcolor\": {\r\n                \"r\": RT,\r\n                \"g\": GT,\r\n                \"b\": BT,\r\n                \"a\": AT\r\n            },\r\n            \"Titles\": Titles,\r\n            \"Values\": Values\r\n        }   \r\n    }\r\n    if(rep_line_detail_footer.length == 0){\r\n        jscall_error = \"Invalid Report Detail Footer Fields\"\r\n        return false\r\n    }else{\r\n\r\n        DetailFooter = []\r\n\r\n        // detail_footer = CralDB.QueryByComp(\"select max(seq) from {{rep_layouts_line}} where layout_code='$1' and print=true and grp_typ='Detail Footer'\", jscall.company, salectg);\r\n\r\n        for(var dfseqn = 0; dfseqn < rep_line_detail_footer.length; dfseqn++){\r\n            DetailFooter.push({ \"FieldName\": rep_line_detail_footer[dfseqn].field_name, \"FieldValue\": get_detail_footer_Value(rep_line_detail_footer[dfseqn].field_name) })           \r\n        }\r\n        \r\n    }\r\n    if(rep_line_footer.length == 0){\r\n\r\n        jscall_error = \"Invalid Report Line Footer Fields\"\r\n        return false\r\n\r\n    }else{\r\n\r\n        Titles = []\r\n        Namedvalues =[]\r\n\r\n        // footer = CralDB.QueryByComp(\"select max(seq) from {{rep_layouts_line}} where layout_code='$1' and print=true and grp_typ='Footer'\", jscall.company, salectg);\r\n\r\n        for(var fseq = 0; fseq < rep_line_footer.length; fseq++){\r\n            if(rep_line_footer[fseq].field_name !== \"Date & Time of Validation\" && rep_line_footer[fseq].field_name !== \"Digital Signature\"){\r\n                Titles.push({ \"Title\": rep_line_footer[fseq].field_name, \"type\": \"string\", \"Length\": lineFooterLenth(rep_line_footer[fseq].field_name) })\r\n            }else{\r\n                Namedvalues.push({ \"FieldName\": rep_line_footer[fseq].field_name, \"FieldValue\": get_field_ValuesLF(rep_line_footer[fseq].field_name, vld_date) })\r\n            }\r\n        }\r\n\r\n        Taxdetails = {\r\n            \"Titles\": Titles,\r\n            \"Values\": values\r\n        }\r\n        ReportFooter = {\r\n            \"bgcolor\": {\r\n                \"r\": RL,\r\n                \"g\": GL,\r\n                \"b\": BL,\r\n                \"a\": AL\r\n            },\r\n            \"Namedvalues\": Namedvalues\r\n            \r\n        }\r\n    }   \r\n        \r\n        QRData= qr_link\r\n        \r\n        LogoPath = \"C:\\Logo\\pngtree-salon-logo-png-image_4004444.png\"\r\n\r\n    return {\r\n        ReportHeader,\r\n        GroupHeaderLeft,\r\n        GroupHeaderRight,\r\n        Details,\r\n        DetailFooter,\r\n        Taxdetails,\r\n        ReportFooter,\r\n        QRData,\r\n        LogoPath\r\n        }\r\n}\r\nfunction get_report_header_Value(rep_fieldname){\r\n   \r\n    switch(rep_fieldname){\r\n       \r\n        case \"E-Invoice Type\":\r\n            if(einv_header[0].doct == \"\"){\r\n                return \"\"\r\n            }\r\n            return einv_header[0].doct + \" - \" + CralDB.QueryByComp(\"select dsca from {{einv_doc_types}} where code='\" + einv_header[0].doct + \"'\", jscall.company)[0].dsca \r\n        case \"E-Invoice Version\":\r\n            return \"1.0\"\r\n        case \"E-Invoice Number\":\r\n            if(einv_header[0].e_inv_no == \"\"){\r\n                return \"\"\r\n            }\r\n            return einv_header[0].e_inv_no\r\n        case \"Unique Identifier No\":\r\n            if(einv_header[0].doc_uuid == \"\"){\r\n                return \"\"\r\n            }\r\n            return einv_header[0].doc_uuid\r\n        case \"Original Invoice Ref No\":\r\n            if(einv_header[0].org_e_inv_no == \"\"){\r\n                return \"\"\r\n            }\r\n            return einv_header[0].org_e_inv_no\r\n        case \"Date & Time\":\r\n            return dateValidation()\r\n        \r\n        \r\n    }\r\n}\r\nfunction get_grp_header(rep_fieldname){\r\n    \r\n    switch(rep_fieldname){\r\n        case \"Supplier Name\":\r\n            if(einv_header[0].sup_name == \"\"){\r\n                return \"\"\r\n            }\r\n            return einv_header[0].sup_name\r\n        case \"Supplier TIN\":\r\n            if(einv_header[0].sup_tin == \"\"){\r\n                return \"\"\r\n            }\r\n            return einv_header[0].sup_tin\r\n        case \"Supplier Reg No\":\r\n            if(einv_header[0].sup_reg_brn == \"\"){\r\n                return \"\"\r\n            }\r\n            return einv_header[0].sup_reg_brn\r\n        case \"Supplier SST ID\":\r\n            if(einv_header[0].sup_sst_reg == \"\"){\r\n                return \"\"\r\n            }\r\n            return einv_header[0].sup_sst_reg\r\n        case \"Supplier MSIC Code\":\r\n            if(einv_header[0].sup_misc == \"\"){\r\n                return \"\"\r\n            }\r\n            return einv_header[0].sup_msic\r\n        case \"Business Activity Description\":\r\n            if(einv_header[0].sup_badsca == \"\"){\r\n                return \"\"\r\n            }\r\n            return einv_header[0].sup_badsca\r\n        case \"Supplier Address\":\r\n            if(suplierAddress == \"\"){\r\n                return \"\"\r\n            }\r\n            return suplierAddress.trim()\r\n        case \"Supplier Contact\":\r\n            if(einv_header[0].sup_cont_num == \"\"){\r\n                return \"\"\r\n            }\r\n            return einv_header[0].sup_cont_num\r\n        case \"Supplier Mail\":\r\n            if(einv_header[0].sup_email == \"\"){\r\n                return \"\"\r\n            }\r\n            return einv_header[0].sup_email\r\n        case \"Buyer TIN\": \r\n            if(einv_header[0].buy_tin == \"\"){\r\n                return \"\"\r\n            }\r\n            return einv_header[0].buy_tin\r\n        case \"Buyer Name\":\r\n            if(einv_header[0].buy_name == \"\"){\r\n                return \"\"\r\n            }\r\n            return einv_header[0].buy_name\r\n        case \"Buyer Reg.No\":\r\n            if(einv_header[0].buy_reg_brn == \"\"){\r\n                return \"\"\r\n            }\r\n            return einv_header[0].buy_reg_brn\r\n        case \"Address\":\r\n            if(addressString == \"\"){\r\n                return \"\"\r\n            }\r\n            return addressString.trim()\r\n        case \"Contact Number\":\r\n            if(einv_header[0].buy_cont_num == \"\"){\r\n                return \"\"\r\n            }\r\n            return einv_header[0].buy_cont_num\r\n        case \"Buyer SST reg.ID\":\r\n            if(einv_header[0].buy_sst_reg == \"\"){\r\n                return \"\"\r\n            }\r\n            return einv_header[0].buy_sst_reg\r\n        case \"Buyer Exemption Number\":\r\n            if(einv_header[0].det_tax == \"\"){\r\n                return \"\"\r\n            }\r\n            return einv_header[0].det_tax\r\n        case \"Bill Reference Number\":\r\n            if(einv_header[0].bref == \"\"){\r\n                return \"\"\r\n            }\r\n            return einv_header[0].bref\r\n    }\r\n}\r\nfunction get_detail_footer_Value(rep_fieldname){\r\n\r\n    switch(rep_fieldname){\r\n\r\n        case \"Sub Total\":\r\n            // if(einv_header[0].tote == \"\"){\r\n            //     return \"0\"\r\n            // }\r\n            // // return einv_header[0].tote\r\n            // return einv_header[0].tote.toString()\r\n            if (subTotal == \"\"){\r\n                return \"0.00\"\r\n            }else{\r\n                return subTotal.toFixed(2).toString()\r\n            }\r\n\r\n        case \"Total Excluding Tax\":\r\n            if(einv_header[0].tote == \"\"){\r\n                return \"0.00\"\r\n            }\r\n            return einv_header[0].tote.toFixed(2).toString()\r\n        case \"Tax Amount\":\r\n            if(einv_header[0].tott == \"\"){\r\n                return \"0.00\"\r\n            }\r\n            return einv_header[0].tott.toFixed(2).toString()\r\n        case \"Total Including Tax\":\r\n            if(einv_header[0].toti == \"\"){\r\n                return \"0.00\"\r\n            }\r\n            return einv_header[0].toti.toFixed(2).toString()\r\n        case \"Total Payable Amount\":\r\n            if(einv_header[0].tpat == \"\"){\r\n                return \"0.00\"\r\n            }\r\n            return einv_header[0].tpat.toFixed(2).toString()\r\n\r\n    }\r\n}\r\nfunction get_field_ValuesLF(rep_fieldname, vld_date){\r\n    switch(rep_fieldname){\r\n        case \"Date & Time of Validation\":\r\n            if(einv_header[0].etim){\r\n                return einv_header[0].etim\r\n            }\r\n            if(vld_date){\r\n                return vld_date\r\n            }\r\n            return \"\"\r\n        case \"Digital Signature\":\r\n            return \"\"\r\n\r\n    }\r\n}\r\n\r\nfunction getLength(rep_fieldname){\r\n    switch(rep_fieldname){\r\n        case \"Classification\":\r\n            return 20\r\n\r\n        case \"Item\":\r\n            return 20\r\n\r\n        case \"Item Description\":\r\n            return 30\r\n\r\n        case \"Qty\":\r\n            return 10\r\n\r\n        case \"Unit Price\":\r\n            return 20\r\n\r\n        case \"Disc\":\r\n            return 10\r\n\r\n        case \"Amount\":\r\n            return 20\r\n\r\n        case \"Tax Amount\":\r\n            return 20\r\n\r\n        case \"Total Product / Service(Incl.Tax)\":\r\n            return 30\r\n    \r\n        default: return 10\r\n\r\n    }            \r\n}\r\nfunction lineFooterLenth(rep_lineFieldName){\r\n    switch(rep_lineFieldName){\r\n        case \"Total Product / Service Price\":\r\n            return 40\r\n        case \"Tax Type\":\r\n            return 20\r\n        case \"Tax Rate\":\r\n            return 20\r\n        case \"Tax Amount\":\r\n            return 20\r\n\r\n        default : return 10\r\n    }\r\n}\r\nfunction hexToRGB(hex) {//calling function\r\n\r\n    // Ensure hex is a string\r\n    if (typeof hex !== 'string') {\r\n        throw new Error('Expected a string input');\r\n    }\r\n\r\n    // Remove the hash at the start if it's there\r\n    hex = hex.replace(/^#/, '');\r\n\r\n    // Parse the r, g, b values\r\n    let r, g, b;\r\n\r\n    if (hex.length === 3) {\r\n        \r\n        // Convert shorthand hex (e.g., #03F) to full form (e.g., #0033FF)\r\n        r = parseInt(hex[0] + hex[0], 16);\r\n        g = parseInt(hex[1] + hex[1], 16);\r\n        b = parseInt(hex[2] + hex[2], 16);\r\n\r\n    } else if (hex.length === 6) {\r\n\r\n        // Parse the hex string normally\r\n        r = parseInt(hex.slice(0, 2), 16);\r\n        g = parseInt(hex.slice(2, 4), 16);\r\n        b = parseInt(hex.slice(4, 6), 16);\r\n        a = \"null\"\r\n        // debug({ r, g, b, a })\r\n        return { r, g, b, a };\r\n\r\n    } else if (hex.length === 8) {\r\n        // Parse the hex string normally\r\n        r = parseInt(hex.slice(0, 2), 16);\r\n        g = parseInt(hex.slice(2, 4), 16);\r\n        b = parseInt(hex.slice(4, 6), 16);\r\n        a = parseInt(hex.slice(6, 8), 16) / 255;\r\n\r\n        return { r, g, b, a };\r\n\r\n    }else {\r\n       jscall_error = \"Invalid hexadecimal string\"\r\n       return false\r\n    }\r\n\r\n}\r\n\r\nfunction dateValidation(){\r\n\r\n    var currentDate = new Date()\r\n    var year = currentDate.getFullYear(); // Full year (e.g., 2024)\r\n    var month = String(currentDate.getMonth() +1).padStart(2, '0'); // Month (0-11, so add 1 for January to December)\r\n    var day = String(currentDate.getDate()).padStart(2, '0'); // Day of the month (1-31)\r\n\r\n    var hours = String(currentDate.getHours()).padStart(2, '0'); // Hours (0-23)\r\n    var minutes = String(currentDate.getMinutes()).padStart(2, '0'); // Minutes (0-59)\r\n    var seconds = String(currentDate.getSeconds()).padStart(2, '0'); // Seconds (0-59)\r\n\r\n    return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;\r\n}\r\n\r\nfunction rgbaToRgb(rgba) {\r\n\r\n    // Destructure the rgba values\r\n    const [r, g, b, a] = rgba.match(/\\d+(\\.\\d+)?/g).map(Number);\r\n\r\n    // Return the rgb values\r\n    return { r, g, b, a};\r\n}\r\nfunction convertIndiaToMalaysiaTimeManual() {\r\n    // Create a Date object for the current date and time in India\r\n    const nowIndia = new Date();\r\n\r\n    // Calculate the time difference in hours (Malaysia is 2.5 hours ahead of India)\r\n    const timeDifference = 2.5 * 60 * 60 * 1000;\r\n\r\n    // Get the time in milliseconds since the epoch for the current date and time in India\r\n    const timeInMilliseconds = nowIndia.getTime();\r\n\r\n    // Add the time difference to the current time in milliseconds\r\n    const malaysiaTimeInMilliseconds = timeInMilliseconds + timeDifference;\r\n\r\n    // Create a new Date object for the converted time\r\n    const nowMalaysia = new Date(malaysiaTimeInMilliseconds);\r\n\r\n    // Extract date components\r\n    const day = String(nowMalaysia.getDate()).padStart(2, '0');\r\n    const month = String(nowMalaysia.getMonth() + 1).padStart(2, '0'); // Months are zero-based\r\n    const year = nowMalaysia.getFullYear();\r\n    const hours = String(nowMalaysia.getHours()).padStart(2, '0');\r\n    const minutes = String(nowMalaysia.getMinutes()).padStart(2, '0');\r\n    const seconds = String(nowMalaysia.getSeconds()).padStart(2, '0');\r\n\r\n    // Format date and time as dd/mm/yyyy, HH:MM:SS\r\n    const formattedDate = `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;\r\n\r\n    return formattedDate;\r\n}\r\n"
        }
    ],
    "Roles": null,
    "DataSets": null,
    "Screens": null,
    "EmailTemplates": null,
    "Lists": null,
    "Reports": null
}
