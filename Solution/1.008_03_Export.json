{"ExportedSolution":{"SolutionID":"1.008_03","Description":"API Handling Enhancement","Status":"Created","CreatedTime":"2025-04-22T14:57:49.873125+05:30","ExportedTime":"0001-01-01T05:53:28+05:53","LastUpdated":"0001-01-01T05:53:28+05:53","CreatedUser":"parthi","UpdatedUser":"","ExportedUser":"","ExportComponents":[{"SolutionID":"1.008_03","ComponentType":"BusinessObject","ComponentID":"batchInvoiceSubmission"},{"SolutionID":"1.008_03","ComponentType":"BusinessObject","ComponentID":"createEinvoice"},{"SolutionID":"1.008_03","ComponentType":"BusinessObject","ComponentID":"docUpload"},{"SolutionID":"1.008_03","ComponentType":"BusinessObject","ComponentID":"forFiling"},{"SolutionID":"1.008_03","ComponentType":"BusinessObject","ComponentID":"resendSubmission"},{"SolutionID":"1.008_03","ComponentType":"BusinessObject","ComponentID":"submitEinvoiceToPortal"},{"SolutionID":"1.008_03","ComponentType":"List","ComponentID":"einv_status"},{"SolutionID":"1.008_03","ComponentType":"Topic","ComponentID":"e_inv_parameter"}]},"Topics":[{"Topic":{"Name":"e_inv_parameter","Description":"E-Inv Parameter","Keys":["seqn"],"SendAlertOnFail":true,"DistributionList":[],"HotTopic":true,"FieldDefs":[{"FieldName":"seqn","Description":"Sequence","Sequence":1,"DataType":"Integer","Length":1,"IsKey":true,"IndexSequence":1,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"lhdn_user","Description":"LHDN Username","Sequence":2,"DataType":"String","Length":50,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"lhdn_pswd","Description":"LHDN Password","Sequence":3,"DataType":"String","Length":50,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"ctrl_url","Description":"Controller URL","Sequence":4,"DataType":"String","Length":300,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"ctrl_header_key","Description":"Controller Header Key","Sequence":5,"DataType":"String","Length":20,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"ctrl_header_value","Description":"Controller Header Value","Sequence":6,"DataType":"String","Length":70,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"istaxpayer","Description":"Tax Payer","Sequence":7,"DataType":"Boolean","Length":1,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"inter_tin","Description":"Intermediary Behalf of TIN","Sequence":8,"DataType":"String","Length":14,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"lhdn_portal","Description":"LHDN Invoicing Portal","Sequence":9,"DataType":"String","Length":200,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"version_id","Description":"Version ID","Sequence":10,"DataType":"String","Length":5,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"max_line_for_submission","Description":"Maximum Lines For Submission","Sequence":11,"DataType":"Integer","Length":4,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"max_invoices","Description":"Maximum Invoices For Submission","Sequence":12,"DataType":"Integer","Length":4,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""}],"Segments":[],"AdditionalProps":null,"References":[],"Indices":[],"SharedTable":false,"CreatedBy":"malai","ModifiedBy":"malai","CreatedDate":"2024-04-23T17:24:27.82383+05:30","ModifiedDate":"2025-04-19T17:04:43.12146868+05:30","EnableComments":false,"ReferenceFields":[],"ReadQuery":"SELECT * FROM {{e_inv_parameter}} "},"BeforeSave":"//**** Hook before_save Created by malai on 23-Apr-2024 17:47:47\n\t\t\tfunction before_save(){\n\t\t\t  if (jscall.input.seqn != 0){\n\t\t\t\t  jscall_error = \"Only Sequence 0 is allowed\"\n\t\t\t\t  return false;\n\t\t\t  }\n\t\t\t  return true;\n\t\t\t}","AfterSave":"","BeforeDelete":"","AfterDelete":""}],"BizObjects":[{"Bizobj":{"ObjectName":"batchInvoiceSubmission","Description":"Batch Invoice Submission","external":true,"input_struct":"","out_success":"","out_fail":""},"Script":"//**** Business Object batchInvoiceSubmission Created by malai on 17-Apr-2025 11:30:27 ****//\r\n\r\nvar einvois = require(\"./scripts/Business_Objects/createEinvoice\")\r\nfunction newInvoiceSubmission() {\r\n    let readyForSubmit = []\r\n    let invalidInvoices = []\r\n    let forFilingInvoices = []\r\n    // newInvoices = CralDB.QueryByComp(`SELECT e_inv_no, sctg FROM {{einv_header}} WHERE einv_stat='10'`,jscall.Company)\r\n                                    // AND created_timestamp < '$1'`,jscall.company, new date())\r\n\r\n    newInvoices = CralDB.QueryByComp(\"select e_inv_no,sctg from {{einv_header}} where einv_stat = '05'\",jscall.company)\r\n                                \r\n    // return newInvoices\r\n    if (newInvoices.length){\r\n        newInvoices.forEach(invDetails => {\r\n            if (einvois.check_validations(invDetails.e_inv_no) == true){\r\n                \r\n                if (invDetails.sctg == \"10\"){\r\n                    readyForSubmit.push(invDetails.e_inv_no)\r\n                } else {\r\n                    forFilingInvoices.push(invDetails.e_inv_no)\r\n                }\r\n            } else {\r\n                invalidInvoices.push(invDetails.e_inv_no)\r\n            }\r\n        })\r\n        return {\r\n            result: einvois.BatchInvoiceSubmission(readyForSubmit),\r\n            error: \"\",\r\n            SubmissionInvoiceList: readyForSubmit,\r\n            InvalidInvoices: invalidInvoices,\r\n            ForFilingInvoices: forFilingInvoices\r\n        }\r\n    } else {\r\n        return {\r\n            result: [],\r\n            error: \"No Invoices Found to Submit.\",\r\n            SubmissionInvoiceList: readyForSubmit,\r\n            InvalidInvoices: invalidInvoices,\r\n            ForFilingInvoices: forFilingInvoices\r\n        }\r\n    }\r\n    \r\n}"},{"Bizobj":{"ObjectName":"createEinvoice","Description":"Create E-Invoice","external":false,"input_struct":"","out_success":"","out_fail":""},"Script":"//**** Business Object createEinvoice Created by malai on 22-Jun-2024 23:41:03 ****//\r\n\r\n// var lhdn_api = require(\"./scripts/Business_Objects/einvIntFunction\")\r\n// var outUpdate = require(\"./scripts/Business_Objects/updateOutStatus\")\r\nfunction getCurrentDateTime() {\r\n    // const now = new Date(); // Gets the current date and time in UTC\r\n    // const istOffset = (5 * 30); // IST is UTC + 5 hours and 30 minutes\r\n    // const istTime = new Date(now.getTime() + istOffset); // Adjust to IST\r\n\r\n    // const year = istTime.getFullYear();\r\n    // const month = (istTime.getMonth() + 1).toString().padStart(2, '0'); // months start at 0\r\n    // const day = istTime.getDate().toString().padStart(2, '0');\r\n    // const hours = istTime.getHours().toString().padStart(2, '0');\r\n    // const minutes = istTime.getMinutes().toString().padStart(2, '0');\r\n    // const seconds = istTime.getSeconds().toString().padStart(2, '0');\r\n    \r\n    // return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;\r\n\r\n    const now = new Date(); \r\n    return now.toLocaleString( \"en-US\", { \r\n        day: \"2-digit\", \r\n        month: \"2-digit\", \r\n        year: \"numeric\", \r\n        hour: \"2-digit\", \r\n        minute: \"2-digit\", \r\n        second: \"2-digit\", \r\n        hour12: false }\r\n    ).replace(\",\", \"\").replaceAll(\"/\", \"-\").replace(/(\\d{2})-(\\d{2})-(\\d{4})/, \"$3-$1-$2\");\r\n}\r\nexports.getCurrentDateTime = getCurrentDateTime\r\n\r\nfunction getCurrentDateTimeUTC() {\r\n\tlet now = new Date();\r\n\tlet year = now.getUTCFullYear();\r\n\tlet month = String(now.getUTCMonth() + 1).padStart(2, '0');\r\n\tlet day = String(now.getUTCDate()).padStart(2, '0');\r\n\tlet hours = String(now.getUTCHours()).padStart(2, '0');\r\n\tlet minutes = String(now.getUTCMinutes()).padStart(2, '0');\r\n\tlet seconds = String(now.getUTCSeconds()).padStart(2, '0');\r\n\treturn `${year}-${month}-${day} ${hours}:${minutes}:${seconds}Z`;\r\n}\r\nexports.getCurrentDateTimeUTC = getCurrentDateTimeUTC\r\n\r\nfunction generateUniqueId(){\r\n    let now = new Date();\r\n    let year = now.getFullYear().toString().slice(-2);\r\n    let month = String(now.getMonth() + 1).padStart(2, '0');\r\n    let date = String(now.getDate()).padStart(2, '0');\r\n    let hours = String(now.getHours()).padStart(2, '0');\r\n    let minutes = String(now.getMinutes()).padStart(2, '0');\r\n    let seconds = String(now.getSeconds()).padStart(2, '0');\r\n    let milliseconds = String(now.getMilliseconds()).padStart(3, '0');\r\n    let randomNumber = Math.floor(Math.random() * 1000000).toString().padStart(6, '0');\r\n    let uniqueId = `${date}${month}${year}${hours}${minutes}${seconds}${milliseconds}${randomNumber}`;\r\n    return uniqueId;\r\n}\r\n\r\nfunction getVld_date(input_date) {\r\n    dateStr = input_date.toString().slice(0, 19)\r\n    let [datePart, timePart] = dateStr.split(\" \"); // Split into date and time\r\n    let [hours, minutes, seconds] = timePart.split(\":\"); // Extract hours, minutes, and seconds\r\n\r\n    // Subtract 5 minutes\r\n    minutes -= 5;\r\n\r\n    // Handle overflow (e.g., if minutes become negative)\r\n    if (minutes < 0) {\r\n        minutes += 60; // Adjust minutes\r\n        hours -= 1; // Decrease the hour\r\n        if (hours < 0) {\r\n            hours = 23; // Wrap around to the previous day\r\n            // Handle the date part if necessary (e.g., subtracting a day)\r\n            const [year, month, day] = datePart.split(\"-\").map(Number);\r\n            const newDate = new Date(year, month - 1, day - 1); // Adjust the day\r\n            datePart = newDate.toISOString().split(\"T\")[0]; // Update the date part\r\n        }\r\n    }\r\n\r\n    // Reconstruct the updated time part\r\n    timePart = [\r\n        String(hours).padStart(2, \"0\"),\r\n        String(minutes).padStart(2, \"0\"),\r\n        String(seconds).padStart(2, \"0\"),\r\n    ].join(\":\");\r\n\r\n    // Combine the date and time back into a single string\r\n    return `${datePart} ${timePart}`\r\n}\r\n\r\nfunction GetNewToken(){\r\n    lhdn = NewLHDN()\r\n    lhdn_token_data = CralDB.QueryByComp(\"select * from {{e_inv_parameter}} where seqn=0\", jscall.company)\r\n    if (lhdn_token_data.length == 0){\r\n        // jscall_error = \"Unable to get Client Id & Client Secret\"\r\n        CralUtil.LogInfo(\"Unable to get Client Id & Client Secret\", \"LHDN Token\", lhdn_token_data)\r\n        return false\r\n    } else {\r\n        lhdn_response = lhdn.Login(lhdn_token_data[0].lhdn_user, lhdn_token_data[0].lhdn_pswd, \"client_credentials\", \"InvoicingAPI\", lhdn_token_data[0].istaxpayer, lhdn_token_data[0].inter_tin)\r\n        switch (lhdn_response.Result.Status){\r\n            case 200:\r\n                resDate = getVld_date(lhdn_response.Result.Response.expiresin) // Expirein reduce for 5 minutes \r\n\r\n                CralUtil.SetLocal(\"lhdn_token\" + jscall.company.toString(), lhdn_response.Result.Response.access_token)\r\n                // CralUtil.SetLocal(\"lhdn_vld\" + jscall.company.toString(), lhdn_response.Result.Response.expiresin)\r\n                CralUtil.SetLocal(\"lhdn_vld\" + jscall.company.toString(), resDate)\r\n                CralUtil.LogInfo(\"Successfully Generated New LHDN Token\", \"lhdn_token\" + jscall.company.toString(), lhdn_response.Result.Response)\r\n                return lhdn_response.Result.Response.access_token\r\n                break\r\n            case 400:\r\n                // jscall_error = \"400\" + lhdn_response.Result.error\r\n                CralUtil.LogInfo(\"400\" + lhdn_response.Result.error, \"LHDN Token\", lhdn_response.Result.Response)\r\n                return false\r\n                break\r\n            case 404:\r\n                // jscall_error = \"404\" + lhdn_response.Result.message\r\n                CralUtil.LogInfo(\"404\" + lhdn_response.Result.message, \"LHDN Token\", lhdn_response.Result.Response)\r\n                return false\r\n                break\r\n            default:\r\n                if (typeof lhdn_response.Result.Response == \"string\"){\r\n                    CreatePortalValidation(invID, 0,lhdn_response.Result.Response, \"\")\r\n                    return false\r\n                }\r\n                // jscall_error = lhdn_response.Result.Status.toString() + \" - \" + JSON.stringify(lhdn_response.Result.Response)\r\n                CralUtil.LogInfo(lhdn_response.Result.Status.toString(), \"LHDN Token\", lhdn_response.Result.Response)\r\n                return false;\r\n        }\r\n    }\r\n    return \"\"\r\n}\r\n\r\nfunction get_lhdn_token(){\r\n    token = CralUtil.GetLocal(\"lhdn_token\" + jscall.company.toString())\r\n    token_vld = CralUtil.GetLocal(\"lhdn_vld\" + jscall.company.toString())\r\n      if (token == undefined || token == null || token == \"\" || token_vld == undefined || token_vld == null || token_vld < getCurrentDateTime() || token_vld == \"\"){\r\n          newToken = GetNewToken()\r\n          if (newToken == false || newToken == \"\"){\r\n              return false\r\n          }\r\n          return newToken\r\n      } else {\r\n          return token\r\n      }\r\n    return \"\"\r\n}\r\nexports.get_lhdn_token = get_lhdn_token\r\n\r\n// Function Added on 5th Sept.\r\nfunction submitEinvoiceToLHDN(einv_number){\r\n\r\n    // //issuance Date 12-09-2024 line 105 - 126 (Start)\r\n    // einvDate = CralDB.QueryByComp(\"select e_inv_no,e_invdt from {{einv_header}} where e_inv_no = '$1'\", jscall.company,einv_number);\r\n    // temp = einvDate[0].e_invdt\r\n    // invDate = temp.toLocaleString().substring(0,19)\r\n    // currentDate = getCurrentDateTimeUTC() //Line 177\r\n    // currentDate_UTC = currentDate.substring(0,19)\r\n    // isoDateTimeString = new Date(invDate.replace(' ', 'T')).getTime();\r\n    // isoDateTimeString_UTC = new Date(currentDate_UTC.replace(' ', 'T')).getTime();\r\n\r\n    // hours = convert2hours((isoDateTimeString_UTC - isoDateTimeString)/ (1000 * 60 * 60)) // Line 188\r\n    // // return hours\r\n    // invHours = hours.split(':')\r\n    // // return invHours[0]\r\n    // if(invHours[0] > 72){\r\n        \r\n    //     currentDate = {\r\n    //         \"e_inv_no\":einvDate[0].e_inv_no,\r\n    //         \"e_invdt\": getCurrentDateTimeUTC()\r\n    //     }\r\n    //     result = CralDB.PublishTopic(\"einv_header\", jscall.company, \"Update\", currentDate, jscall.user)\r\n    //     // return result\r\n    // }\r\n    // // End\r\n\r\n    // Moved Issuence Date Checking to Function\r\n    checkandupdateIssuenceDate(einv_number)\r\n\r\n    forfilling = check_forFiling(einv_number)\r\n    // if (!check_forFiling(einv_number)){\r\n    if (forfilling == \"\"){\r\n        var doc_json = BuildJSONFormat(einv_number)\r\n        println(\"After Doc\")\r\n        if (typeof doc_json == \"string\"){\r\n            println(\"Error Doc\")\r\n            CralUtil.LogInfo(\"Error While JSON document Creation\", einv_number, doc_json)\r\n            CreatePortalValidation(einv_number, 0, doc_json, \"\")\r\n            return {\r\n                \"invoice\": einv_number,\r\n                \"error\": \"Error While Submitting - \" + doc_json,\r\n                \"status\": false\r\n            }\r\n        } else {\r\n            // Convert JSON to XML and hash the doc to string.\r\n            println(\"Success Doc\")\r\n            submission_ret = SubmitTOLHDN(doc_json.document, einv_number)\r\n            if (submission_ret == false){\r\n                jscall_error = \"Error while Submitting\"\r\n                return {\r\n                    \"invoice\": einv_number,\r\n                    \"error\": \"Error While Submitting\",\r\n                    \"status\": false\r\n                }\r\n            } else {\r\n                sub_data = SubmissionUpdate(submission_ret)\r\n                if (CralDB.QueryByComp(\"select einv_code from {{einv_validation}} where einv_code='$1'\", jscall.company, einv_number).length == 0){\r\n                    return {\r\n                        \"invoice\": einv_number,\r\n                        \"error\": \"\",\r\n                        \"status\": true\r\n                    }\r\n                } else {\r\n                    return {\r\n                        \"invoice\": einv_number,\r\n                        \"error\": \"Unable to Submit to LHDN. Invoice is Under Validation.\",\r\n                        \"status\": false\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    } else {\r\n        return {\r\n            \"invoice\": einv_number,\r\n            \"error\": \"Invoice is under For Filing. \" + forfilling,\r\n            \"status\": false\r\n        }\r\n    }\r\n}\r\n\r\n// New Function Added on 18th April for Batch Invoice Submission.\r\nfunction BatchInvoiceSubmission(einvois_array){\r\n    let batchInvResults = []\r\n    let hash_docs = []\r\n    let submit_invoice_numbers = []\r\n\r\n    if (einvois_array.length){\r\n        splitArrayInvoices(einvois_array).forEach(einv_number_array => {\r\n            for (let i=0; i<einv_number_array.length; i++){\r\n                checkandupdateIssuenceDate(einv_number_array[i])\r\n                forFilingReason = check_forFiling(einv_number_array[i])\r\n                if (forFilingReason){\r\n                    batchInvResults.push({\r\n                        \"invoice\": einv_number_array[i],\r\n                        \"error\": \"Invoice is Under For Filing. \" + forFilingReason,\r\n                        \"status\": false\r\n                    })\r\n                } else {\r\n                    js_doc = BuildJSONFormat(einv_number_array[i])\r\n                    if (typeof js_doc === \"string\"){\r\n                        CralUtil.LogInfo(\"Error While JSON Document Creation\", einv_number_array[i], js_doc)\r\n                        CreatePortalValidation(einv_number_array[i], 0, js_doc, \"\")\r\n                        batchInvResults.push({\r\n                            \"invoice\": einv_number_array[i],\r\n                            \"error\": \"Unable to generate JSON Document. \" + js_doc,\r\n                            \"status\": false\r\n                        })\r\n                    } else {\r\n                        hash_doc = getHashDocument(js_doc.document, einv_number_array[i])\r\n                        if (hash_doc){\r\n                            hash_docs.push(hash_doc)\r\n                            submit_invoice_numbers.push(einv_number_array[i])\r\n                        } else {\r\n                            batchInvResults.push({\r\n                                \"invoice\": einv_number_array[i],\r\n                                \"error\": \"Error in XML Conversion\",\r\n                                \"status\": false\r\n                            })\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            if (hash_docs.length === submit_invoice_numbers.length && hash_docs.length != 0){\r\n                submission_result = SubmitDocuments(hash_docs, submit_invoice_numbers)\r\n                if (submission_result === false){\r\n                    submit_invoice_numbers.forEach(item => {\r\n                        batchInvResults.push({\r\n                            \"invoice\": item,\r\n                            \"error\": \"Error While Submitting\",\r\n                            \"status\": false\r\n                        })\r\n                    })\r\n                } else {\r\n                    SubmissionUpdate(submission_result)\r\n                    submit_invoice_numbers.forEach(item => {\r\n                        if (CralDB.QueryByComp(\"select einv_code from {{einv_validation}} where einv_code='$1'\", jscall.company, item).length == 0){\r\n                            batchInvResults.push( {\r\n                                \"invoice\": item,\r\n                                \"error\": \"\",\r\n                                \"status\": true\r\n                            })\r\n                        } else {\r\n                            batchInvResults.push( {\r\n                                \"invoice\": item,\r\n                                \"error\": \"Unable to Submit to LHDN. Invoice is Under Validation.\",\r\n                                \"status\": false\r\n                            })\r\n                        }\r\n                    })\r\n                }\r\n            } else {\r\n                CralUtil.LogInfo(\"Error in Batch Submission\", \"BatchSubmission\", {\"NumberOfDocs\": hash_docs.length, \"NumberofInvoice\": submit_invoice_numbers.length})\r\n            }\r\n        })\r\n    } else {\r\n        CralUtil.LogInfo(\"No Invoices Found For Batch Submission\", \"BatchSubmission\", \"\")\r\n    }\r\n    return batchInvResults\r\n}\r\nexports.BatchInvoiceSubmission = BatchInvoiceSubmission\r\n\r\nfunction splitArrayInvoices(arrayInvoices){\r\n    let resultArray = []\r\n    let totalInvoices = arrayInvoices.length\r\n    let limitInvoiceLines = 0\r\n    let limitInvoices = 0\r\n\r\n    if (totalInvoices) {\r\n        defaultMaxValue = CralDB.QueryByComp(`\r\n                                            SELECT max_line_for_submission, max_invoices\r\n                                            FROM {{e_inv_parameter}} limit 1`, \r\n                                        jscall.company)[0]\r\n        limitInvoiceLines = defaultMaxValue?.max_line_for_submission?defaultMaxValue.max_line_for_submission:3000;\r\n        limitInvoices = defaultMaxValue?.max_invoices?defaultMaxValue.max_invoices:90;\r\n\r\n        if (totalInvoices < limitInvoices){\r\n            resultArray = resultArray.concat(splitInvoicebyLineCount(limitInvoiceLines, arrayInvoices))\r\n        } else {\r\n            for (let i = 0; i < totalInvoices; i += limitInvoices){\r\n                resultArray = resultArray.concat(splitInvoicebyLineCount(limitInvoiceLines, arrayInvoices.slice(i, i + limitInvoices)))\r\n            }\r\n        }\r\n    }\r\n    return resultArray\r\n}\r\n\r\nfunction splitInvoicebyLineCount(lineLimit, inv_array){\r\n    let results = []\r\n    let temp_count = 0\r\n    let temp_arr = []\r\n    let totalLines = 0\r\n\r\n    let query = `   SELECT e_inv_no,line_cnt\r\n                    FROM {{einv_header}}`\r\n    for (let i = 0; i< inv_array.length; i++){\r\n        if (i==0){\r\n            query += ` WHERE e_inv_no='${inv_array[i]}'`;\r\n        } else {\r\n            query += ` OR e_inv_no='${inv_array[i]}'`;\r\n        }\r\n    }\r\n   \r\n    lineData = CralDB.QueryByComp(query, jscall.company)\r\n    totalLines = lineData.reduce((sum, data) => sum + data.line_cnt, 0)\r\n\r\n    if (totalLines < lineLimit){\r\n        results.push(inv_array)\r\n    } else {\r\n        for (let i = 0; i < inv_array.length; i++){\r\n            temp_count += lineData.find(data => data.e_inv_no = inv_array[i])?.line_cnt\r\n            if (temp_count >= lineLimit){\r\n                results.push(temp_arr);\r\n                temp_arr = [inv_array[i]]\r\n                temp_count = lineData.find(data => data.e_inv_no = inv_array[i])?.line_cnt\r\n            } else {\r\n                temp_arr.push(inv_array[i])\r\n            }\r\n        }\r\n        if (temp_arr.length){\r\n            results.push(temp_arr)\r\n        }\r\n    }\r\n    return results\r\n}\r\n\r\nfunction checkandupdateIssuenceDate(invNumber){\r\n    einvDate = CralDB.QueryByComp(\"select e_inv_no,e_invdt from {{einv_header}} where e_inv_no = '$1'\", jscall.company,invNumber);\r\n    temp = einvDate[0].e_invdt\r\n    invDate = temp.toLocaleString().substring(0,19)\r\n    currentDate = getCurrentDateTimeUTC() //Line 177\r\n    currentDate_UTC = currentDate.substring(0,19)\r\n    isoDateTimeString = new Date(invDate.replace(' ', 'T')).getTime();\r\n    isoDateTimeString_UTC = new Date(currentDate_UTC.replace(' ', 'T')).getTime();\r\n\r\n    hours = convert2hours((isoDateTimeString_UTC - isoDateTimeString)/ (1000 * 60 * 60)) // Line 188\r\n    \r\n    invHours = hours.split(':')\r\n    \r\n    if(invHours[0] > 72){\r\n        \r\n        currentDate = {\r\n            \"e_inv_no\":einvDate[0].e_inv_no,\r\n            \"e_invdt\": getCurrentDateTimeUTC()\r\n        }\r\n        result = CralDB.PublishTopic(\"einv_header\", jscall.company, \"Update\", currentDate, jscall.user)\r\n    }\r\n}\r\n//issuance Date 12-09-2024 line 177 - 201\r\n// function getCurrentDateTimeUTC_issuance_Date() {\r\n// \tlet now = new Date();\r\n// \tlet year = now.getUTCFullYear();\r\n// \tlet month = String(now.getUTCMonth() + 1).padStart(2, '0');\r\n// \tlet day = String(now.getUTCDate()).padStart(2, '0');\r\n// \tlet hours = String(now.getUTCHours()).padStart(2, '0');\r\n// \tlet minutes = String(now.getUTCMinutes()).padStart(2, '0');\r\n// \tlet seconds = String(now.getUTCSeconds()).padStart(2, '0');\r\n// \treturn `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;\r\n// }\r\n\r\nfunction convert2hours(wholeNum){\r\n    const decimalHours = wholeNum;\r\n\r\n    // Extract the whole number part (hours)\r\n    const hours = Math.floor(decimalHours);\r\n\r\n    // Extract the fractional part, convert it to minutes\r\n    const minutes = Math.floor((decimalHours - hours) * 60);\r\n\r\n    // Extract the remaining fractional part, convert it to seconds\r\n    const seconds = Math.round(((decimalHours - hours) * 60 - minutes) * 60);\r\n\r\n    return (`${hours}:${minutes}:${seconds}`);\r\n}\r\n\r\n\r\n\r\nexports.submitEinvoiceToLHDN = submitEinvoiceToLHDN\r\n\r\nfunction check_forFiling(einv_no){\r\n    einvoice_header = CralDB.QueryByComp(`select doct,org_doc_uuid,org_e_inv_no from {{einv_header}} where e_inv_no='${einv_no}'`, jscall.company)\r\n    if ((einvoice_header[0]?.doct != \"01\" && einvoice_header[0]?.doct != \"11\") && (!einvoice_header[0]?.org_e_inv_no || !einvoice_header[0]?.org_doc_uuid)){\r\n        // return true\r\n        return \"Original Document Reference is Mandatory\" //26-09-2024 Parthi\r\n    }\r\n    einvoice_lines = CralDB.QueryByComp(`select line from {{einv_lines}} where e_inv_no='${einv_no}' and cvat='E' and ceno=''`, jscall.company)\r\n    if (einvoice_lines?.length){\r\n        // return true\r\n        return \"Tax Exemption Certificate Number is Mandatory\" //26-09-2024 Parthi\r\n    }\r\n    // return false\r\n    return \"\" //26-09-2024 Parthi\r\n}\r\n\r\nfunction SubmitTOLHDN(json_doc, invID){\r\n    xmlHashDoc = getHashDocument(json_doc, invID)\r\n    if (xmlHashDoc){\r\n        return SubmitDocuments([xmlHashDoc], [invID])\r\n    }\r\n    return false\r\n}\r\nexports.SubmitTOLHDN = SubmitTOLHDN\r\n\r\nfunction getHashDocument(json_doc, invID){\r\n    lhdn = NewLHDN()\r\n    xml_result = lhdn.JSONtoXML(JSON.stringify(json_doc))\r\n    CralUtil.LogInfo(\"Error: XML\", invID, xml_result.Result.Error)\r\n    if (xml_result.Result.Error || (xml_result.Result.XML == undefined || xml_result.Result.XML == null)){\r\n        CreatePortalValidation(invID, 0, \"Conversion Error: \" + xml_result.Result.Error, \"\")\r\n        return false;\r\n    } else {\r\n        // Sign the Document\r\n        sign_doc = lhdn.SignDocument(\"XML\", invID, xml_result.Result.XML)\r\n        // println(JSON.stringify(sign_doc))\r\n        // CralUtil.LogInfo(\"SignDoc\", \"Invoice\", sign_doc)\r\n        if (sign_doc.Result.Error || sign_doc.Result.SignedDoc == undefined || sign_doc.Result.SignedDoc == null){\r\n            CralUtil.LogInfo(\"Error in getting hash Document\", invID, sign_doc)\r\n            CreatePortalValidation(invID, 0, \"Signature Error: \" + sign_doc.Result.Error, \"\")\r\n            return false;\r\n        } else {\r\n            return sign_doc.Result.SignedDoc\r\n        }\r\n    }\r\n}\r\n\r\nfunction SubmitDocuments(docs, docID){\r\n    lhdn = NewLHDN()\r\n    token = get_lhdn_token()\r\n    if (token == false){\r\n        CreatePortalValidation(invID, 0, \"Unable to get LHDN Access Token\", \"\")\r\n        return false;\r\n    } else {\r\n        submit_document = {\r\n            \"documents\": docs\r\n        }\r\n        CralUtil.LogInfo(\"SubmissionObject\", \"InvoiceSubmission\", {\"Payload\": submit_document, \"Invoices\": docID})\r\n        sub_result = lhdn.SubmitDocument(token, JSON.stringify(submit_document))\r\n        CralUtil.LogInfo(\"InvoiceSubmission\", \"\", sub_result)\r\n        switch (sub_result.Result.Status){\r\n            case 202:\r\n                return sub_result.Result.Response\r\n                break\r\n            case 400:\r\n                docID.forEach(documentID => {\r\n                    CreateLHDN_Validation(documentID, 0, sub_result.Result.Response.error, [])\r\n                })\r\n                return false;\r\n                break;\r\n            case 422:\r\n                vald_catg = \"20\"\r\n                error_Message = sub_result.Result.Response.error;\r\n                break;\r\n            case 429:\r\n                vald_catg = \"20\";\r\n                error_Message = sub_result.Result.Response.message;\r\n                break;\r\n            case 401:\r\n                vald_catg = \"20\";\r\n                error_Message = sub_result.Result.Response.message;\r\n                break;\r\n            case 500:\r\n                vald_catg = \"20\"\r\n                // Submission Error: 500 - \"invalid character '<' looking for beginning of value\"\r\n                if (typeof sub_result.Result.Response == \"string\"){\r\n                    error_Message = `Submission Error: ${sub_result.Result.Status.toString()} - ${sub_result.Result.Response}`\r\n                } else {\r\n                    error_Message = \"Submission Error: \" + sub_result.Result.Status.toString() + \" - \" + JSON.stringify(sub_result.Result.Response)\r\n                }\r\n                break;\r\n            case 1001:\r\n                vald_catg = \"10\"\r\n                if (typeof sub_result.Result.Response == \"string\"){\r\n                    error_Message = sub_result.Result.Response\r\n                } else {\r\n                    error_Message = \"Submission Error: \" + sub_result.Result.Status.toString() + \" - \" + JSON.stringify(sub_result.Result.Response)\r\n                }\r\n                break;\r\n            default:\r\n                vald_catg = \"20\"\r\n                if (typeof sub_result.Result.Response == \"string\"){\r\n                    error_Message = `Submission Error: ${sub_result.Result.Status.toString()} - ${sub_result.Result.Response}`\r\n                } else {\r\n                    error_Message = \"Submission Error: \" + sub_result.Result.Status.toString() + \" - \" + JSON.stringify(sub_result.Result.Response)\r\n                }\r\n                break;\r\n        }\r\n        docID?.forEach(doc => {\r\n            CreateValidation(doc, 0, vald_catg, sub_result.Result.Status.toString(), error_Message, \"\", \"Submission\", \"\")\r\n        })\r\n    }\r\n    return false\r\n}\r\n\r\nfunction SubmissionUpdate(submitted_obj){\r\n    debug(\"Submission Update\")\r\n    sub_results = []\r\n    debug(submitted_obj)\r\n    if (submitted_obj.acceptedDocuments != undefined || submitted_obj.acceptedDocuments != null || submitted_obj.acceptedDocuments.length != 0){\r\n        debug(\"In Submission\")\r\n        for (i = 0; i<submitted_obj.acceptedDocuments.length; i++){\r\n            debug(\"Accept\")\r\n            sub_doc = submitted_obj.acceptedDocuments[i]\r\n            sub_rec = CralDB.QueryByComp(\"select e_inv_no,sup_email,buy_email,sup_name,buy_name,dataset,comp from {{einv_header}} where e_inv_no='$1'\", jscall.company, sub_doc.invoiceCodeNumber)\r\n            debug(sub_rec)\r\n            // status_api = executeCWSCall(\"POST\", api_url[0].cws_url + \"/api/\" + jscall.company.toString() + \"/portaltoln\", input_data)\r\n            if (sub_rec.length != 0){\r\n                sub_rec_payload = sub_rec[0]\r\n                sub_rec_payload.submission_uid = submitted_obj.submissionUid\r\n                sub_rec_payload.doc_uuid = sub_doc.uuid\r\n                sub_rec_payload.einv_stat = \"20\"\r\n                sub_rec_payload.esta = \"20\"\r\n                sub_result = CralDB.PublishTopic(\"einv_header\", jscall.company, \"Update\", sub_rec_payload, jscall.user)\r\n                // Error Log to be added.\r\n                debug(sub_result)\r\n                sub_lines = CralDB.QueryByComp(\"select e_inv_no,line from {{einv_lines}} where e_inv_no='$1'\", jscall.company, sub_doc.invoiceCodeNumber)\r\n                sub_line_results = []\r\n                for (j = 0; j < sub_lines.length; j++){\r\n                    sub_line_payload = sub_lines[j]\r\n                    sub_line_payload.lsta = \"20\"\r\n                    sub_line_results.push(CralDB.PublishTopic(\"einv_lines\", jscall.company, \"Update\", sub_line_payload, jscall.user))\r\n                    // Error Log to be added.\r\n                }\r\n                sub_result.Lines = sub_line_results\r\n                sub_results.push(sub_result)\r\n                \r\n                if (UpdateStatusToSource(sub_doc.invoiceCodeNumber, \"SUBMITTED TO LHDN\", \"\") != true){\r\n                    // Source is not Updated. \r\n                }\r\n            } else {\r\n                // Accepted document E-Invoice Code Not Found.\r\n            }\r\n        }\r\n    } else {\r\n        // Submission Object has null value.\r\n    }\r\n\r\n    if (submitted_obj.rejectedDocuments != undefined || submitted_obj.rejectedDocuments != null || submitted_obj.rejectedDocuments.length != 0){\r\n        for (i = 0; i<submitted_obj.rejectedDocuments.length ; i++){\r\n            rej_doc = submitted_obj.rejectedDocuments[i]\r\n            validation_result = CreateLHDN_Validation(rej_doc.invoiceCodeNumber, 0, rej_doc.error, [])\r\n            sub_results.push(validation_result)\r\n        }\r\n    };\r\n    return sub_results\r\n}\r\nexports.SubmissionUpdate = SubmissionUpdate\r\n\r\nfunction executeCWSm(credentials, company, dllName, funcName, parameter){\r\n    in_Obj = {\r\n        verb: \"Push\",\r\n        Request: {\r\n            RequestID: generateUniqueId(),\r\n            CallBackBo: credentials.cb_bo,\r\n            CallBackFn: credentials.cb_func,\r\n            Method: \"getdata\",\r\n            Payload: {\r\n                CompanyNo: company,\r\n                DllName: dllName,\r\n                FuncName: funcName,\r\n                SetCommit: false,\r\n                Parameters: parameter\r\n            }\r\n        }\r\n    }\r\n    println(\"In Object\", JSON.stringify(in_Obj))\r\n    debug(JSON.stringify(in_Obj))\r\n    var out = SendToWS(credentials.ws_endpoint, in_Obj)\r\n    println(\"Out\",JSON.stringify(out))\r\n    debug(JSON.stringify(out))\r\n    return out\r\n}\r\nexports.executeCWSm = executeCWSm\r\n\r\nfunction UpdateStatusToSource(e_inv_no, stat, vld_time){\r\n    einvoice_data = CralDB.QueryByComp(`select e_inv_no,comp,tran,idoc,dataset,submission_uid,doc_uuid,src_type from {{einv_header}} where e_inv_no='${e_inv_no}'`, jscall.company)\r\n    // debug(einvoice_data)\r\n    // if (einvoice_data?.length != 0){\r\n    //     // Input einvoice_data[0].e_inv_no\r\n    // }\r\n    update_result = []\r\n    einv_data = CralDB.QueryByComp(`select data_set as dataset,tran,idoc,CONCAT(tran,idoc) as \"e_inv_no\", comp, src_type from {{conso_header}} where conso_inv='${e_inv_no}'`,jscall.company)\r\n    if (einv_data.length == 0){\r\n        update_result.push({\r\n            \"Status\": submission_update(einvoice_data[0], stat, vld_time),\r\n            \"InvoiceNumber\": einvoice_data[0].e_inv_no\r\n        })\r\n    } else {\r\n        einv_data.forEach(inv => {\r\n            inv[\"submission_uid\"] = einvoice_data[0].submission_uid\r\n            inv[\"doc_uuid\"] = einvoice_data[0].doc_uuid\r\n        })\r\n        for (var s=0; s<einv_data?.length; s++){\r\n            update_result.push({\r\n                \"Status\": submission_update(einv_data[s], stat, vld_time),\r\n                \"InvoiceNumber\": einv_data[s].e_inv_no\r\n            })\r\n        }\r\n    }\r\n    CralUtil.LogInfo(\"StatusUpdation\", e_inv_no, update_result)\r\n}\r\nexports.UpdateStatusToSource = UpdateStatusToSource\r\n\r\nfunction CreateOutStatus(dataset, company, inv_no, status, lhdn_date, submission_id, uuid, src_type) {\r\n    let statusObj = {}\r\n\r\n    statusObj[\"data_set\"] = dataset\r\n    statusObj[\"invoice_no\"] = inv_no\r\n    statusObj[\"company\"] = company\r\n    statusObj[\"status\"] = status \r\n    statusObj[\"lhdn_date\"] = lhdn_date \r\n    statusObj[\"sub_uid\"] = submission_id\r\n    statusObj[\"uuid\"] = uuid\r\n    statusObj[\"src_type\"] = src_type\r\n   let result = CralDB.PublishTopic(\"invoicestatusout\", jscall.company, \"Upsert\", statusObj,jscall.User)\r\n    if (result?.Success == true ){\r\n        return true \r\n    }\r\n    return false \r\n}\r\n\r\nfunction submission_update(inv_obj, stat, vld_time){\r\n    ds_credential = CralDB.QueryByComp(`select * from {{ds_parameter}} where data_set='${inv_obj.dataset}'`, jscall.company)\r\n    if (ds_credential?.length != 0){\r\n        switch(ds_credential[0].type){\r\n            case \"cwsm\":\r\n                input_parm = [\r\n                    {\r\n                        ParameterNo: 1,\r\n                        Type: \"json\",\r\n                        Value: {\r\n                            \"Company\": inv_obj.comp,\r\n                            \"E_InvNumber\": inv_obj.e_inv_no,\r\n                            \"InvoiceNumber\": inv_obj.idoc,\r\n                            \"E_InvDateTime\": vld_time,\r\n                            \"E_InvStatus\": stat,\r\n                            \"ErrorMessage\": \"\",\r\n                            \"TransactionType\": inv_obj.tran,\r\n                            \"SUID\": inv_obj.submission_uid,\r\n                            \"UUID\": inv_obj.doc_uuid\r\n                        }\r\n                    }\r\n                ]\r\n                cwsm_result = executeCWSm(ds_credential[0], jscall.company, \"otdeindll000100\", \"tdein.dll000100.update.status.Einvoice.portal2Ln\", input_parm)\r\n                return true\r\n            break;\r\n            default:\r\n                return CreateOutStatus(inv_obj.dataset, inv_obj.comp, inv_obj.e_inv_no, stat, \r\n                                vld_time, inv_obj.submission_uid, inv_obj.doc_uuid, \r\n                                CralUtil.GetListDesc(\"src_inv_type\", inv_obj.src_type))\r\n                // statusObj = {\r\n                //     \"data_set\": einvoice_data[0].dataset,\r\n                //     \"invoice_no\": einvoice_data[0].e_inv_no,\r\n                //     \"status\": stat,\r\n                //     \"company\": einvoice_data[0].comp,\r\n                //     \"lhdn_date\": vld_time,\r\n                //     \"sub_uid\": einvoice_data[0].submission_uid,\r\n                //     \"uuid\": einvoice_data[0].doc_uuid,\r\n                //     \"src_type\": CralUtil.GetListDesc(\"src_inv_type\", einvoice_data[0].src_type)\r\n                // }\r\n                // debug(statusObj)\r\n                // let result = CralDB.PublishTopic(\"invoicestatusout\", jscall.company, \"Upsert\", statusObj,jscall.User)\r\n                // if (result?.Success == true ){\r\n                //     return true \r\n                // }\r\n                // return false \r\n            break\r\n        }\r\n    }\r\n}\r\nfunction getLNtoken(){\r\n    api_data = CralDB.QueryByComp(\"select * from {{e_inv_parameter}} where seqn=0\", jscall.company)\r\n    api_info = {\r\n        \"url\":api_data[0].cws_url,\r\n        \"userdetails\":{\r\n            \"username\":api_data[0].cws_user,\r\n            \"password\":api_data[0].cws_pswd\r\n        }\r\n    }\r\n\r\n    token_info = jscall.ExecuteAPI(\"POST\", api_info.url + \"/auth\", api_info.userdetails)\r\n    if (token_info.StatusCode != 200){\r\n        return \"\"\r\n    } else {\r\n        response_data = JSON.parse(token_info.Data)\r\n        return response_data.Token\r\n    }\r\n}\r\n\r\nfunction executeCWSCall(method, url, payload) {\r\n    ln_token = getLNtoken()\r\n    if (ln_token == \"\"){\r\n        return \"Unable to get CWS Token.\"\r\n    } else {\r\n        return jscall.ExecuteAPI(method, url, payload, \"token\", ln_token)\r\n    }\r\n}\r\n// exports.executeCWSCall = executeCWSCall\r\n\r\n// function UpdateStatusToSource(einv_number, status, lhdn_vld_dt){\r\n//     src_update = CralDB.QueryByComp(\"select comp,tran,idoc,dataset from {{einv_header}} where e_inv_no='\" + einv_number +\"'\", jscall.company)\r\n//     src_update_lines = CralDB.QueryByComp(\"select line from {{einv_lines}} where e_inv_no='\" + einv_number + \"' order by line\", jscall.company)\r\n//     lines = []\r\n//     for (i=0;i<src_update_lines.length;i++){\r\n//         lines.push({\r\n//             \"Line_No\": src_update_lines[i].line,\r\n//             \"Status\": status,\r\n//             \"ErrorMessage\": \"\"\r\n//         })\r\n//     }\r\n//     update_payload = {\r\n//         \"Company\": src_update[0].comp,\r\n//         \"TransactionType\": src_update[0].tran,\r\n//         \"InvoiceNumber\": src_update[0].idoc,\r\n//         \"E_InvDateTime\": lhdn_vld_dt,\r\n//         \"E_InvStatus\": status,\r\n//         \"ErrorMessage\": \"\",\r\n//         \"DocumentType\": \"\",\r\n//         \"Lines\": lines\r\n//     }\r\n//     ds_type = CralDB.QueryByComp(\"select type from ds_parameter where data_set='$1'\", jscall.company, src_update[0].dataset)\r\n//     if (ds_type.length != 0){\r\n//         switch(ds_type[0].type){\r\n//             case \"cws\":\r\n//                     api_url = CralDB.QueryByComp(\"select cws_url from {{e_inv_parameter}} where seqn=0\", 0)\r\n//                     input_data = {\r\n//                         \"inpt.json\": update_payload\r\n//                     }\r\n//                     status_api = executeCWSCall(\"POST\", api_url[0].cws_url + \"/api/\" + jscall.company.toString() + \"/portaltolnDev\", input_data)\r\n//                     println(JSON.stringify(status_api))\r\n//                     if (status_api.StatusCode != 200){\r\n//                         return {\r\n//                             \"Error\":\"Unable to update to Source.\"\r\n//                         }\r\n//                     } else {\r\n//                         ret_stat = JSON.parse(status_api.Data)\r\n//                         ret_stat.Error_to_LN = \"\"\r\n//                         return ret_stat\r\n//                     }\r\n//             break\r\n//             case \"cwsm\":\r\n//             break\r\n//             // To do for filelist\r\n//             default:\r\n//                 return {\r\n//                     \"Error\":\"Outgoing Type is not defined in DS Parameter.\"\r\n//                 }\r\n//             break\r\n//         }\r\n//     } else {\r\n//         return {\r\n//             \"Error\":\"Unable to update to Source.\"\r\n//         }\r\n//     }\r\n// }\r\n// exports.UpdateStatusToSource = UpdateStatusToSource\r\n\r\nfunction CreateValidation(invCode, line_num, val_catg, err_code, err_mess, err_trgt, prop_path, details){\r\n    if (val_catg == \"10\" && err_code == \"\"){\r\n        err_code = \"PV\"\r\n    }\r\n    vald_payload = {\r\n        \"einv_code\": invCode,\r\n        \"einv_line\": line_num,\r\n        \"val_catg\": val_catg,\r\n        \"err_code\": err_code,\r\n        \"mess\": err_mess,\r\n        \"trgt\": err_trgt,\r\n        \"prop_path\": prop_path,\r\n        \"details\": details\r\n    }\r\n    // update_header = CralDB.QueryByComp(\"select comp,tran,idoc,line,e_inv_no from {{einv_header}} where e_inv_no='$1'\", jscall.company, invCode)[0]\r\n    // update_header.einv_stat = \"60\"\r\n    // update_header.val_err = val_catg\r\n    update_header = {\r\n        \"e_inv_no\": invCode,\r\n        \"einv_stat\": \"60\"\r\n    }\r\n    header_status_update = CralDB.PublishTopic(\"einv_header\", jscall.company, \"Update\", update_header, jscall.user)\r\n    if (!header_status_update?.Success){\r\n        CralUtil.LogInfo(\"HeaderStatusUpdate\", invCode, {\"result\": header_status_update, \"input\": update_header})\r\n    }\r\n    vld_update = CralDB.PublishTopic(\"einv_validation\", jscall.company, \"Insert\", vald_payload, jscall.user)\r\n    if (!vld_update?.Success){\r\n        CralUtil.LogInfo(\"Error Creating Validation\", invCode, {\"input\": vald_payload, \"result\": vld_update})\r\n    }\r\n    return vld_update\r\n}\r\nexports.CreateValidation = CreateValidation\r\n\r\nfunction CreatePortalValidation(invCode, line_num, err_mess, err_propPath){\r\n    return CreateValidation(invCode, line_num, \"10\", \"\", err_mess, \"\", err_propPath, \"\")\r\n}\r\nexports.CreatePortalValidation = CreatePortalValidation\r\n\r\nfunction CreateLHDN_Validation(invCode, line_num, err_obj, valid_result){\r\n    err_code = (err_obj.code == \"\" || err_obj.code == undefined || err_obj.code == null)?\"\":err_obj.code;\r\n    err_message = (err_obj.message == \"\" || err_obj.message == undefined || err_obj.message == null)?\"\":err_obj.message;\r\n    err_target = (err_obj.target == \"\" || err_obj.target == undefined || err_obj.target == null)?\"\":err_obj.target;\r\n    err_propPath = (err_obj.propertyPath == \"\" || err_obj.propertyPath == undefined || err_obj.propertyPath == null)?\"\":err_obj.propertyPath;\r\n    line_num = getInvoiceLineIndex(err_propPath)\r\n    if (line_num != null){\r\n        line_num = CralDB.QueryByComp(\"select line from {{einv_lines}} where e_inv_no='$1' order by line\", jscall.company, invCode)[line_num].line\r\n    } else {\r\n        line_num = 0\r\n    }\r\n    valid_result.push(CreateValidation(invCode, line_num, \"20\", err_code, err_message, err_target, err_propPath, \"\"))\r\n    if (err_obj.details?.length != 0 && err_obj.details != null && err_obj.details != undefined){\r\n        for (j = 0; j<err_obj.details.length; j++){\r\n            valid_result = CreateLHDN_Validation(invCode, 0, err_obj.details[j], valid_result)\r\n        }\r\n    }\r\n    return valid_result\r\n    // return CreateValidation(invCode, line_num, \"20\", err_code, err_mess, err_trgt, prop_path, details)\r\n}\r\nexports.CreateLHDN_Validation = CreateLHDN_Validation\r\n\r\nfunction getInvoiceLineIndex(input) {\r\n    const regex = /InvoiceLine\\[(\\d+)\\]/;\r\n    const match = regex.exec(input);\r\n    return match ? parseInt(match[1], 10) : null;\r\n}\r\nexports.getInvoiceLineIndex = getInvoiceLineIndex\r\n\r\nfunction SendSubmissionMail(mail_input){\r\n    debug(\"Sending Mail\")\r\n    mail = {}\r\n    mail.To = []\r\n    mail.Cc = []\r\n    if (mail_input.supplier_mailID != \"\" && mail_input.supplier_mailID != null && mail_input.supplier_mailID != undefined){\r\n        mail.Cc.push(mail_input.supplier_mailID)\r\n    }\r\n    if (mail_input.buyer_mailID != \"\" && mail_input.buyer_mailID != null && mail_input.buyer_mailID != undefined){\r\n        mail.To.push(mail_input.buyer_mailID)\r\n    } else {\r\n        return\r\n    }\r\n    mail.Subject = mail_input.sname.split(\" \")[0] + \"_Invoice Submission_\" + mail_input.invCodeNum\r\n    mail.Template = \"lhdnStatus\"\r\n    mail.InputObject = {\r\n        \"supplier\": mail_input.bname,\r\n        \"invoice\": mail_input.invCodeNum,\r\n        \"dsca\": mail_input.Submission_Uid,\r\n        \"status\": mail_input.LHDNStatus\r\n    }\r\n    // mail.FileAttachments = [mail_input.Attachment]\r\n    pdf = printReportLayout(mail_input.invCodeNum)\r\n    if (pdf.result != \"\" && pdf.result != null && pdf.result != undefined){\r\n        mail.FileAttachments = [pdf.result]\r\n    } else {\r\n        // mail.FileAttachments = [\"fa8e1ea3-3c9f-40cf-a20b-f719630afa4d\"]\r\n    }\r\n    debug(JSON.stringify(mail))\r\n    debug(\"Mail Sent\")\r\n    return CralUtil.SendMail(mail)\r\n}\r\nexports.SendSubmissionMail = SendSubmissionMail\r\n\r\nfunction check_validations(EInvoiceCodeNumber){\r\n    debug(\"Checking...\")\r\n\r\n    eih_data = CralDB.QueryByComp(\"select * from {{einv_header}} where e_inv_no='$1'\", jscall.company, EInvoiceCodeNumber)\r\n    if (eih_data?.length == 0){\r\n        // jscall_error = \"Record not found\"\r\n        CralUtil.LogInfo(\"Check Invoice Validation\", EInvoiceCodeNumber, eih_data)\r\n        return false\r\n    } else {\r\n\r\n        // Skip if skipMaster is Enabled.\r\n        isSkip = CralDB.QueryByComp(`select skip_master from {{entity_data_set}} where sup_company=${eih_data[0].comp} and data_set='${eih_data[0].dataset}'`, jscall.company)[0]?.skip_master\r\n        CralUtil.LogInfo(\"SkipPV\", eih_data[0].e_inv_no, isSkip)\r\n        if (isSkip){\r\n            return true\r\n        }\r\n\r\n        core_fields_valid(EInvoiceCodeNumber)\r\n        debug(\"After Core Validation\")\r\n        if (eih_data[0].s_line_cnt != eih_data[0].line_cnt){\r\n            CreatePortalValidation(eih_data[0].e_inv_no, 0, \"Line Count Miss Match with Source.\", \"\")\r\n        }\r\n        debug(\"AFter Line Count\")\r\n\r\n        // TIN Checking From PV is Diabled\r\n        \r\n        // if (eih_data[0].sctg != \"30\"){\r\n        //     let [sup_id_val, sup_id_type] = get_reg_num_type(eih_data[0].sup_reg_brn, eih_data[0].sup_reg_nric, eih_data[0].sup_reg_army, eih_data[0].sup_reg_passport)\r\n        //     debug(eih_data[0].sup_tin, sup_id_type, sup_id_val)\r\n        //     if( validate_tin(eih_data[0].sup_tin, sup_id_type, sup_id_val) != true){\r\n        //         CreatePortalValidation(eih_data[0].e_inv_no, 0, \"Supplier TIN Validation Failed\", \"Supplier\")\r\n        //     }\r\n        // }\r\n        // if (eih_data[0].sctg != \"20\"){\r\n        //     let [buy_id_val, buy_id_type] = get_reg_num_type(eih_data[0].buy_reg_brn, eih_data[0].buy_reg_nric, eih_data[0].buy_reg_army, eih_data[0].buy_reg_passport)\r\n        //     if (eih_data[0].inv_bp != \"\" && eih_data[0].inv_bp != null && eih_data[0].inv_bp != undefined){\r\n        //         if( validate_tin(eih_data[0].buy_tin, buy_id_type, buy_id_val) != true){\r\n        //             CreatePortalValidation(eih_data[0].e_inv_no, 0, \"Buyer TIN Validation Failed\", \"Buyer\")\r\n        //         }\r\n        //     }\r\n        // }\r\n        // let [ship_id_val, ship_id_type] = get_reg_num_type(eih_data[0].ship_reg_brn, eih_data[0].ship_reg_nric, eih_data[0].ship_reg_army, eih_data[0].ship_reg_passport)\r\n        // if (eih_data[0].ship_tin && ship_id_val){\r\n        //     if( validate_tin(eih_data[0].ship_tin, ship_id_type, ship_id_val) != true){\r\n        //         CreatePortalValidation(eih_data[0].e_inv_no, 0, \"Shipper TIN Validation Failed\", \"Shipper\")\r\n        //     }\r\n        // }\r\n        \r\n        if (eih_data[0].doct == \"02\" || eih_data[0].doct == \"12\"){\r\n            if (!eih_data[0].org_e_inv_no){\r\n                // To Change this as go to For filing\r\n                // CreatePortalValidation(eih_data[0].e_inv_no, 0, \"Reference Document is missing (E-Invoice Number)\")\r\n            }\r\n            if (!eih_data[0].org_doc_uuid){\r\n                // To Change this as go to For filing\r\n                // CreatePortalValidation(eih_data[0].e_inv_no, 0, \"Reference Document is missing (Document UUID)\")\r\n            }\r\n        }\r\n        if (CralDB.QueryByComp(\"select einv_code from {{einv_validation}} where einv_code='$1'\", jscall.company, eih_data[0].e_inv_no)?.length == 0){\r\n            if (eih_data[0].err_msg != \"\" || eih_data[0].einv_stat != \"05\"){\r\n                resolved_update = {\r\n                    \"e_inv_no\": eih_data[0].e_inv_no,\r\n                    \"err_msg\": \"\",\r\n                    \"einv_stat\": \"05\"\r\n                }\r\n                if (eih_data[0].esta == \"10\"){\r\n                    resolved_update[\"e_invdt\"] = getCurrentDateTimeUTC()\r\n                }\r\n                CralDB.PublishTopic(\"einv_header\", jscall.company, \"Update\", resolved_update, jscall.user)\r\n            };\r\n            return true\r\n        }\r\n    }\r\n    return false\r\n}\r\nexports.check_validations = check_validations\r\n\r\nfunction validate_tin(tin, idType, idVal){\r\n    lhdn = NewLHDN()\r\n    token = get_lhdn_token()\r\n    if (token == false){\r\n        return false;   \r\n    } else {\r\n        lhdn_response = lhdn.ValidateTaxPayerTIN(token, tin, idType, idVal)\r\n        switch(lhdn_response.Result.Status){\r\n            case 200:\r\n                return lhdn_response.Result.Response\r\n                break;\r\n            default:\r\n                // jscall_error = lhdn_response.Result.Status + \" - \" + JSON.stringify(lhdn_response.Result.Response)\r\n                return false;\r\n                break\r\n        }\r\n    }\r\n    return false\r\n}\r\nexports.validate_tin = validate_tin\r\n// function check_mapping_header(currency, taxt, invNum){\r\n//     // if (currency != \"\" && taxt != \"\" && currency != undefined && taxt != undefined && currency != null && taxt != null){\r\n//     //     return true\r\n//     // }\r\n//     if (currency == \"\" || currency == null || currency == undefined){\r\n//         // CreatePortalValidation(invNum, 0, \"Unmapped Currency Code.\", \"Currency\")\r\n//         CreateValidation(invNum, 0, \"10\", \"MAP\", \"Unmapped Currency Code\", \"Invoice.Map\", \"\", \"\")\r\n//     }\r\n//     if (taxt == \"\" || taxt == null || taxt == undefined){\r\n//         // CreatePortalValidation(invNum, 0, \"Unmapped Tax Code\", \"Unmapped Tax Code\")\r\n//         CreateValidation(invNum, 0, \"10\", \"MAP\", \"Unmapped Tax Code\", \"Invoice.Map\", \"\", \"\")\r\n//     }\r\n// }\r\n\r\nfunction core_fields_valid(EInvoiceCodeNumber){\r\n    core_field_err = \"\"\r\n    doc_header = CralDB.QueryByComp(\"select * from {{einv_header}} where e_inv_no='$1'\", jscall.company, EInvoiceCodeNumber)\r\n    doc_line = CralDB.QueryByComp(\"select * from {{einv_lines}} where e_inv_no='$1'\", jscall.company, EInvoiceCodeNumber)\r\n    if (doc_header.length == 0 || doc_line == 0){\r\n        core_field_err = \"Record Not Found\"\r\n        return;\r\n    } else {\r\n        // if (doc_header[0].doct == \"11\" || doc_header[0].doct == \"12\"){\r\n        //     buyer_code = doc_header[0].ifbp\r\n        // } else {\r\n        //     buyer_code = doc_header[0].itbp\r\n        // }\r\n        // sup_field_vald(doc_header[0].comp, doc_header[0].e_inv_no)\r\n        // if (isConso != true){\r\n        //     buyer_field_vald(buyer_code, doc_header[0].e_inv_no)\r\n        // }\r\n\r\n        // Invoice Data\r\n        if (doc_header[0].doct == \"\"){\r\n            // core_field_err = core_field_err + \"E-Invoice Type Code is Mandatory.\"\r\n            CreatePortalValidation(doc_header[0].e_inv_no, 0, \"E-Invoice Type Code is Mandatory.\", \"Invoice\")\r\n        }\r\n        if (doc_header[0].ccur == \"\"){\r\n            // core_field_err = core_field_err + \"Currency code is Mandatory.\"\r\n            CreatePortalValidation(doc_header[0].e_inv_no, 0, \"Currency code is Mandatory.\", \"Invoice\")\r\n        }\r\n\r\n        // Disabled on 23.12.2024 - FOC is applicable to LHDN Submission\r\n\r\n        // if (doc_header[0].tote == 0){\r\n        //     // core_field_err = core_field_err + \"Total Excluding Tax is Mandatory.\"\r\n        //     CreatePortalValidation(doc_header[0].e_inv_no, 0, \"Total Excluding Tax is Mandatory.\", \"Invoice\")\r\n        // }\r\n        // if (doc_header[0].toti == 0){\r\n        //     // core_field_err = core_field_err + \"Total Including Tax is Mandatory\"\r\n        //     CreatePortalValidation(doc_header[0].e_inv_no, 0, \"Total Including Tax is Mandatory.\", \"Invoice\")\r\n        // }\r\n        // if (doc_header[0].tpat == 0){\r\n        //     // core_field_err = core_field_err + \"Total Payable Amount is Mandatory\"\r\n        //     CreatePortalValidation(doc_header[0].e_inv_no, 0, \"Total Payable Amount is Mandatory.\", \"Invoice\")\r\n        // }\r\n        \r\n\r\n\r\n        if (doc_header[0]?.cvat == \"\"){\r\n            CreatePortalValidation(doc_header[0].e_inv_no, 0, \"Tax Type is Mandatory\", \"Invoice\")\r\n        } //else {\r\n        //     // Total Tax amount per tax type\r\n        //     if (doc_header[0]?.tott == 0){\r\n        //         if (doc_header[0]?.cvat != \"06\" && doc_header[0]?.cvat != \"E\"){\r\n        //         }\r\n        //     }\r\n        // }\r\n\r\n        // Invoice Line\r\n        for (let i = 0; i < doc_line.length; i++){\r\n            if (doc_line[i].clas == \"\"){\r\n                // core_field_err = core_field_err + \"Classification is Mandatory - Line \" + doc_line[i].line.toString() + \".\"\r\n                CreatePortalValidation(doc_header[0].e_inv_no, doc_line[i].line, \"Classification is Mandatory.\", \"InvoiceLine\")\r\n            }\r\n            if (doc_line[i].item_desc == \"\"){\r\n                // core_field_err = core_field_err + \"Product Description is Mandatory - Line \" + doc_line[i].line.toString() + \".\"\r\n                CreatePortalValidation(doc_header[0].e_inv_no, doc_line[i].line, \"Description of Product or Service is Mandatory.\", \"InvoiceLine\")\r\n            }\r\n            \r\n            // if (doc_line[i].pric == 0){\r\n            //     // core_field_err = core_field_err + \"Price is Mandatory - Line \" + doc_line[i].line.toString() + \".\"\r\n            //     CreatePortalValidation(doc_header[0].e_inv_no, doc_line[i].line, \"Unit Price is Mandatory.\", \"InvoiceLine\")\r\n            // }\r\n            // if (doc_line[i].stot == 0){\r\n            //     // core_field_err = core_field_err + \"Sub Total is Mandatory - Line \" + doc_line[i].line.toString() + \".\"\r\n            //     CreatePortalValidation(doc_header[0].e_inv_no, doc_line[i].line, \"Sub Total is Mandatory.\", \"InvoiceLine\")\r\n            // }\r\n            // if (doc_line[i].amti == 0){\r\n            //     // core_field_err = core_field_err + \"Total Excluding Tax is Mandatory - Line \" + doc_line[i].line.toString() + \".\"\r\n            //     CreatePortalValidation(doc_header[0].e_inv_no, doc_line[i].line, \"Total Excluding Tax is Mandatory.\", \"InvoiceLine\")\r\n            // }\r\n\r\n            if (!doc_line[i].cvat){\r\n                CreatePortalValidation(doc_header[0].e_inv_no, doc_line[i].line, \"Tax type is Mandatory.\", \"InvoiceLine\")\r\n            }\r\n\r\n            // if (doc_line[i].cvat == \"E\" && !doc_line[i].ceno){\r\n                // To check is exemption number is available.\r\n                \r\n                // To Change this as go to For Filing\r\n                // CreatePortalValidation(doc_header[0].e_inv_no, doc_line[i].line, \"Tax exemption reason is required\", \"TaxExemption\")\r\n            // }\r\n            // if (doc_line[i].cvat != \"E\" && doc_line[i].cvat != \"\" && doc_line[i].txai == 0){\r\n            //     //Tax Amount\r\n            // }\r\n\r\n        }\r\n\r\n        // Supplier Data\r\n        if (doc_header[0].sup_name == \"\"){\r\n            CreatePortalValidation(doc_header[0].e_inv_no, 0, \"Supplier Name is Mandatory.\", \"Supplier\")\r\n        }\r\n        if (doc_header[0].sup_tin == \"\"){\r\n            // core_field_err = core_field_err + \"Supplier TIN is Mandatory.\"\r\n            CreatePortalValidation(doc_header[0].e_inv_no, 0, \"Supplier TIN is Mandatory.\", \"Supplier\")\r\n        }\r\n        if (doc_header[0].sup_reg_nric == \"\" && doc_header[0].sup_reg_brn == \"\" && doc_header[0].sup_reg_passport == \"\" && doc_header[0].sup_reg_army == \"\"){\r\n            // core_field_err = core_field_err + \"Supplier Registeration No. is Mandatory.\"\r\n            CreatePortalValidation(doc_header[0].e_inv_no, 0, \"Supplier Registration No. is Mandatory.\", \"Supplier\")\r\n        }\r\n        // if (doc_header[0].sup_sst == true && doc_header[0].sup_sst_reg == \"\"){\r\n        //     // core_field_err = core_field_err + \"Supplier SST is Mandatory.\"\r\n        //     CreatePortalValidation(doc_header[0].e_inv_no, 0, \"Supplier SST is Mandatory.\", \"Supplier\")\r\n        // }\r\n        // if (doc_header[0].sup_ttx == true && doc_header[0].sup_ttx_no == \"\"){\r\n        //     // core_field_err = core_field_err + \"Supplier Tourism Tax is Mandatory.\"\r\n        //     CreatePortalValidation(doc_header[0].e_inv_no, 0, \"Supplier Tourism Tax is Mandatory.\", \"Supplier\")\r\n        // }\r\n        if (doc_header[0].sup_msic == \"\"){\r\n            // core_field_err = core_field_err + \"MSIC Code is Mandatory.\"\r\n            CreatePortalValidation(doc_header[0].e_inv_no, 0, \"Supplier MSIC code is Mandatory.\", \"Supplier\")\r\n        }\r\n        if (doc_header[0].sup_badsca == \"\"){\r\n            // core_field_err = core_field_err + \"Business Activity is Mandatory.\"\r\n            CreatePortalValidation(doc_header[0].e_inv_no, 0, \"Business Activity is Mandatory.\", \"Supplier\")\r\n        }\r\n        if (doc_header[0].sup_adrs == \"\"){\r\n            // core_field_err = core_field_err + \"Supplier Address is Mandatory.\"\r\n            CreatePortalValidation(doc_header[0].e_inv_no, 0, \"Supplier Address is Mandatory.\", \"Supplier\")\r\n        }\r\n        if (doc_header[0].sup_cont_num == \"\"){\r\n            // core_field_err = core_field_err + \"Supplier Contact Number is Mandatory.\"\r\n            CreatePortalValidation(doc_header[0].e_inv_no, 0, \"Supplier Contact Number is Mandatory.\", \"Supplier\")\r\n        }\r\n        if (doc_header[0].sup_adrs_line0 == \"\" && doc_header[0].sup_adrs_line1 == \"\" && doc_header[0].sup_adrs_line2 == \"\"){\r\n            CreatePortalValidation(doc_header[0].e_inv_no, 0, \"Supplier Address - Line is Mandatory\", \"Supplier\")\r\n        }\r\n        if (doc_header[0].sup_city == \"\"){\r\n            CreatePortalValidation(doc_header[0].e_inv_no, 0, \"Supplier Address - City is Mandatory.\", \"Supplier\")\r\n        }\r\n        if (doc_header[0].sup_cste == \"\"){\r\n            if (isSourceAddressAvil(doc_header[0].dataset, doc_header[0].sup_adrs, \"state\") == true){\r\n                CreatePortalValidation(doc_header[0].e_inv_no, 0, \"Supplier Address - Unmapped State Code.\", \"Supplier\")\r\n            } else {\r\n                CreatePortalValidation(doc_header[0].e_inv_no, 0, \"Supplier Address - State is Mandatory.\", \"Supplier\")\r\n            }\r\n        }\r\n        if (doc_header[0].sup_country == \"\"){\r\n            if (isSourceAddressAvil(doc_header[0].dataset, doc_header[0].sup_adrs, \"country\") == true){\r\n                CreatePortalValidation(doc_header[0].e_inv_no, 0, \"Supplier Address - Unmapped Country Code.\", \"Supplier\")\r\n            } else {\r\n                CreatePortalValidation(doc_header[0].e_inv_no, 0, \"Supplier Address - Country is Mandatory.\", \"Supplier\")\r\n            }\r\n        }\r\n\r\n        // Buyer Data\r\n        if(doc_header[0].buy_name == \"\"){\r\n            CreatePortalValidation(doc_header[0].e_inv_no, 0, \"Buyer Name is Mandatory.\", \"Buyer\")\r\n        }\r\n        if(doc_header[0].buy_tin == \"\"){\r\n            CreatePortalValidation(doc_header[0].e_inv_no, 0, \"Buyer TIN is Mandatory.\", \"Buyer\")\r\n        }\r\n        if(doc_header[0].buy_reg_nric == \"\" && doc_header[0].buy_reg_brn == \"\" && doc_header[0].buy_reg_passport == \"\" && doc_header[0].buy_reg_army == \"\"){\r\n            CreatePortalValidation(doc_header[0].e_inv_no, 0, \"Buyer Registration is Mandatory.\", \"Buyer\")\r\n        }\r\n        // if(doc_header[0].buy_sst == true && doc_buy[0].buy_sst_reg == \"\"){\r\n        //     CreatePortalValidation(doc_header[0].e_inv_no, 0, \"Buyer SST is Mandatory.\", \"Buyer\")\r\n        // }\r\n        if(doc_header[0].buy_adrs == \"\"){\r\n            CreatePortalValidation(doc_header[0].e_inv_no, 0, \"Buyer Address is Mandatory.\", \"Buyer\")\r\n        }\r\n        if(doc_header[0].buy_cont_num == \"\"){\r\n            CreatePortalValidation(doc_header[0].e_inv_no, 0, \"Buyer Contact Number is Mandatory.\", \"Buyer\")\r\n        }\r\n        if(doc_header[0].buy_adrs_line0 == \"\" && doc_header[0].buy_adrs_line1 == \"\" && doc_header[0].buy_adrs_line2 == \"\"){\r\n            CreatePortalValidation(doc_header[0].e_inv_no, 0, \"Buyer Address - Line is Mandatory.\", \"Buyer\")\r\n        }\r\n        if(doc_header[0].buy_city == \"\"){\r\n            CreatePortalValidation(doc_header[0].e_inv_no, 0, \"Buyer Address - City is Mandatory.\", \"Buyer\")\r\n        }\r\n        if(doc_header[0].buy_cste == \"\"){\r\n            if (isSourceAddressAvil(doc_header[0].dataset, doc_header[0].buy_adrs, \"country\") == true){\r\n                CreatePortalValidation(doc_header[0].e_inv_no, 0, \"Buyer Address - Unmapped State Code.\", \"Buyer\")\r\n            } else {\r\n                CreatePortalValidation(doc_header[0].e_inv_no, 0, \"Buyer Address - State is Mandatory.\", \"Buyer\")\r\n            }\r\n        }\r\n        if(doc_header[0].buy_country == \"\"){\r\n            if (isSourceAddressAvil(doc_header[0].dataset, doc_header[0].buy_adrs, \"country\") == true){\r\n                CreatePortalValidation(doc_header[0].e_inv_no, 0, \"Buyer Address - Unmapped Country Code.\", \"Buyer\")\r\n            } else {\r\n                CreatePortalValidation(doc_header[0].e_inv_no, 0, \"Buyer Address - Country is Mandatory.\", \"Buyer\")\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nfunction isSourceAddressAvil(dset, adrCode, field){\r\n    adrs_data = CralDB.QueryByComp(\"select adrs_state,adrs_country from {{address_master}} where data_set='$1' and adrs_code='$2'\", jscall.company, dset, adrCode)\r\n    if (adrs_data?.length != 0){\r\n        switch(field){\r\n            case \"state\":\r\n                if(adrs_data[0]?.adrs_state != \"\" && adrs_data[0]?.adrs_state != null && adrs_data[0]?.adrs_state != undefined){\r\n                    return true\r\n                }\r\n            break\r\n            case \"country\":\r\n                if(adrs_data[0]?.adrs_country != \"\" && adrs_data[0]?.adrs_country != null && adrs_data[0]?.adrs_country != undefined){\r\n                    return true\r\n                }\r\n            break\r\n            default:\r\n            return false;\r\n        }\r\n    }\r\n    return false\r\n}\r\n\r\nfunction getClassificationGroup(){\r\n    clas_data = CralDB.QueryByComp(\"select classification from {{supplier_companies}} where sup_company=$1\", jscall.company, jscall.company)\r\n    if (clas_data.length != 0){\r\n        return clas_data[0].classification\r\n    }\r\n    return \"\"\r\n}\r\nexports.getClassificationGroup = getClassificationGroup\r\n\r\nfunction get_doc_type(doct_val)\r\n{\r\n    switch(doct_val.toUpperCase()){\r\n        case \"INVOICE\":\r\n            src_doc = \"10\"\r\n            break;\r\n        case \"CREDIT NOTE\":\r\n            src_doc = \"20\"\r\n            break;\r\n        case \"ADVANCE RECEIPT REQUEST\":\r\n            src_doc = \"40\"\r\n            break;\r\n        case \"PAY-FROM RECEIPT\":\r\n            src_doc = \"50\"\r\n            break;\r\n        case \"CORRECTION\":\r\n            src_doc = \"60\"\r\n            break;\r\n        case \"ADVANCE INVOICE\":\r\n            src_doc = \"30\"\r\n            break;\r\n        case \"ADVANCE PAYMENT REQUEST\":\r\n            src_doc = \"70\"\r\n            break;\r\n        case \"PRO FORMA INVOICE\":\r\n            src_doc = \"80\"\r\n            break;\r\n        case \"CUSTOMS INVOICE\":\r\n            src_doc = \"90\"\r\n            break;\r\n        case \"CONSIGNMENT INVOICE\":\r\n            src_doc = \"100\"\r\n            break;\r\n        case \"PURCHASE INVOICE\":\r\n            src_doc = \"200\"\r\n            break;\r\n        case \"PURCHASE CREDIT NOTE\":\r\n            src_doc = \"250\"\r\n            break;\r\n        case \"SALES INVOICE\":\r\n            src_doc = \"10\"\r\n            break;\r\n        default:\r\n            src_doc = doct_val\r\n            break;\r\n    }\r\n    doc_types = CralDB.QueryByComp(\"select * from {{e_inv_types}} where src_doc_type='$1'\", jscall.company, src_doc)\r\n    if (doc_types.length != 0){\r\n        if (doc_types[0].einv_code == \"\"){\r\n            // jscall_error = \"Mapping is Required for Document Type.\"\r\n        }\r\n        return doc_types[0].einv_code\r\n    }\r\n    // jscall_error = \"Document Type not Implemented.\"\r\n    return \"\"\r\n}\r\nexports.get_doc_type = get_doc_type\r\n\r\nfunction get_src_inv_type(get_src_type){\r\n    map_inv_typ = \"\"\r\n    switch(get_src_type?.toUpperCase()){\r\n        case \"MANUAL SALES\":\r\n            map_inv_typ = \"10\"\r\n            break;\r\n        case \"SALES ORDER\":\r\n            map_inv_typ = \"20\"\r\n            break;\r\n        case \"PURCHASE INVOICE\":\r\n            map_inv_typ = \"30\"\r\n            break;\r\n        case \"SALES INVOICE\":\r\n            map_inv_typ = \"40\"\r\n            break;\r\n         default:\r\n            map_inv_typ = get_src_type\r\n            break;\r\n    }\r\n    return map_inv_typ\r\n}\r\nexports.get_src_inv_type = get_src_inv_type\r\n\r\nfunction get_ccur(ccur_val, data_set){\r\n    ccur_data = CralDB.QueryByComp(\"select ccur from {{currency_codes}} where src_ccur='$1' and data_set='$2'\", jscall.company, ccur_val, data_set)\r\n    if (ccur_data.length != 0){\r\n        return ccur_data[0].ccur\r\n    }\r\n    return \"\"\r\n}\r\nexports.get_ccur = get_ccur\r\n\r\nfunction get_paym(paym_val, data_set){\r\n    paym_data = CralDB.QueryByComp(\"select paym from {{payment_modes}} where src_paym='$1' and data_set='$2'\", jscall.company, paym_val, data_set)\r\n    if (paym_data.length != 0){\r\n        return paym_data[0].paym\r\n    }\r\n    return \"\"\r\n}\r\nexports.get_paym = get_paym\r\n\r\nfunction get_cvat(cvat_val, data_set){\r\n    cvat_data = CralDB.QueryByComp(\"select ttype from {{tax_types}} where src_ttype='$1' and data_set='$2'\", jscall.company, cvat_val, data_set)\r\n    if (cvat_data.length != 0){\r\n        return cvat_data[0].ttype\r\n    }\r\n    return \"\"\r\n}\r\nexports.get_cvat = get_cvat\r\n\r\nfunction get_cuni(cuni_val, data_set){\r\n    cuni_data = CralDB.QueryByComp(\"select unit from {{uom_codes}} where src_unit='$1' and data_set='$2'\", jscall.company, cuni_val, data_set)\r\n    if (cuni_data.length != 0){\r\n        return cuni_data[0].unit\r\n    }\r\n    return \"\"\r\n}\r\nexports.get_cuni = get_cuni\r\n\r\nfunction get_clas(clas_val, data_set){\r\n    clas_data = CralDB.QueryByComp(\"select ccode from {{itm_classification_codes}} where src_ccode='$1' and data_set='$2'\", jscall.company, clas_val, data_set)\r\n    if (clas_data.length != 0){\r\n        return clas_data[0].ccode\r\n    } else {\r\n        clas_gl_data = CralDB.QueryByComp(\"select ccode from {{gl_codes}} where src_leac='$1' and data_set='$2'\", jscall.company, clas_val, data_set)\r\n        if (clas_gl_data.length != 0){\r\n            return clas_gl_data[0].ccode\r\n        }\r\n    }\r\n    return \"\"\r\n}\r\nexports.get_clas = get_clas\r\n\r\nfunction get_reg_num_type(brn, nric, army, passport){\r\n    if (brn == \"\"){\r\n        if (nric == \"\"){\r\n            if (army == \"\"){\r\n                r_num = passport\r\n                r_type = \"PASSPORT\"\r\n            } else {\r\n                r_num = army\r\n                r_type = \"ARMY\"\r\n            }\r\n        } else {\r\n            r_num = nric\r\n            r_type = \"NRIC\"\r\n        }\r\n    } else {\r\n        r_num = brn\r\n        r_type = \"BRN\"\r\n    }\r\n\r\n    return [r_num, r_type]\r\n}\r\nexports.get_reg_num_type = get_reg_num_type\r\n\r\nfunction get_PartyID(tin, brn, nric, army, passport, sst, ttx, with_sst_ttx){\r\n    [reg, reg_attr] = get_reg_num_type(brn, nric, army, passport)\r\n    id = [\r\n        {\r\n            \"SchemeID\": \"TIN\",\r\n            \"Value\": tin\r\n        },\r\n        {\r\n            \"SchemeID\": reg_attr,\r\n            \"Value\": reg\r\n        }\r\n    ]\r\n    if (sst != \"\" && sst != null && sst != undefined){\r\n        id.push({\r\n            \"SchemeID\": \"SST\",\r\n            \"Value\": sst\r\n        })\r\n    } else {\r\n        if (with_sst_ttx == true){\r\n            id.push({\r\n                \"SchemeID\": \"SST\",\r\n                \"Value\": \"NA\"\r\n            })\r\n        }\r\n    }\r\n    if (ttx != \"\" && ttx != null && ttx != undefined){\r\n        id.push({\r\n            \"SchemeID\": \"TTX\",\r\n            \"Value\": ttx\r\n        })\r\n    } else {\r\n        if (with_sst_ttx == true){\r\n            id.push({\r\n                \"SchemeID\": \"TTX\",\r\n                \"Value\": \"NA\"\r\n            })\r\n        }\r\n    }\r\n\r\n    return id\r\n}\r\n\r\nfunction get_state(ccty_val, state_val, data_set){\r\n    state_data = CralDB.QueryByComp(\"select cste from {{map_state_codes}} where src_ccty='$1' and src_cste='$2' and data_set='$3'\", jscall.company, ccty_val, state_val, data_set)\r\n    if (state_data.length != 0){\r\n        return state_data[0].cste\r\n    }\r\n    return \"\"\r\n}\r\nexports.get_state = get_state\r\n\r\nfunction get_ccty(ccty_val, data_set){\r\n    ccty_data = CralDB.QueryByComp(\"select ccty from {{country_codes}} where src_ccty='$1' and data_set='$2'\", jscall.company, ccty_val, data_set)\r\n    if (ccty_data.length != 0){\r\n        return ccty_data[0].ccty\r\n    }\r\n    return \"\"\r\n}\r\nexports.get_ccty = get_ccty\r\n\r\nfunction get_country_state(src_country, src_state, data_set){\r\n    country = get_ccty(src_country, data_set)\r\n    if (country == \"\"){\r\n        // Mapping Not Found.\r\n    }\r\n    state = get_state(src_country, src_state, data_set)\r\n    if (state == \"\"){\r\n        // Mapping Not Found.\r\n    }\r\n    return [country, state]\r\n}\r\nexports.get_country_state = get_country_state\r\n\r\nfunction getPostalAddress(country, state, city, postal_zone, lines){\r\n    return {\r\n        \"CityName\": city,\r\n        \"PostalZone\": postal_zone,\r\n        \"CountrySubentityCode\": state, \r\n        \"AddressLine\": lines.map(line => ({ \"Line\": line })),\r\n        \"Country\":{\r\n            \"IdentificationCode\": {\r\n                \"ListAgencyID\": \"6\",\r\n\t\t\t\t\"ListID\": \"ISO3166-1\",\r\n                \"Value\": country\r\n\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nfunction getStringDateTime(input_date){\r\n\r\n    // Changed for optional Date Values\r\n    if (!input_date){\r\n        return [\"\", \"\"]\r\n    }\r\n\r\n    var str_date = input_date.toString()\r\n    date_array = str_date.split(\" \");\r\n    return [date_array[0], date_array[1] + \"Z\"]\r\n}\r\n\r\nfunction getAdditionalDocRef(frm1, ftrd, frm2, dtrm){\r\n    adoc_ref = []\r\n    if (frm1){\r\n        adoc_ref.push({\r\n            \"ID\": frm1,\r\n            \"DocumentType\":\"CustomsImportForm\"\r\n        })\r\n    }\r\n    if (ftrd){\r\n        adoc_ref.push({\r\n            \"ID\": \"FTA\",\r\n            \"DocumentType\":\"FreeTradeAgreement\",\r\n            \"DocumentDescription\": ftrd\r\n        })\r\n    }\r\n    if (frm2){\r\n        adoc_ref.push({\r\n            \"ID\": frm2,\r\n            \"DocumentType\":\"K2\"\r\n        })\r\n    }\r\n    if (dtrm){\r\n        adoc_ref.push(    {\r\n            \"ID\": dtrm\r\n        })\r\n    }\r\n    return adoc_ref;\r\n}\r\n\r\nfunction getContactDetails(tele_num, mail){\r\n    return {\r\n        \"Telephone\": tele_num,\r\n        \"ElectronicMail\": mail\r\n    }\r\n}\r\n\r\nfunction getAmount(amnt, ccur_code){\r\n    return {\r\n        \"Value\": amnt,\r\n        \"CurrencyID\": ccur_code\r\n    }\r\n}\r\n\r\nfunction BuildJSONFormat(einv_num){\r\n    \r\n    // Updating Current Version from Parameter.\r\n    version_update = CralDB.PublishTopic(\"einv_header\", jscall.company, \"Update\", {\r\n        \"e_inv_no\": einv_num,\r\n        \"einv_version\": CralDB.QueryByComp(`select version_id from {{e_inv_parameter}}`, jscall.company)[0].version_id\r\n    }, jscall.user)\r\n    if (!version_update?.Success){\r\n        return \"Unable to Update E-Invoice Version\"\r\n    }\r\n\r\n\r\n    doc_header = CralDB.QueryByComp(\"select * from {{einv_header}} where e_inv_no='$1'\", jscall.company, einv_num.toString())\r\n    debug(einv_num)\r\n    debug(doc_header)\r\n    doc_line = CralDB.QueryByComp(\"select * from {{einv_lines}} where e_inv_no='$1' order by line\", jscall.company, doc_header[0].e_inv_no)\r\n    if (doc_header.length == 0 || doc_line.length == 0){\r\n        return \"No Record Found for given data\"\r\n    }\r\n\r\n    // Supplier Details\r\n    sup_party_id = get_PartyID(doc_header[0].sup_tin, doc_header[0].sup_reg_brn, doc_header[0].sup_reg_nric, doc_header[0].sup_reg_army, doc_header[0].sup_reg_passport, doc_header[0].sup_sst_reg, doc_header[0].sup_ttx_no, true)\r\n\r\n    // Buyer Details\r\n    buy_party_id = get_PartyID(doc_header[0].buy_tin, doc_header[0].buy_reg_brn, doc_header[0].buy_reg_nric, doc_header[0].buy_reg_army, doc_header[0].buy_reg_passport, doc_header[0].buy_sst_reg, \"\", true)\r\n\r\n    // Shipment Details\r\n    ship_party_id = get_PartyID(doc_header[0].ship_tin, doc_header[0].ship_reg_brn, doc_header[0].ship_reg_nric, doc_header[0].ship_reg_army, doc_header[0].ship_reg_passport, \"\", \"\", false)\r\n\r\n    invoice_line = []\r\n    for (let i = 0 ; i < doc_line.length ; i++){\r\n        c_clas = [\r\n            {\r\n                \"ItemClassificationCode\": doc_line[i].clas,\r\n                \"ListID\": \"CLASS\"\r\n            }\r\n        ]\r\n        if (doc_line[i].ccde != \"\"){\r\n            c_clas.push({\r\n                \"ItemClassificationCode\": doc_line[i].ccde,\r\n                \"ListID\": \"PTC\"\r\n            })\r\n        }\r\n        o_ccty = get_ccty(doc_line[i].ccty)\r\n\r\n        invoice_line.push({\r\n            \"ID\": {\r\n                // TBD\r\n                \"ID\": doc_line[i].line.toString()\r\n            },  \r\n            \"InvoicedQuantity\": {\r\n                \"Value\": doc_line[i].dqua.toString(),\r\n                \"UnitCode\": \"C62\"\r\n            },\r\n            \"LineExtensionAmount\": getAmount(doc_line[i].amti, doc_header[0].ccur),\r\n            \"AllowanceCharge\":[\r\n                {\r\n                    \"ChargeIndicator\": (doc_line[i].ldai == 0 && doc_line[i].disc == 0) ? false : true,\r\n                    \"AllowanceChargeReason\": doc_line[i].disc_reason,\r\n                    \"MultiplierFactorNumeric\": doc_line[i].disc.toString(),\r\n                    \"Amount\": getAmount(doc_line[i].ldai, doc_header[0].ccur)\r\n                },\r\n                {\r\n                    \"ChargeIndicator\": (doc_line[i].feea == 0 && doc_line[i].feer == 0) ? false : true,\r\n                    \"AllowanceChargeReason\": doc_line[i].fee_reason,\r\n                    \"MultiplierFactorNumeric\": doc_line[i].feer.toString(),\r\n                    \"Amount\": getAmount(doc_line[i].feea, doc_header[0].ccur)\r\n                }\r\n            ],\r\n            \"TaxTotal\":{\r\n                \"TaxAmount\": getAmount(doc_line[i].txai, doc_header[0].ccur),\r\n                \"TaxSubtotal\": {\r\n                    \"TaxableAmount\": getAmount(doc_line[i].stot, doc_header[0].ccur),\r\n                    \"TaxAmount\": getAmount(doc_line[i].txai, doc_header[0].ccur),\r\n                    \"TaxCategory\":{\r\n                        \"ID\": doc_line[i].cvat,\r\n                        \"Percent\": doc_line[i].pvat,\r\n                        \"TaxExemptionReason\": doc_line[i].ceno, \r\n                        \"TaxScheme\":{\r\n                            \"ID\": \"OTH\",\r\n                            \"SchemeID\": \"UN/ECE 5153\",\r\n                            \"SchemeAgencyID\": \"6\"\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            \"Item\":{\r\n                \"Description\": doc_line[i].item_desc,\r\n                \"OriginCountry\":{\r\n                    \"IdentificationCode\": {\r\n                        \"ListID\": \"\",\r\n                        \"ListAgencyID\": \"\",\r\n                        \"Value\": o_ccty\r\n                    }\r\n                },\r\n                \"CommodityClassification\": c_clas\r\n            },\r\n            \"Price\":{\r\n                \"PriceAmount\": getAmount(doc_line[i].pric, doc_header[0].ccur)\r\n            },\r\n            \"ItemPriceExtension\":getAmount(doc_line[i].stot, doc_header[0].ccur)\r\n        })\r\n    }\r\n    var [inv_dt, inv_tm] = getStringDateTime(doc_header[0].e_invdt)\r\n\r\n    // Date Conversion Added\r\n    var [bs_d, bs_t] = getStringDateTime(doc_header[0].bsdt)\r\n    var [be_d, be_t] = getStringDateTime(doc_header[0].bedt)\r\n    var [py_dt, py_tm] = getStringDateTime(doc_header[0].pydt)\r\n    var [pydt_date, pydt_time] = getStringDateTime(doc_header[0].pytm)\r\n\r\n    json_document = {\r\n        \"ID\": doc_header[0].e_inv_no,\r\n        \"IssueDate\": inv_dt, // TBD\r\n        \"IssueTime\": inv_tm, // TBD\r\n        \"InvoiceTypeCode\": {\r\n            \"ListVersionID\": doc_header[0].einv_version,\r\n            \"Value\":doc_header[0].doct\r\n        },\r\n        \"DocumentCurrencyCode\": doc_header[0].ccur,\r\n        \"TaxCurrencyCode\": doc_header[0].ccur,\r\n        \"InvoicePeriod\":{\r\n            \"StartDate\":bs_d,           // Date Conversion is changed form field to String\r\n            \"EndDate\":be_d,             // Date Conversion is changed form field to String\r\n            \"Description\":doc_header[0].fbil\r\n        },\r\n        \"BillingReference\":[\r\n            {\r\n                \"InvoiceDocumentReference\": {\r\n                    \"ID\": doc_header[0].org_e_inv_no,\r\n                    \"UUID\": doc_header[0].org_doc_uuid\r\n                }\r\n            },\r\n            {\r\n                \"AdditionalDocumentReference\":{\r\n                    \"ID\":doc_header[0].bref\r\n                }\r\n            }\r\n        ],\r\n        \"AdditionalDocumentReference\": getAdditionalDocRef(doc_header[0].frm1, doc_header[0].ftrd, doc_header[0].frm2, doc_header[0].dtrm),\r\n        \"AccountingSupplierParty\":{\r\n            \"AdditionalAccountID\": {\r\n                \"SchemeAgencyName\": \"CertEX\",\r\n                \"Value\": doc_header[0].anum\r\n            },\r\n            \"Party\":{\r\n                \"IndustryClassificationCode\": {\r\n                    \"Value\": doc_header[0].sup_msic,\r\n                    \"Name\": doc_header[0].sup_badsca\r\n                },\r\n                \"PartyIdentification\":sup_party_id,\r\n                \"PostalAddress\": getPostalAddress(doc_header[0].sup_country, doc_header[0].sup_cste, doc_header[0].sup_city, doc_header[0].sup_postal_zone, [doc_header[0].sup_adrs_line0, doc_header[0].sup_adrs_line1, doc_header[0].sup_adrs_line2]),\r\n                \"PartyLegalEntity\":{\r\n                    \"RegistrationName\": doc_header[0].sup_name\r\n                },\r\n                \"Contact\": getContactDetails(doc_header[0].sup_cont_num, doc_header[0].sup_email),\r\n            }\r\n        },\r\n        \"AccountingCustomerParty\":{\r\n            \"Party\":{\r\n                \"PartyIdentification\": buy_party_id,\r\n                \"PostalAddress\": getPostalAddress(doc_header[0].buy_country, doc_header[0].buy_cste, doc_header[0].buy_city, doc_header[0].buy_postal_zone, [doc_header[0].buy_adrs_line0, doc_header[0].buy_adrs_line1, doc_header[0].buy_adrs_line2]),\r\n                \"PartyLegalEntity\":{\r\n                    \"RegistrationName\": doc_header[0].buy_name\r\n                },\r\n                \"Contact\":getContactDetails(doc_header[0].buy_cont_num, doc_header[0].buy_email)\r\n            }\r\n        },\r\n        \"Delivery\":{\r\n            \"DeliveryParty\":{\r\n                \"PartyIdentification\": ship_party_id,\r\n                \"PostalAddress\": getPostalAddress(doc_header[0].ship_country, doc_header[0].ship_cste, doc_header[0].ship_city, doc_header[0].ship_postal_zone, [doc_header[0].ship_adrs_line0, doc_header[0].ship_adrs_line1, doc_header[0].ship_adrs_line2]),\r\n                \"PartyLegalEntity\":{\r\n                    \"RegistrationName\": doc_header[0].ship_name\r\n                }\r\n            },\r\n            \"Shipment\":{\r\n                \"ID\": \"\", // TBD\r\n                \"FreightAllowanceCharge\":{\r\n                    \"ChargeIndicator\": doc_header[0].ochg,\r\n                    \"AllowanceChargeReason\": doc_header[0].ochg_reason,\r\n                    \"Amount\": getAmount(doc_header[0].ochg_amnt, doc_header[0].ccur)\r\n                }\r\n            }\r\n        },\r\n        \"PaymentMeans\":{\r\n            \"PaymentMeansCode\": doc_header[0].paym,\r\n            \"PayeeFinancialAccount\":{\r\n                \"ID\": (doc_header[0].paym)?doc_header[0].sup_bank_acc:\"\"\r\n            }\r\n        },\r\n        \"PaymentTerms\":{\r\n            \"Note\": doc_header[0].term\r\n        },\r\n        \"PrepaidPayment\":{\r\n            \"ID\": {\r\n                \"ID\": doc_header[0].pref\r\n            },\r\n            \"PaidAmount\": getAmount(doc_header[0].pamt, doc_header[0].ccur),\r\n            \"PaidDate\": py_dt,         // Date Conversion is changed form field to String\r\n            \"PaidTime\": pydt_time // Conversion should be done as format \"12:00:00Z\" - Fixed\r\n        },\r\n        \"AllowanceCharge\":[\r\n            {\r\n                \"ChargeIndicator\": (doc_header[0].adis == 0) ? false : true,\r\n                \"AllowanceChargeReason\": doc_header[0].adis_reason,\r\n                \"Amount\": getAmount(doc_header[0].adis, doc_header[0].ccur)\r\n            },\r\n            {\r\n                \"ChargeIndicator\": (doc_header[0].afee == 0) ? false : true,\r\n                \"AllowanceChargeReason\": doc_header[0].afee_reason,\r\n                \"Amount\": getAmount(doc_header[0].afee, doc_header[0].ccur)\r\n            }\r\n        ], \r\n        \"TaxTotal\":{\r\n            \"TaxAmount\": getAmount(doc_header[0].tott, doc_header[0].ccur),\r\n            \"TaxSubtotal\":{\r\n                \"TaxableAmount\": getAmount(doc_header[0].ttax, doc_header[0].ccur),\r\n                \"TaxAmount\": getAmount(doc_header[0].ttat, doc_header[0].ccur),\r\n                \"TaxCategory\":{\r\n                    \"ID\": doc_header[0].cvat,\r\n                    \"TaxScheme\":{\r\n                        \"ID\": \"OTH\",\r\n                        \"SchemeID\": \"UN/ECE 5153\",\r\n                        \"SchemeAgencyID\": \"6\"\r\n                    }\r\n                }\r\n            }\r\n        },\r\n        \"LegalMonetaryTotal\":{\r\n            \"LineExtensionAmount\":      getAmount(doc_header[0].tnat, doc_header[0].ccur),  \r\n            \"TaxExclusiveAmount\":       getAmount(doc_header[0].tote, doc_header[0].ccur),   \r\n            \"TaxInclusiveAmount\":       getAmount(doc_header[0].toti, doc_header[0].ccur),\r\n            \"AllowanceTotalAmount\":     getAmount(doc_header[0].tdis, doc_header[0].ccur),\r\n            \"ChargeTotalAmount\":        getAmount(doc_header[0].tfee, doc_header[0].ccur),\r\n            \"PayableRoundingAmount\":    getAmount(doc_header[0].ramt, doc_header[0].ccur),\r\n            \"PayableAmount\":            getAmount(doc_header[0].tpat, doc_header[0].ccur)\r\n        },\r\n        \"InvoiceLine\": invoice_line\r\n    }\r\n    if (doc_header[0].ccur != \"MYR\"){\r\n        json_document[\"TaxExchangeRate\"] = {\r\n            \"CalculationRate\": doc_header[0].rate,\r\n            \"SourceCurrencyCode\": doc_header[0].ccur,\r\n            \"TargetCurrencyCode\": \"MYR\"\r\n        }\r\n    }\r\n    return {\r\n        \"document\": json_document, \r\n        \"InvoiceCodeNumber\": doc_header[0].e_inv_no\r\n    }\r\n}\r\nexports.BuildJSONFormat = BuildJSONFormat\r\n"},{"Bizobj":{"ObjectName":"docUpload","Description":"Document Upload","external":true,"input_struct":"","out_success":"","out_fail":""},"Script":"//**** Business Object docUpload Created by malai on 24-Jul-2024 22:00:56 ****//\r\n\r\nvar einvois = require(\"./scripts/Business_Objects/createEinvoice\")\r\nvar consoCheck = require(\"./scripts/Business_Objects/conso_checking\")\r\nfunction docUploadExcel(){\r\n    payload_obj = {}\r\n    inv_numbers = []\r\n    comp_miss_match = 0\r\n    message = \"\"\r\n    rejectedRecords = []\r\n    // submittedRecords = []\r\n    file_ret = {}\r\n\r\n    entity_ds = CralDB.QueryByComp(`select skip_master,skip_duplicate_files from {{entity_data_set}} where sup_company=${jscall.company} and data_set='${jscall.input.DataSet}'`, jscall.company)\r\n    if (entity_ds.length == 0){\r\n        message = `Entity Data set is not maintained for ${jscall.company} - ${jscall.input.DataSet}`\r\n        return {\r\n            \"AcceptedInvoices\": inv_numbers, \r\n            \"RejectedInvoices\": rejectedRecords,\r\n            \"Message\": message,\r\n            \"SubmissionResult\": {}\r\n        }\r\n    } else {\r\n        if (entity_ds[0].skip_duplicate_files &&\r\n            CralDB.QueryByComp(`select file_name from {{uploaded_file_details}} where file_name='${jscall.input.FileName}'`, jscall.company)?.length){\r\n            \r\n            return {\r\n                \"AcceptedInvoices\": inv_numbers, \r\n                \"RejectedInvoices\": rejectedRecords,\r\n                \"Message\": \"Filename already used for Upload.\",\r\n                \"SubmissionResult\": {}\r\n            }\r\n        }\r\n    }\r\n    skip_master = entity_ds[0].skip_master\r\n    \r\n    if (skip_master){\r\n        file_details = {\r\n            \"file_name\": jscall.input.FileName??\"\",\r\n            \"upload_user\": jscall.user,\r\n            \"upload_time\": einvois.getCurrentDateTimeUTC()\r\n        }\r\n        file_ret = CralDB.PublishTopic(\"uploaded_file_details\", jscall.company, \"Insert\", file_details, jscall.user)\r\n        if (!file_ret?.Success){\r\n            // message = \"Unable to Upload Excel.\"\r\n            return {\r\n                \"AcceptedInvoices\": inv_numbers, \r\n                \"RejectedInvoices\": rejectedRecords,\r\n                \"Message\": message,\r\n                \"SubmissionResult\": {}\r\n            }\r\n        }\r\n    }\r\n    payload_data = CralDB.QueryByComp(`select excl_einv_field,excl_interim_field,dval from {{fld_parameter}} where excl=true`, jscall.company)\r\n\r\n    // Need to add if Master Data should capture for Supplier Data.\r\n    // supplier_data = CralDB.QueryByComp(`select * from {{supplier_companies}} where sup_company=${jscall.company}`, jscall.company)\r\n    // supplier_adrs = CralDB.QueryByComp(`select * from {{address_master}} where data_set='${jscall.input?.DataSet}' and adrs_code='${supplier_data[0]?.sup_adrs}'`, jscall.company)\r\n    \r\n    \r\n    if (Array.isArray(jscall.input.Records) && (jscall.input.Records.length)){\r\n    //    na_fields = [\r\n    //        \"buy_sst_reg\", \"sup_sst_reg\", \r\n    //        \"sup_reg_brn\", \"buy_reg_brn\",\r\n    //     //    \"sup_badsca\", \r\n    //        \"org_e_inv_no\", \"org_doc_uuid\"\r\n    //     ]\r\n        for (i =0; i < jscall.input.Records.length; i++){\r\n             let st = CralUtil.Date.Now()\r\n            payload_obj = {}\r\n            payload_data.forEach(rec => {\r\n                // if (jscall.input.Records[i][rec.excl_einv_field] && jscall.input.Records[i][rec.excl_einv_field] != \"NA\" ){\r\n                if (jscall.input.Records[i][rec.excl_einv_field] ){\r\n                    // && (jscall.input.Records[i][rec.excl_einv_field] != \"NA\"    // NA repalce to empty issue fixed 03/12/2024\r\n                    //     || (jscall.input.Records[i][rec.excl_einv_field] == \"NA\" \r\n                    //         && na_fields.includes(rec.excl_interim_field))) ){\r\n                    payload_obj[rec.excl_interim_field] = typeof jscall.input.Records[i][rec.excl_einv_field] == \"string\" ? jscall.input.Records[i][rec.excl_einv_field].trim() : jscall.input.Records[i][rec.excl_einv_field];\r\n                } else {\r\n                    if (rec.dval != \"null\"){\r\n                        payload_obj[rec.excl_interim_field] = rec.dval\r\n                    }\r\n                }\r\n                // payload_data[rec.excl_interim_field] = jscall.input.Records[i][rec.excl_einv_field]\r\n            })\r\n            // println(\"Mapping Completed\",CralUtil.Date.Sub(st, CralUtil.Date.Now()))\r\n            println(\"Mapping Completed\", st, CralUtil.Date.Now())\r\n            // println(payload_obj)\r\n            if (payload_obj[\"pytm\"]) {\r\n                payload_obj[\"pytm\"] = payload_obj[\"pydt\"] ? `${payload_obj[\"pydt\"]} ${payload_obj[\"pytm\"]}` : undefined\r\n            }\r\n            if (file_ret?.Message?.upload_id){\r\n                payload_obj[\"upload_id\"] = file_ret.Message.upload_id\r\n            }\r\n            if (payload_obj[\"idoc\"] == null){\r\n                payload_obj[\"idoc\"] = 0\r\n            }\r\n            payload_obj[\"data_set\"] = jscall.input.DataSet\r\n            payload_obj[\"line_cnt\"] = 0\r\n            payload_obj[\"fld_category\"] = \"\"\r\n            payload_obj[\"temp_code\"] = jscall.input.Template\r\n            payload_obj[\"mandatory\"] = []\r\n            payload_obj[\"unmapped\"] = []\r\n            payload_obj[\"sctg\"] = get_sctg(payload_obj[\"sctg\"])\r\n            //  println(\"Before Insert\",CralUtil.Date.Sub(st, CralUtil.Date.Now()))\r\n             println(\"Before Insert\", st, CralUtil.Date.Now())\r\n            if (payload_obj[\"comp\"] == jscall.company){\r\n                inv_creation = CralDB.PublishTopic(\"inv_interim_excl\", jscall.company, \"Upsert\", payload_obj, jscall.user)\r\n                if (inv_creation?.Success == true){\r\n                    CralUtil.LogInfo(\"Successfully Invoice Inserted\", \"ExcelUpload\", inv_creation)\r\n                    if (!inv_numbers.includes(inv_creation?.Message?.inv_no)) {\r\n                        inv_numbers.push(inv_creation?.Message?.inv_no);\r\n                    }\r\n                } else {\r\n                    // if (!submittedRecords.includes(payload_obj[\"inv_no\"]) && inv_creation?.Message == \"Invoice Already Submitted\") {\r\n                    //     submittedRecords.push(payload_obj[\"inv_no\"]);\r\n                    // } else {\r\n                        rejectedRecords.push(inv_creation)\r\n                    // }\r\n                    CralUtil.LogInfo(\"Unable to Insert to Interim Table\", \"ExcelUpload\", inv_creation)\r\n                }\r\n            } else {\r\n                comp_miss_match += 1\r\n            }\r\n             println(\"Insert Completed\", st, CralUtil.Date.Now())\r\n        }\r\n    }\r\n    if (comp_miss_match != 0){\r\n        if (comp_miss_match == jscall.input.Records.length){\r\n            message = \"Excel Upload Failed, due to Company miss match.\"\r\n        } else {\r\n            message = \"Company Miss match found in few records.\"\r\n        }\r\n    }\r\n    // if (submittedRecords.length){\r\n    //     message += ` ${submittedRecords.length} Invoices has been Already Submitted.`\r\n    // }\r\n\r\n\r\n\r\n    // Invoice Submission to another API\r\n    // inv_results = excelInvoiceCreation(inv_numbers, skip_master)\r\n\r\n    return {\r\n        \"AcceptedInvoices\": inv_numbers, \r\n        \"RejectedInvoices\": rejectedRecords,\r\n        \"Message\": message.trim(),\r\n        // \"SubmissionResult\": inv_results\r\n        \"SubmissionResult\": [],\r\n        \"SkipMaster\": skip_master\r\n    }\r\n}\r\n\r\nfunction checkAndCreateInvoice(){\r\n    return excelInvoiceCreation(jscall.input.inv_nums, jscall.input.skipMaster)\r\n}\r\n\r\nfunction excelInvoiceCreation(Invois, isMasterUpdate){\r\n    let excl_inv = []\r\n    let error = []\r\n    let conso_inv = []\r\n    if (Array.isArray(Invois) && Invois.length > 0){\r\n        for (i2 = 0; i2 < Invois.length; i2++){\r\n            if (CheckForConso(Invois[i2], isMasterUpdate)){\r\n                if (CreateConsoInvoice(Invois[i2], isMasterUpdate)){\r\n                    conso_inv.push(Invois[i2])\r\n                    CralUtil.LogInfo(\"ExcelUpload\", \"DeletingInvoice(Consolidation)\", Invois[i2])\r\n                    del_ret = CralDB.QueryByComp(`DELETE FROM {{inv_interim_excl}} WHERE inv_no='${Invois[i2]}'`, jscall.company)\r\n                }\r\n            } else {\r\n                if (CheckInvois(Invois[i2], isMasterUpdate) == true){\r\n                    if (CreateEinv(Invois[i2], isMasterUpdate) == true){\r\n                        excl_inv.push(Invois[i2])\r\n                        CralUtil.LogInfo(\"ExcelUpload\", \"DeletingInvoice\", Invois[i2])\r\n                        del_ret = CralDB.QueryByComp(`DELETE FROM {{inv_interim_excl}} WHERE inv_no='${Invois[i2]}'`, jscall.company)\r\n                    } else {\r\n                        error.push(`Error While Creation: ${Invois[i2]}`)\r\n                    }\r\n                } else {\r\n                    error.push(`Error While Validating: ${Invois[i2]}`)\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return {\r\n        \"Input\": Invois,\r\n        \"CreatedInvoices\": excl_inv,\r\n        \"ConsolidationInvoices\": conso_inv,\r\n        \"Error\": error\r\n    }\r\n}\r\n\r\nfunction CheckForConso(inv_number, isOriginalValue){\r\n    if (CralDB.QueryByComp(\"select consolidation from {{einv_implementation}}\", jscall.company)[0]?.consolidation){\r\n        let check_data = CralDB.QueryByComp(`SELECT * from {{inv_interim_excl}} where inv_no='${inv_number}' limit 1`, jscall.company)\r\n        let docType = isOriginalValue?check_data[0].doct:einvois.get_doc_type(check_data[0].doct)\r\n        if (docType==='01'){\r\n            if (consoCheck.checkConsoInvoice(check_data[0])){\r\n                return true\r\n            }\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\nfunction CreateConsoInvoice(inv_number, isOriginalValue){\r\n    println(\"Creating Consolidation Invoice\")\r\n    create_inv_data = CralDB.QueryByComp(`select * from {{inv_interim_excl}} where inv_no='${inv_number}' ORDER BY line`, jscall.company)\r\n    header_data = {\r\n        \"comp\": create_inv_data[0].comp,\r\n        \"tran\": create_inv_data[0].tran,\r\n        \"idoc\": create_inv_data[0].idoc,\r\n        \"doct\": isOriginalValue ? create_inv_data[0].doct : einvois.get_doc_type(create_inv_data[0].doct),\r\n        \"itbp\": create_inv_data[0].inv_bp,\r\n        \"itoa\": create_inv_data[0].buy_adrs,\r\n        \"ccur\": isOriginalValue ? create_inv_data[0].ccur : einvois.get_ccur(create_inv_data[0].ccur, create_inv_data[0].data_set),\r\n        \"rate\": create_inv_data[0].rate,\r\n        \"paym\": isOriginalValue ? create_inv_data[0].paym : einvois.get_paym(create_inv_data[0].paym, create_inv_data[0].data_set),\r\n        \"term\": create_inv_data[0].term,\r\n        \"tote\": create_inv_data[0].tote,\r\n        \"toti\": create_inv_data[0].toti,\r\n        \"tott\": create_inv_data[0].tott,\r\n        \"cvat\": isOriginalValue ? create_inv_data[0].cvat : einvois.get_cvat(create_inv_data[0].cvat, create_inv_data[0].data_set),\r\n        \"stbp\": create_inv_data[0].ship_bp,\r\n        \"sadr\": create_inv_data[0].ship_adrs,\r\n        \"dtrm\": create_inv_data[0].dtrm,\r\n        \"styp\": create_inv_data[0].sctg,\r\n        \"cein\": false,\r\n        \"disb\": false,\r\n        \"dshp\": false,\r\n        \"sinc\": false,\r\n        \"fbil\": create_inv_data[0].fbil,\r\n        \"pamt\": create_inv_data[0].pamt,\r\n        \"pref\": create_inv_data[0].pref,\r\n        \"bref\": create_inv_data[0].bref,\r\n        \"tpat\": create_inv_data[0].tpat,\r\n        \"tnat\": create_inv_data[0].tnat,\r\n        \"tdis\": create_inv_data[0].tdis,\r\n        \"tfee\": create_inv_data[0].tfee,\r\n        \"ramt\": create_inv_data[0].ramt,\r\n        \"ttax\": create_inv_data[0].ttax,\r\n        \"ttat\": create_inv_data[0].ttat,\r\n        \"adis\": create_inv_data[0].adis,\r\n        \"afee\": create_inv_data[0].afee,\r\n        \"frm1\": create_inv_data[0].frm1,\r\n        \"ftrd\": create_inv_data[0].ftrd,\r\n        \"anum\": create_inv_data[0].anum,\r\n        \"frm2\": create_inv_data[0].frm2,\r\n        \"ochg\": create_inv_data[0].ochg,\r\n        \"ochg_amnt\": create_inv_data[0].ochg_amnt,\r\n        \"ochg_reason\": create_inv_data[0].ochg_reason,\r\n        \"esta\": \"10\",\r\n        \"submission_uid\": \"\",\r\n        \"err_msg\": \"\",\r\n        \"line_cnt\": 0,\r\n        \"trgt\": \"\",\r\n        \"val_err\": \"\",\r\n        \"cncl\": false,\r\n        \"det_tax\": \"\",\r\n        \"amnt_ex\": 0,\r\n        \"e_invdt\": \"\",\r\n        \"src_type\": isOriginalValue ? create_inv_data[0].src_type : einvois.get_src_inv_type(create_inv_data[0].src_type),\r\n        \"adis_reason\": \"\",\r\n        \"afee_reason\": \"\",\r\n        \"par_cncl\": false,\r\n        \"s_line_cnt\": create_inv_data[0].line_cnt,\r\n        \"einv_stat\": \"10\",\r\n        \"conso_inv\": \"\",\r\n        \"inv_date\": einvois.getCurrentDateTimeUTC(),\r\n        \"data_set\": create_inv_data[0].data_set,\r\n        \"inv_no\": create_inv_data[0].inv_no\r\n    }\r\n    headerResult = CralDB.PublishTopic(\"conso_header\", jscall.company, \"Upsert\", header_data, jscall.user)\r\n    if (headerResult?.Success){\r\n        err_line_cnt = 0\r\n        create_inv_data.forEach(lines => {\r\n            line_data = {\r\n                \"comp\": lines.comp,\r\n                \"tran\": lines.tran,\r\n                \"idoc\": lines.idoc,\r\n                \"line\": lines.line,\r\n                \"item\": lines.item,\r\n                \"item_desc\": lines.item_desc,\r\n                \"pric\": lines.pric,\r\n                \"cvat\": isOriginalValue ? lines.l_cvat : einvois.get_cvat(l_cvat, lines.data_set),\r\n                \"pvat\": lines.pvat,\r\n                \"txai\": lines.txai,\r\n                \"ceno\": lines.tex_cer_no,\r\n                \"amtt\": lines.amtt,\r\n                \"stot\": lines.stot,\r\n                \"amti\": lines.amti,\r\n                \"dqua\": lines.dqua,\r\n                \"cuni\": isOriginalValue ? lines.cuni : einvois.get_cuni(lines.cuni, lines.data_set),\r\n                \"disc\": lines.disc,\r\n                \"ldai\": lines.ldai,\r\n                \"ccde\": lines.ccde,\r\n                \"ccty\": isOriginalValue ? lines.ccty : einvois.get_ccty(lines.ccty, lines.data_set),\r\n                \"clas\": isOriginalValue ? lines.clas : einvois.get_clas(lines.clas, lines.data_set),\r\n                \"feer\": lines.feer,\r\n                \"feea\": lines.feea,\r\n                \"err_msg\": \"\",\r\n                \"lsta\":\"10\",\r\n                \"disc_reason\": \"\",\r\n                \"fee_reason\": \"\"\r\n            }\r\n            lineResult = CralDB.PublishTopic(\"conso_line\", jscall.company, \"Upsert\", line_data, jscall.user)\r\n            if (!lineResult?.Success){\r\n                CralUtil.LogInfo(\"ErrorInsertingLine\", \"ExcelUploadConso\", {\"Payload\": line_data, \"Result\": lineResult});\r\n                err_line_cnt += 1;\r\n            }\r\n        })\r\n        if (!err_line_cnt){\r\n            return true\r\n        }\r\n    } else {\r\n        CralUtil.LogInfo(\"ErrorCreatingConso\", \"ExcelUpload\", {\"Payload\": header_data, \"Result\": headerResult})\r\n        return false\r\n    }\r\n}\r\n\r\nfunction CreateEinv(inv_num, isOriginalValue){\r\n    println(\"Creating Excel Invoice\")\r\n    let header_payload = {};\r\n    err_cnt = 0\r\n    create_inv = CralDB.QueryByComp(\"select * from {{inv_interim_excl}} where inv_no='$1' ORDER BY line\", jscall.company, inv_num)\r\n    // println(\"CreateINV\" + JSON.stringify(create_inv))\r\n    inv_fields = CralDB.QueryByComp(`select topic,fld_name,excl,excl_interim_field,dval from {{fld_parameter}}`, jscall.company)\r\n    if (create_inv?.length != 0){\r\n        inv_fields.forEach(inv_field => {\r\n            if (inv_field.topic == \"einv_header\"){\r\n                if (inv_field.excl == true || inv_field.excl_interim_field == \"inv_no\"){\r\n                    header_payload[inv_field.fld_name] = create_inv[0][inv_field.excl_interim_field]\r\n                } else {\r\n                    if (inv_field.dval != \"null\"){\r\n                        header_payload[inv_field.fld_name] = inv_field.dval\r\n                    }\r\n                }\r\n            }\r\n        })\r\n        // println(header_payload)\r\n        \r\n        // Map Master Data\r\n        if (!isOriginalValue) {\r\n            header_payload[\"doct\"] = einvois.get_doc_type(header_payload[\"doct\"])\r\n            header_payload[\"ccur\"] = einvois.get_ccur(header_payload[\"ccur\"], create_inv[0].data_set)\r\n            header_payload[\"paym\"] = einvois.get_paym(header_payload[\"paym\"], create_inv[0].data_set)\r\n            header_payload[\"cvat\"] = einvois.get_cvat(header_payload[\"cvat\"], create_inv[0].data_set)\r\n            // header_payload[\"sctg\"] = get_sctg(header_payload[\"sctg\"])\r\n            header_payload[\"sup_cste\"] = einvois.get_state(header_payload[\"sup_country\"], header_payload[\"sup_cste\"], create_inv[0].data_set)\r\n            header_payload[\"buy_cste\"] = einvois.get_state(header_payload[\"buy_country\"], header_payload[\"buy_cste\"], create_inv[0].data_set)\r\n            header_payload[\"ship_cste\"] = einvois.get_state(header_payload[\"ship_country\"], header_payload[\"ship_cste\"], create_inv[0].data_set)\r\n            header_payload[\"sup_country\"] = einvois.get_ccty(header_payload[\"sup_country\"], create_inv[0].data_set)\r\n            header_payload[\"buy_country\"] = einvois.get_ccty(header_payload[\"buy_country\"], create_inv[0].data_set)\r\n            header_payload[\"ship_country\"] = einvois.get_ccty(header_payload[\"ship_country\"], create_inv[0].data_set)\r\n        }\r\n\r\n        // Added for Tack File Invoice from Batch Upload\r\n        if (header_payload[\"sctg\"] == \"20\" || header_payload[\"sctg\"] == \"30\"){\r\n            header_payload[\"einv_stat\"] = \"10\"\r\n        }\r\n        \r\n        // Default Values\r\n        header_payload[\"dataset\"] = create_inv[0].data_set\r\n        header_payload[\"sup_code\"] = create_inv[0].comp\r\n        isInvAvil = (CralDB.QueryByComp(`select e_inv_no from {{einv_header}} where e_inv_no='${header_payload[\"e_inv_no\"]}' and einv_stat='60'`, jscall.company).length != 0)\r\n        if (isInvAvil){\r\n            einv_mode = \"Update\"\r\n            delete header_payload[\"line_cnt\"]\r\n            CralDB.QueryByComp(`DELETE FROM {{einv_validation}} where einv_code='${header_payload[\"e_inv_no\"]}'`, jscall.company)\r\n        } else {\r\n            einv_mode = \"Insert\"\r\n        }\r\n        header_result = CralDB.PublishTopic(\"einv_header\", create_inv[0].comp, einv_mode, header_payload, jscall.user)\r\n        if (header_result?.Success == true){\r\n            line_results = []\r\n            for (j = 0; j<create_inv.length; j++){\r\n                line_payload = {}\r\n                inv_fields.forEach(inv_field => {\r\n                    if (inv_field.topic == \"einv_lines\"){\r\n                        if (inv_field.excl == true){\r\n                            line_payload[inv_field.fld_name] = create_inv[j][inv_field.excl_interim_field]\r\n                        } else {\r\n                            if (inv_field.dval != \"null\"){\r\n                                line_payload[inv_field.fld_name] = inv_field.dval\r\n                            }\r\n                        }\r\n                    }\r\n                })\r\n                // Map Master Data\r\n                if (!isOriginalValue){\r\n                    line_payload[\"cvat\"] = einvois.get_cvat(line_payload[\"cvat\"], create_inv[j].data_set)\r\n                    line_payload[\"clas\"] = einvois.get_clas(line_payload[\"clas\"], create_inv[j].data_set)\r\n                    line_payload[\"cuni\"] = einvois.get_cuni(line_payload[\"cuni\"], create_inv[j].data_set)\r\n                }\r\n\r\n                line_payload[\"e_inv_no\"] = header_result.Message.e_inv_no\r\n                line_result = CralDB.PublishTopic(\"einv_lines\", create_inv[0].comp, einv_mode, line_payload, jscall.user)\r\n                if (line_result?.Success != true){\r\n                    err_cnt += 1\r\n                }\r\n                line_results.push(line_result)\r\n            }\r\n            if (err_cnt == 0){\r\n                if (header_result.Message.sctg == \"20\" || header_result.Message.sctg == \"30\"){\r\n                    CralUtil.LogInfo(\"InvoiceUnderForFiling\", \"ExcelInvoice\", {\"inv\": header_result.Message.e_inv_no, \"Category\": CralUtil.GetListDesc(\"sales_catg\", header_result.Message.sctg)})\r\n                    return true\r\n                }\r\n\r\n                // Commented for Batch Upload 17.4.25\r\n                // inv_submission = einvois.submitEinvoiceToLHDN(header_result.Message.e_inv_no)\r\n                // CralUtil.LogInfo(\"InvoiceSubmission\", header_result.Message.e_inv_no, inv_submission)\r\n                return true\r\n            } else {\r\n                CralUtil.LogInfo(\"Excel Upload\", \"einv_lines\", line_results)\r\n            }\r\n        } else {\r\n            CralUtil.LogInfo(\"Excel Upload\", \"einv_header\", [create_inv, isInvAvil, header_result, header_payload])\r\n        }\r\n    }\r\n    return false\r\n}\r\n\r\nfunction get_sctg(src_sctg){\r\n    switch(src_sctg.toUpperCase()){\r\n        case \"LOCAL\":\r\n            sctg = \"10\"\r\n            break\r\n        case \"EXPORT\":\r\n            sctg = \"20\"\r\n            break\r\n        case \"IMPORT\":\r\n            sctg = \"30\"\r\n            break\r\n        default:\r\n            sctg = src_sctg == \"10\" || src_sctg == \"20\" || src_sctg == \"30\" ? src_sctg : \"\"\r\n            break\r\n    }\r\n    return sctg\r\n}\r\n\r\nfunction CheckInvois(inv_number, check_master){\r\n    check_inv_result = []\r\n    map_check = []\r\n    err_lines_count = 0\r\n    // update_payload = {}\r\n    line_check = false\r\n    check_inv = CralDB.QueryByComp(\"select * from {{inv_interim_excl}} where inv_no='$1' ORDER BY line\", jscall.company, inv_number)\r\n    for(i1 = 0; i1 < check_inv.length; i1++){\r\n        update_payload = {}\r\n        if (!check_master){\r\n            map_check = mapCheck(check_inv[i1])\r\n        }\r\n        core_fields = core_fields_valid(check_inv[i1])\r\n\r\n        update_payload[\"inv_no\"] = check_inv[i1].inv_no\r\n        update_payload[\"line\"] = check_inv[i1].line\r\n        \r\n        if (core_fields?.length != 0){\r\n            update_payload[\"fld_category\"] = \"10\"\r\n            update_payload[\"mandatory\"] = core_fields\r\n            update_payload[\"err_msg\"] = getSupplierErrorMessage(core_fields)\r\n            debug(update_payload)\r\n        }\r\n        if (map_check?.length != 0){\r\n            update_payload[\"fld_category\"] = \"100\"\r\n            update_payload[\"unmapped\"] = map_check\r\n            debug(update_payload)\r\n        }\r\n\r\n        if (!check_master){ // Check the Document Type only when Skip Master is Enabled.\r\n            if (!(CralDB.QueryDSByComp(\"getref\", jscall.company, \"code\", \"einv_doc_types\", \"code\", check_inv[i1].doct)).length){\r\n                update_payload[\"err_msg\"] = update_payload[\"err_msg\"] ? update_payload[\"err_msg\"] + \" Invalid Invoice Type.\" : \"Invalid Invoice Type.\"\r\n            }\r\n        }\r\n\r\n        // To check Other Chagres Details. (If Other Charges is true then Other Charges amount and Reason is mandatory.)\r\n        if (check_inv[i1].ochg){\r\n            if (!check_inv[i1].ochg_amnt){\r\n                CralUtil.LogInfo(\"ExcelUploadError\", inv_number, [check_inv[i1].ochg ,\"Other Charges Amount is Mandatory\"], update_payload[\"err_msg\"])\r\n                update_payload[\"err_msg\"] = update_payload[\"err_msg\"] ? update_payload[\"err_msg\"] + \" Other Charges Amount is Mandatory.\" : \"Other Charges Amount is Mandatory.\"\r\n            }\r\n            if (!check_inv[i1].ochg_reason){\r\n                CralUtil.LogInfo(\"ExcelUploadError\", inv_number, [check_inv[i1].ochg ,\"Other Charges Reason is Mandatory\"], update_payload[\"err_msg\"])\r\n                update_payload[\"err_msg\"] = update_payload[\"err_msg\"] ? update_payload[\"err_msg\"] + \" Other Charges Reason is Mandatory.\" : \"Other Charges Reason is Mandatory.\"\r\n            }\r\n        }\r\n\r\n        debug(\"final\", update_payload)\r\n        // debug(CralDB.PublishTopic(\"inv_interim_excl\", jscall.company, \"Update\", update_payload, jscall.user))\r\n        check_inv_result.push(CralDB.PublishTopic(\"inv_interim_excl\", jscall.company, \"Update\", update_payload, jscall.user))\r\n        if (core_fields?.length != 0 || map_check?.length != 0 || update_payload[\"err_msg\"]){\r\n            CralUtil.LogInfo(inv_number, \"Error in Line\", [core_fields, map_check, update_payload[\"err_msg\"]])\r\n            err_lines_count += 1\r\n        }\r\n    }\r\n    debug(check_inv.length)\r\n    // println(check_inv[0].s_line_cnt)\r\n    if (check_inv.length == check_inv[0].s_line_cnt){\r\n        if (err_lines_count == 0){\r\n            return true\r\n        } else {\r\n            // CralDB.QueryByComp(`UPDATE {{inv_interim_excl}} SET err_msg='${update_payload[\"err_msg\"] ? update_payload[\"err_msg\"] : \"\"} No. of Lines with error: ${err_lines_count}' where inv_no='${inv_number}'`, jscall.company)\r\n            CralDB.QueryByComp(`UPDATE {{inv_interim_excl}} SET err_msg = CONCAT(err_msg, ' No. of Lines with error: ', ${err_lines_count}) WHERE inv_no = '${inv_number}'`, jscall.company)\r\n            CralUtil.LogInfo(\"ErrorInLineLevel\", \"ExcelUpload\", `No. of Lines with error: ${err_lines_count}`)\r\n            return false\r\n        }\r\n    } else {\r\n        // CralDB.QueryByComp(`UPDATE {{inv_interim_excl}} SET err_msg='${update_payload[\"err_msg\"] ? update_payload[\"err_msg\"] : \"\"} Line Count Miss Match. Source Line Count ${check_inv[0].s_line_cnt}. No. of Lines Available ${check_inv.length}' where inv_no='${inv_number}'`, jscall.company)\r\n        CralDB.QueryByComp(`UPDATE {{inv_interim_excl}} SET err_msg = CONCAT(err_msg, ' Line Count Miss Match. Source Line Count ', ${check_inv[0].s_line_cnt}, '. No. of Lines Available ', ${check_inv.length}) WHERE inv_no = '${inv_number}'`, jscall.company)\r\n        CralUtil.LogInfo(\"LineCountMissMatch\", \"ExcelUpload\", `Line Count Miss Match. Source Line Count ${check_inv[0].s_line_cnt}. No. of Lines Available ${check_inv.length}`)\r\n        return false\r\n    }\r\n}\r\n\r\n// function checkCodeField(invoice_data){\r\n//     codeValidation = []\r\n//     if (invoice_data.doct){\r\n//         if (!(CralDB.QueryDSByComp(\"getref\", jscall.company, \"code\", \"einv_doc_types\", \"code\", invoice_data.doct)).length){\r\n//             codeValidation.push(\"doct\")\r\n//         }\r\n//     }\r\n//     return codeValidation\r\n// }\r\n\r\nfunction getSupplierErrorMessage(fields){\r\n    ret_message = \"\"\r\n    fields.forEach(field => {\r\n        if (field.includes(\"sup\")){\r\n            ret_message += `${CralDB.QueryByComp(`select excl_einv_field from {{fld_parameter}} where excl_interim_field='${field}'`, jscall.company)[0].excl_einv_field} is Mandatory. `\r\n        }\r\n    })\r\n    return ret_message\r\n}\r\nfunction mapCheck(invois){\r\n    unmap = []\r\n    if (einvois.get_cvat(invois.cvat, invois.data_set) == \"\"){\r\n        unmap.push(\"cvat\")\r\n    }\r\n    if (einvois.get_ccur(invois.ccur, invois.data_set) == \"\"){\r\n        unmap.push(\"ccur\")\r\n    }\r\n    if (einvois.get_clas(invois.clas, invois.data_set) == \"\"){\r\n        unmap.push(\"clas\")\r\n    }\r\n    if (einvois.get_doc_type(invois.doct) == \"\"){\r\n        unmap.push(\"doct\")\r\n    }\r\n    if (einvois.get_ccty(invois.sup_country, invois.data_set) == \"\"){\r\n        unmap.push(\"sup_country\")\r\n    }\r\n    if (einvois.get_ccty(invois.buy_country, invois.data_set) == \"\"){\r\n        unmap.push(\"buy_country\")\r\n    }\r\n    // if (invois.ship_country){\r\n    //     if (einvois.get_ccty(invois.ship_country) == \"\"){\r\n    //         unmap.push(\"ship_country\")\r\n    //     }\r\n    // }\r\n    if (einvois.get_state(invois.sup_country, invois.sup_cste, invois.data_set) == \"\"){\r\n        unmap.push(\"sup_cste\")\r\n    }\r\n    if (einvois.get_state(invois.buy_country, invois.buy_cste, invois.data_set) == \"\"){\r\n        unmap.push(\"buy_cste\")\r\n    }\r\n    // if (invois.ship_cste){\r\n    //     if (einvois.get_state(invois.ship_country, invois.ship_cste) == \"\"){\r\n    //         unmap.push(\"ship_cste\")\r\n    //     }\r\n    // }\r\n    return unmap\r\n}\r\n\r\nfunction core_fields_valid(invois){\r\n    core_flds = []\r\n    // Invoice Data\r\n    if (invois.doct == \"\"){\r\n        core_flds.push(\"dcot\")\r\n    }\r\n    if (invois.ccur == \"\"){\r\n        core_flds.push(\"ccur\")\r\n    }\r\n\r\n    // Not Mandatory for FOC Invoice\r\n    // if (invois.tote == 0){\r\n    //     core_flds.push(\"tote\")\r\n    // }\r\n    // if (invois.toti == 0){\r\n    //     core_flds.push(\"toti\")\r\n    // }\r\n    // if (invois.tpat == 0){\r\n    //     core_flds.push(\"tpat\")\r\n    // }\r\n    \r\n    if (invois?.cvat == \"\"){\r\n        core_flds.push(\"cvat\")\r\n    } //else {\r\n    //     // Total Tax amount per tax type\r\n    //     if (doc_header[0]?.tott == 0){\r\n    //         if (doc_header[0]?.cvat != \"06\" && doc_header[0]?.cvat != \"E\"){\r\n    //         }\r\n    //     }\r\n    // }\r\n\r\n    // Invoice Line\r\n    if (invois.clas == \"\"){\r\n        core_flds.push(\"clas\")\r\n    }\r\n    if (invois.item_desc == \"\"){\r\n        core_flds.push(\"item_desc\")\r\n    }\r\n\r\n    // Not Mandatory for Free of Cost Item or Service\r\n    // if (invois.pric == 0){\r\n    //     core_flds.push(\"pric\")\r\n    // }\r\n    // if (invois.stot == 0){\r\n    //     core_flds.push(\"stot\")\r\n    // }\r\n    // if (invois.amti == 0){\r\n    //     core_flds.push(\"amti\")\r\n    // }\r\n    \r\n    \r\n    if (invois?.l_cvat == \"\"){\r\n        core_flds.push(\"l_cvat\")\r\n        // tax Type\r\n    }\r\n    // if (doc_line[i].cvat != \"E\" && doc_line[i].cvat != \"\" && doc_line[i].txai == 0){\r\n    //     //Tax Amount\r\n    // }\r\n\r\n    // Supplier Data\r\n    if (invois.sup_name == \"\"){\r\n        core_flds.push(\"sup_name\")\r\n    }\r\n    if (invois.sup_tin == \"\"){\r\n        core_flds.push(\"sup_tin\")\r\n    }\r\n    if (invois.sup_reg_nric == \"\" && invois.sup_reg_brn == \"\" && invois.sup_reg_passport == \"\" && invois.sup_reg_army == \"\"){\r\n        core_flds.push(\"sup_reg_nric\", \"sup_reg_brn\", \"sup_reg_passport\", \"sup_reg_army\")\r\n    }\r\n    if (invois.sup_msic == \"\"){\r\n        core_flds.push(\"sup_msic\")\r\n    }\r\n    if (invois.sup_badsca == \"\"){\r\n        core_flds.push(\"sup_badsca\")\r\n    }\r\n    // if (invois.sup_adrs == \"\"){\r\n    //     core_flds.push(\"sup_adrs\")\r\n    // }\r\n    if (invois.sup_cont_num == \"\"){\r\n        core_flds.push(\"sup_cont_num\")\r\n    }\r\n    if (invois.sup_adrs_line0 == \"\" && invois.sup_adrs_line1 == \"\" && invois.sup_adrs_line2 == \"\"){\r\n        core_flds.push(\"sup_adrs_line0\")\r\n    }\r\n    if (invois.sup_city == \"\"){\r\n        core_flds.push(\"sup_city\")\r\n    }\r\n    if (invois.sup_cste == \"\"){\r\n        core_flds.push(\"sup_cste\")\r\n    }\r\n    if (invois.sup_country == \"\"){\r\n        core_flds.push(\"sup_country\")\r\n    }\r\n\r\n    // Buyer Data\r\n    if(invois.buy_name == \"\"){\r\n        core_flds.push(\"buy_name\")\r\n    }\r\n    if(invois.buy_tin == \"\"){\r\n        core_flds.push(\"buy_tin\")\r\n    }\r\n    if(invois.buy_reg_nric == \"\" && invois.buy_reg_brn == \"\" && invois.buy_reg_passport == \"\" && invois.buy_reg_army == \"\"){\r\n        core_flds.push(\"buy_reg_nric\", \"buy_reg_brn\", \"buy_reg_passport\", \"buy_reg_army\")\r\n    }\r\n    // if(doc_header[0].buy_sst == true && doc_buy[0].buy_sst_reg == \"\"){\r\n    //     CreatePortalValidation(doc_header[0].e_inv_no, 0, \"Buyer SST is Mandatory.\", \"Buyer\")\r\n    // }\r\n    if(invois.buy_adrs == \"\"){\r\n        // CreatePortalValidation(doc_header[0].e_inv_no, 0, \"Buyer Address is Mandatory.\", \"Buyer\")\r\n    }\r\n    if(invois.buy_cont_num == \"\"){\r\n        core_flds.push(\"buy_cont_num\")\r\n    }\r\n    if(invois.buy_adrs_line0 == \"\" && invois.buy_adrs_line1 == \"\" && invois.buy_adrs_line2 == \"\"){\r\n        core_flds.push(\"buy_adrs_line0\")\r\n    }\r\n    if(invois.buy_city == \"\"){\r\n        core_flds.push(\"buy_city\")\r\n    }\r\n    if(invois.buy_cste == \"\"){\r\n        core_flds.push(\"buy_cste\")\r\n    }\r\n    if(invois.buy_country == \"\"){\r\n        core_flds.push(\"buy_country\")\r\n    }\r\n    return core_flds\r\n}\r\n\r\nfunction check_validations(EInvoiceCodeNumber){\r\n    debug(\"Checking...\")\r\n\r\n    eih_data = CralDB.QueryByComp(\"select * from {{einv_header}} where e_inv_no='$1'\", jscall.company, EInvoiceCodeNumber)\r\n    if (eih_data.length == 0){\r\n        jscall_error = \"Record not found\"\r\n        return false\r\n    } else {\r\n         let [sup_id_val, sup_id_type] = get_reg_num_type(eih_data[0].sup_reg_brn, eih_data[0].sup_reg_nric, eih_data[0].sup_reg_army, eih_data[0].sup_reg_passport)\r\n        debug(eih_data[0].sup_tin, sup_id_type, sup_id_val)\r\n        if( validate_tin(eih_data[0].sup_tin, sup_id_type, sup_id_val) != true){\r\n            CreatePortalValidation(eih_data[0].e_inv_no, 0, \"Supplier TIN Validation Failed\", \"Supplier\")\r\n        }\r\n        let [buy_id_val, buy_id_type] = get_reg_num_type(eih_data[0].buy_reg_brn, eih_data[0].buy_reg_nric, eih_data[0].buy_reg_army, eih_data[0].buy_reg_passport)\r\n        if (eih_data[0].inv_bp != \"\" && eih_data[0].inv_bp != null && eih_data[0].inv_bp != undefined){\r\n            if( validate_tin(eih_data[0].buy_tin, buy_id_type, buy_id_val) != true){\r\n                CreatePortalValidation(eih_data[0].e_inv_no, 0, \"Buyer TIN Validation Failed\", \"Buyer\")\r\n            }\r\n        }\r\n        if (CralDB.QueryByComp(\"select einv_code from {{einv_validation}} where einv_code='$1'\", jscall.company, eih_data[0].e_inv_no)?.length == 0){\r\n            if (eih_data[0].err_msg != \"\" || eih_data[0].einv_stat != \"10\"){\r\n                resolved_update = {\r\n                    \"e_inv_no\": eih_data[0].e_inv_no,\r\n                    \"err_msg\": \"\",\r\n                    \"einv_stat\": \"10\"\r\n                }\r\n                CralDB.PublishTopic(\"einv_header\", jscall.company, \"Update\", resolved_update, jscall.user)\r\n            };\r\n            return true\r\n        }\r\n    }\r\n    return false\r\n}\r\n\r\nfunction validate_tin(tin, idType, idVal){\r\n    \r\n    lhdn = NewLHDN()\r\n    token = get_lhdn_token()\r\n    if (token == false){\r\n        return false;   \r\n    } else {\r\n        lhdn_response = lhdn.ValidateTaxPayerTIN(token, tin, idType, idVal)\r\n        switch(lhdn_response.Result.Status){\r\n            case 200:\r\n                return lhdn_response.Result.Response\r\n                break;\r\n            default:\r\n                // jscall_error = lhdn_response.Result.Status + \" - \" + JSON.stringify(lhdn_response.Result.Response)\r\n                return false;\r\n                break\r\n        }\r\n    }\r\n    return false\r\n}\r\n\r\nfunction test_DataUpsert(){\r\n    return DataUpsert(jscall.input.temp_code, jscall.input.records)\r\n}\r\nfunction DataUpsert(temp_code, input_data){\r\n    // temp_code = \"EX_TP0001\"\r\n    update_data = []\r\n    old_data = CralDB.QueryByComp(`SELECT * FROM {{inv_interim_excl}} WHERE temp_code='${temp_code}'`, jscall.company)\r\n    // return old_data\r\n    update_data = input_data.filter(old_rec => {\r\n        return !old_data.some(new_rec => {\r\n            return Object.keys(new_rec).every(keys => new_rec[keys] === old_rec[keys])\r\n        });\r\n    });\r\n    // const update_data = input_data.filter(obj1 => {\r\n    //     return !old_data.some(obj2 => {\r\n    //         return Object.keys(obj1).every(key => obj1[key] === obj2[key]);\r\n    //     });\r\n    // });\r\n    // const update_data = input_data.filter(obj2 => {\r\n    //     return !old_data.some(obj1 => {\r\n    //         return Object.keys(obj1).every(key => obj1[key] === obj2[key]);\r\n    //     });\r\n    // });\r\n    return update_data\r\n}\r\n\r\nfunction getMasterData(){\r\n    data_update = []\r\n    \r\n    inv_data = CralDB.QueryByComp(`SELECT * FROM {{inv_interim_excl}} WHERE temp_code='${jscall.input.temp_code}'`, jscall.company)\r\n    inv_data.forEach(inv => {\r\n        if (!CralDB.QueryByComp(`select skip_master from {{entity_data_set}} where sup_company=${inv.comp} and data_set='${inv.data_set}'`, jscall.company)[0]?.skip_master){\r\n            payload = {}\r\n            payload[\"inv_no\"] = inv.inv_no\r\n            payload[\"line\"] = inv.line\r\n            payload[\"inv_bp\"] = inv.inv_bp\r\n            payload[\"ship_bp\"] = inv.ship_bp\r\n            payload[\"sup_adrs\"] = inv.sup_adrs\r\n            payload[\"buy_adrs\"] = inv.buy_adrs\r\n            payload[\"ship_adrs\"] = inv.ship_adrs\r\n            buyer_data = CralDB.QueryByComp(`select * from {{buyer_companies}} where data_set='${inv.data_set}' and buy_code='${inv.inv_bp}'`, jscall.company)\r\n            if (buyer_data.length != 0){\r\n                payload[\"buy_name\"] = buyer_data[0].buy_name\r\n                payload[\"buy_cont_num\"] = buyer_data[0].buy_cont_num\r\n                payload[\"buy_email\"] = buyer_data[0].buy_email\r\n                payload[\"buy_sst_reg\"] = buyer_data[0].buy_sst_reg\r\n                payload[\"buy_tin\"] = buyer_data[0].buy_tin\r\n                payload[\"buy_reg_brn\"] = buyer_data[0].buy_reg_brn\r\n                payload[\"buy_reg_nric\"] = buyer_data[0].buy_reg_nric\r\n                payload[\"buy_reg_passport\"] = buyer_data[0].buy_reg_passport\r\n                payload[\"buy_reg_army\"] = buyer_data[0].buy_reg_army\r\n                if (!inv.buy_adrs){\r\n                    payload[\"buy_adrs\"] = buyer_data[0].buy_adrs\r\n                }\r\n            }\r\n            ship_data = CralDB.QueryByComp(`select * from {{buyer_companies}} where data_set='${inv.data_set}' and buy_code='${inv.ship_bp}'`, jscall.company)\r\n            if (ship_data.length != 0){\r\n                payload[\"ship_name\"] = ship_data[0].buy_name\r\n                payload[\"ship_tin\"] = ship_data[0].buy_tin\r\n                payload[\"ship_reg_brn\"] = ship_data[0].buy_reg_brn\r\n                payload[\"ship_reg_nric\"] = ship_data[0].buy_reg_nric\r\n                payload[\"ship_reg_passport\"] = ship_data[0].buy_reg_passport\r\n                payload[\"ship_reg_army\"] = ship_data[0].buy_reg_army\r\n                if (!inv.ship_adrs){\r\n                    payload[\"ship_adrs\"] = ship_data[0].buy_adrs\r\n                }\r\n            }\r\n            sup_address = CralDB.QueryByComp(`select * from {{address_master}} where data_set='${inv.data_set}' and adrs_code='${inv.sup_adrs}'`, jscall.company)\r\n            if (sup_address.length != 0){\r\n                payload[\"sup_city\"] = sup_address[0].adrs_city\r\n                payload[\"sup_postal_zone\"] = sup_address[0].postal_zone\r\n                payload[\"sup_adrs_line0\"] = sup_address[0].adrs_line0\r\n                payload[\"sup_adrs_line1\"] = sup_address[0].adrs_line1\r\n                payload[\"sup_adrs_line2\"] = sup_address[0].adrs_line2\r\n                payload[\"sup_country\"] = sup_address[0].adrs_country\r\n                payload[\"sup_cste\"] = sup_address[0].adrs_state\r\n            }\r\n            buy_address = CralDB.QueryByComp(`select * from {{address_master}} where data_set='${inv.data_set}' and adrs_code='${inv.buy_adrs}'`, jscall.company)\r\n            if (buy_address.length != 0){\r\n                payload[\"buy_city\"] = buy_address[0].adrs_city\r\n                payload[\"buy_postal_zone\"] = buy_address[0].postal_zone\r\n                payload[\"buy_adrs_line0\"] = buy_address[0].adrs_line0\r\n                payload[\"buy_adrs_line1\"] = buy_address[0].adrs_line1\r\n                payload[\"buy_adrs_line2\"] = buy_address[0].adrs_line2\r\n                payload[\"buy_country\"] = buy_address[0].adrs_country\r\n                payload[\"buy_cste\"] = buy_address[0].adrs_state\r\n            }\r\n            ship_address = CralDB.QueryByComp(`select * from {{address_master}} where data_set='${inv.data_set}' and adrs_code='${inv.ship_adrs}'`, jscall.company)\r\n            if (ship_address.length != 0){\r\n                payload[\"ship_city\"] = ship_address[0].adrs_city\r\n                payload[\"ship_postal_zone\"] = ship_address[0].postal_zone\r\n                payload[\"ship_adrs_line0\"] = ship_address[0].adrs_line0\r\n                payload[\"ship_adrs_line1\"] = ship_address[0].adrs_line1\r\n                payload[\"ship_adrs_line2\"] = ship_address[0].adrs_line2\r\n                payload[\"ship_country\"] = ship_address[0].adrs_country\r\n                payload[\"ship_cste\"] = ship_address[0].adrs_state\r\n            }\r\n            data_update.push({\r\n                \"input\": payload,\r\n                \"result\" : CralDB.PublishTopic(\"inv_interim_excl\", jscall.company, \"Update\", payload, jscall.user)\r\n            })\r\n        }\r\n    })\r\n    return data_update\r\n}"},{"Bizobj":{"ObjectName":"forFiling","Description":"File Invoice","external":true,"input_struct":"","out_success":"","out_fail":""},"Script":"//**** Business Object forFiling Created by malai on 16-Jul-2024 12:21:45 ****//\r\n\r\nvar einvois = require(\"./scripts/Business_Objects/createEinvoice\")\r\nfunction fileSingleInvoice(){\r\n    updatePayload = {}\r\n    CralUtil.LogInfo(\"FilingNewInvoice\", jscall.input.e_inv_no, {\"Input\": jscall.input, \"User\": jscall.user})\r\n    add_flds = [\"ftrd\", \"frm1\", \"frm2\", \"adis\", \"adis_reason\", \"afee\", \"afee_reason\", \"anum\", \"ochg\", \"ochg_amnt\", \"ochg_reason\",\"det_tax\",\"org_doc_uuid\",\"org_e_inv_no\"]\r\n    \r\n    inv_details = CralDB.QueryByComp(\"select * from {{einv_header}} where e_inv_no='$1'\", jscall.company, jscall.input.e_inv_no)\r\n    if (inv_details[0]?.einv_stat != \"10\"){\r\n        jscall_error = \"An invoice can be filed only if it is eligible for filing.\"\r\n        return false\r\n    }\r\n    if (inv_details?.length != 0){\r\n        updatePayload.e_inv_no = jscall.input.e_inv_no\r\n        for (i = 0; i < add_flds.length ; i++){\r\n            if (jscall.input[add_flds[i]] != \"\" && jscall.input[add_flds[i]] != null && jscall.input[add_flds[i]] != undefined){\r\n                updatePayload[add_flds[i]] = jscall.input[add_flds[i]]\r\n            }\r\n        }\r\n        updateRet = CralDB.PublishTopic(\"einv_header\", jscall.company, \"Update\", updatePayload, jscall.user)\r\n        if (updateRet?.Success == true){\r\n            line_val  = CralDB.QueryByComp(`select cvat,ceno,e_inv_no,line from {{einv_lines}} where e_inv_no = '$1'`,jscall.company,jscall.input.e_inv_no)\r\n           \r\n            count = 0\r\n\r\n            for (j = 0;j<line_val.length;j++)\r\n            {\r\n                if (jscall.input.det_tax && line_val[j].cvat =='E' && line_val[j].ceno == \"\")\r\n                {\r\n                    line_val[j][\"ceno\"] = jscall.input.det_tax\r\n                    line_updt = CralDB.PublishTopic(\"einv_lines\", jscall.company, \"Update\", line_val[j], jscall.user)\r\n                    if (line_updt?.Success != true)\r\n                    {\r\n                        count = count + 1\r\n                    }\r\n                }\r\n            }\r\n            if (count != 0)\r\n            {\r\n                jscall_error = \"Unable to Update Exemption\"\r\n                return false\r\n            }\r\n            // filing_result = einvois.submitEinvoiceToLHDN(jscall.input.e_inv_no)\r\n            filing_result = einvois.BatchInvoiceSubmission([jscall.input.e_inv_no])\r\n            if (!filing_result?.status){\r\n                jscall_error = filing_result.error\r\n                return false\r\n            }\r\n            return true\r\n            // var doc_json = einvois.BuildJSONFormat(jscall.input.e_inv_no)\r\n            // println(\"After Doc\")\r\n            // if (typeof doc_json == \"string\"){\r\n            //     println(\"Error Doc\")\r\n            //     einvois.CreatePortalValidation(jscall.input.e_inv_no, 0, doc_json, \"\")\r\n            //     jscall_error = \"Error While Submitting - \" + doc_json\r\n            //     return false\r\n            // } else {\r\n            //     // Convert JSON to XML and hash the doc to string.\r\n            //     println(\"Success Doc\")\r\n            //     submission_ret = einvois.SubmitTOLHDN(doc_json.document, doc_json.InvoiceCodeNumber)\r\n            //     if (submission_ret == false){\r\n            //         jscall_error = \"Error while Submitting\"\r\n            //         return false\r\n            //     } else {\r\n            //         sub_data = einvois.SubmissionUpdate(submission_ret)\r\n            //         if (CralDB.QueryByComp(\"select einv_code from {{einv_validation}} where einv_code='$1'\", jscall.company, jscall.input.e_inv_no).length == 0){\r\n            //             return true;\r\n            //         } else {\r\n            //             jscall_error = \"Unable to Submit to LHDN. Invoice is Under Validation.\"\r\n            //             return false\r\n            //         }\r\n            //     }\r\n            // }\r\n        }\r\n        jscall_error = \"Unable to Insert Additional Information.\"\r\n        return false\r\n    } else {\r\n        jscall_error = `Invoice ${jscall.input.e_inv_no} Not Found`\r\n        return false\r\n    }\r\n}\r\nfunction findCategory(){\r\n    var ret_catg = []\r\n    einv_det = CralDB.QueryByComp(\"select * from {{einv_header}} where e_inv_no='$1' and dataset = '$2'\", jscall.company, jscall.input.e_inv_no, jscall.input.data_set)\r\n    debug(einv_det[0].cvat)\r\n     debug(einv_det[0].sctg)\r\n    // if (einv_det?.length != 0){\r\n          if (einv_det[0].sctg != \"10\" && einv_det[0].sctg == \"20\"){\r\n             ret_catg.push(\"Import/Export\")\r\n         }else if (einv_det[0].sctg != \"10\" && einv_det[0].sctg == \"30\"){\r\n             ret_catg.push(\"Import/Export\")\r\n         }\r\n\r\n        //  if (einv_det[0].cvat == \"E\" && einv_det[0].det_tax ==\"\"){\r\n        //      ret_catg.push(\"Exemption\")\r\n        //  }\r\n        if (CralDB.QueryByComp(`select line from {{einv_lines}} where e_inv_no='${jscall.input.e_inv_no}' and cvat='E' and ceno=''`, jscall.company).length){\r\n            ret_catg.push(\"Exemption\")\r\n        }\r\n\r\n        if (einv_det[0].doct != \"01\" && einv_det[0].doct != \"11\" ){\r\n            if ( einv_det[0].org_doc_uuid == \"\" || einv_det[0].org_e_inv_no == \"\"){\r\n             ret_catg.push(\"Original Document\")\r\n            }\r\n         }\r\n   //  }\r\n    return ret_catg\r\n}\r\n\r\n// if (einv_det[0].sctg = \"20\" || einv_det[0].sctg == \"30\"){\r\n//              ret_catg.push(\"Import/Export\")\r\n// }"},{"Bizobj":{"ObjectName":"resendSubmission","Description":"Resend E-Invoice - For Validation","external":true,"input_struct":"","out_success":"","out_fail":""},"Script":"//**** Business Object resendSubmission Created by malai on 24-Jun-2024 11:13:28 ****//\r\n\r\nvar einvois = require(\"./scripts/Business_Objects/createEinvoice\")\r\n\r\nfunction ReSubmitSingleInvoice(){\r\n    inv_status = CralDB.QueryByComp(\"select esta,einv_stat,dataset from {{einv_header}} where e_inv_no='$1'\", jscall.company, jscall.input.einv_no)\r\n    if (inv_status?.length != 0){\r\n        if (inv_status[0].esta == \"10\" || inv_status[0].einv_stat == \"60\"){\r\n            invStatus = CheckForResubmission(jscall.input.einv_no, inv_status[0].dataset)\r\n            if (invStatus.status == true){\r\n                return einvois.BatchInvoiceSubmission([jscall.input.einv_no])\r\n            }\r\n        }\r\n        return {\r\n            \"Error\": \"Invoice is Already Submitted\"\r\n        }\r\n    } else {\r\n        return {\r\n            \"Error\": \"Invoice Not Found.\"\r\n        }\r\n    }\r\n}\r\n\r\nfunction resendSubmissionInv(){\r\n    debug(\"Start\")\r\n    let results = []\r\n    let readyToSubmit = []\r\n    // return 1\r\n    resend = CralDB.QueryByComp(\"select e_inv_no,dataset from {{einv_header}} where einv_stat='60'\", jscall.company)\r\n    for (r_i=0; r_i<resend.length;r_i++){\r\n        debug(resend[r_i].e_inv_no)\r\n        // results.push(CheckForResubmission(resend[r_i].e_inv_no, resend[r_i].dataset))\r\n        reSubmitResult = CheckForResubmission(resend[r_i].e_inv_no, resend[r_i].dataset)\r\n        if (reSubmitResult.status == true){\r\n            readyToSubmit.push(resend[r_i].e_inv_no)\r\n        } else {\r\n            results.push(reSubmitResult)\r\n        }\r\n    }\r\n    if (readyToSubmit.length){\r\n        batchSubmissionResult = einvois.BatchInvoiceSubmission(readyToSubmit)\r\n    }\r\n    return {\r\n        \"ReadyForSubmit\": readyToSubmit,\r\n        \"ValidationFails\": results,\r\n        \"SubmissionResult\": batchSubmissionResult\r\n    }\r\n}\r\n\r\nfunction CheckForResubmission(inv_num, dataset){\r\n    debug(\"IN\")\r\n    isSkipMaster = CralDB.QueryByComp(`select skip_master from {{entity_data_set}} where sup_company=${jscall.company} and data_set='${dataset}'`, jscall.company)[0]?.skip_master\r\n    CralUtil.LogInfo(\"Resubmission\", inv_num, {\"SkipMaster\":isSkipMaster})\r\n    if (!isSkipMaster){\r\n        CralUtil.LogInfo(\"ReChecking\", \"CheckingInvoice\", inv_num)\r\n        del_data = CralDB.QueryByComp(\"select * from {{einv_validation}} where einv_code='$1'\", jscall.company, inv_num)\r\n        // debug(JSON.stringify(del_data))\r\n        temp_propPath = \"\"\r\n        temp_resolved = false\r\n        for (var r_j=0; r_j<del_data.length; r_j++){\r\n            resolved = false\r\n            debug(del_data[r_j].trgt)\r\n            switch(del_data[r_j].trgt){\r\n                case \"Invoice.Map\":\r\n                    switch(del_data[r_j].prop_path){\r\n                        case \"ccur\":\r\n                            mapped_ccur = einvois.get_ccur(del_data[r_j].details, dataset)\r\n                            if (mapped_ccur != \"\" && mapped_ccur != undefined && mapped_ccur != null){\r\n                                payload = {\r\n                                    \"e_inv_no\": inv_num,\r\n                                    \"ccur\": mapped_ccur\r\n                                }\r\n                                map_update = CralDB.PublishTopic(\"einv_header\", jscall.company, \"Update\", payload, jscall.user)\r\n                                if (map_update.Success != false && map_update.Success != undefined && map_update.Success != null){\r\n                                    resolved = true\r\n                                }\r\n                            }\r\n                        break\r\n                        case \"cvat\":\r\n                            mapped_cvat = einvois.get_cvat(del_data[r_j].details, dataset)\r\n                            if (mapped_cvat != \"\" && mapped_cvat != undefined && mapped_cvat != null){\r\n                                payload = {\r\n                                    \"e_inv_no\": inv_num,\r\n                                    \"cvat\": mapped_cvat\r\n                                }\r\n                                map_update = CralDB.PublishTopic(\"einv_header\", jscall.company, \"Update\", payload, jscall.user)\r\n                                if (map_update.Success != false && map_update.Success != undefined && map_update.Success != null){\r\n                                    resolved = true\r\n                                }\r\n                            }\r\n                        break\r\n                    }\r\n                    break;\r\n                case \"InvoiceLine.Map\":\r\n                    switch(del_data[r_j].prop_path){\r\n                        case \"clas\":\r\n                            mapped_clas = einvois.get_clas(del_data[r_j].details, dataset)\r\n                            if (mapped_clas != \"\" && mapped_clas != undefined && mapped_clas != null){\r\n                                payload = {\r\n                                    \"e_inv_no\": inv_num,\r\n                                    \"line\": del_data[r_j].einv_line,\r\n                                    \"clas\": mapped_clas\r\n                                }\r\n                                map_update = CralDB.PublishTopic(\"einv_lines\", jscall.company, \"Update\", payload, jscall.user)\r\n                                if (map_update.Success != false && map_update.Success != undefined && map_update.Success != null){\r\n                                    resolved = true\r\n                                }\r\n                            }\r\n                        break\r\n                        case \"cvat\":\r\n                            mapped_cvat = einvois.get_cvat(del_data[r_j].details, dataset)\r\n                            if (mapped_cvat != \"\" && mapped_cvat != undefined && mapped_cvat != null){\r\n                                payload = {\r\n                                    \"e_inv_no\": inv_num,\r\n                                    \"line\": del_data[r_j].einv_line,\r\n                                    \"cvat\": mapped_cvat\r\n                                }\r\n                                map_update = CralDB.PublishTopic(\"einv_lines\", jscall.company, \"Update\", payload, jscall.user)\r\n                                if (map_update.Success != false && map_update.Success != undefined && map_update.Success != null){\r\n                                    resolved = true\r\n                                }\r\n                            }\r\n                        break\r\n                    }\r\n                    break;\r\n                // case \"Supplier\":\r\n                //     resolved = UpdateSupplierData(inv_num)\r\n                //     break;\r\n                // case \"Buyer\":\r\n                //     resolved = UpdateBuyerData(inv_num)\r\n                //     break;\r\n                // case \"Shipper\":\r\n                //     resolved = UpdateShipperData(inv_num)\r\n                //     break;\r\n                default:\r\n                    debug(\"Switch Debug\")\r\n                    // if (del_data[r_j].val_catg == \"10\"){\r\n                    //     crt_propPath = getPropertyPath(del_data[r_j].trgt)\r\n                    // } else {\r\n                    //     crt_propPath = getPropertyPath(del_data[r_j].prop_path)\r\n                    // }\r\n                    crt_propPath = getPropertyPath(del_data[r_j].prop_path)\r\n                    if (crt_propPath == temp_propPath && temp_propPath != \"\"){\r\n                        resolved = temp_resolved\r\n                    } else {\r\n                        debug(\"Target\" + crt_propPath)\r\n                        switch(crt_propPath){\r\n                            case \"Supplier\":\r\n                                resolved = UpdateSupplierData(inv_num)\r\n                                break;\r\n                            case \"Buyer\":\r\n                                resolved = UpdateBuyerData(inv_num)\r\n                                break;\r\n                            case \"Shipper\":\r\n                                resolved = UpdateShipperData(inv_num)\r\n                                break;\r\n                            default:\r\n                                resolved = true\r\n                        }\r\n                        temp_resolved = resolved\r\n                        temp_propPath = crt_propPath\r\n                    }\r\n                    resolved = true\r\n                    break\r\n            }\r\n            if (resolved == true){\r\n                del_str = JSON.stringify(CralDB.PublishTopic(\"einv_validation\", jscall.company, \"Delete\", del_data[r_j], jscall.user))\r\n            }\r\n        }\r\n        header_data = CralDB.QueryByComp(\"select * from {{einv_header}} where e_inv_no='$1'\", jscall.company, inv_num)\r\n        if (einvois.check_validations(inv_num) == true){\r\n            debug(\"Validation Pass\")\r\n            debug(\"Validation Pass\")\r\n            // if(header_data[0]?.sctg != \"10\" && del_data[r_j].val_catg == \"10\"){\r\n            if ((header_data[0]?.sctg == \"10\") || (del_data[0]?.val_catg == \"20\")){\r\n\r\n                // return einvois.submitEinvoiceToLHDN(inv_num)\r\n                return {\r\n                    \"invoice\": inv_num,\r\n                    \"status\": true,\r\n                    \"error\": \"\"\r\n                }\r\n                \r\n                // var doc_json = einvois.BuildJSONFormat(inv_num)\r\n                // debug(\"After Doc\")\r\n                // if (typeof doc_json == \"string\"){\r\n                //     debug(\"Error Doc\")\r\n                //     einvois.CreatePortalValidation(inv_num, 0, doc_json, \"\")\r\n                //     return {\r\n                //         \"Invoice\": inv_num,\r\n                //         \"Status\": \"Error While Creating JSON Document.\",\r\n                //         \"Error\": doc_json\r\n                //     }\r\n                // } else {\r\n                //     debug(\"Success Doc\")\r\n                //     submission_ret = einvois.SubmitTOLHDN(doc_json.document, doc_json.InvoiceCodeNumber)\r\n                //     debug(JSON.stringify(submission_ret))\r\n                //     if (submission_ret == false){\r\n                //         return {\r\n                //             \"Invoice\": inv_num,\r\n                //             \"Status\": \"Error While Submitting\",\r\n                //             \"Error\": jscall_error\r\n                //         }\r\n                //     } else {\r\n                //         sub_data = einvois.SubmissionUpdate(submission_ret)\r\n                //         return {\r\n                //             \"Invoice\": inv_num,\r\n                //             \"Status\": \"ReSubmission To LHDN is Successfull.\",\r\n                //             \"Error\": \"\"\r\n                //         }\r\n                //     }\r\n                // }\r\n            }\r\n            return {\r\n                \"invoice\": inv_num,\r\n                \"error\": \"Not a Local Invoice. Sent to File Invoice\",\r\n                \"status\": false\r\n            }\r\n        }\r\n    } else {\r\n        CralDB.QueryByComp(`DELETE FROM {{einv_validation}} where einv_code='${inv_num}'`, jscall.company)\r\n        // \"All Validations Deleted.\"\r\n        CralDB.PublishTopic(\"einv_header\", jscall.company, \"Update\", {\"e_inv_no\": inv_num, \"einv_stat\": \"10\"}, jscall.user)\r\n        \r\n        // return einvois.submitEinvoiceToLHDN(inv_num)\r\n        return {\r\n            \"invoice\": inv_num,\r\n            \"error\": \"\",\r\n            \"status\": true\r\n        }\r\n    }\r\n    debug(\"Validation Fail\")\r\n    return {\r\n        \"invoice\": inv_num,\r\n        \"status\": false,\r\n        \"error\": \"Validation Fails at einvois.io level\"\r\n    }\r\n}\r\n\r\nfunction getPropertyPath(target){\r\n    if (target.includes(\"AccountingSupplierParty\")){\r\n        return \"Supplier\"\r\n    }\r\n    if (target.includes(\"AccountingCustomerParty\")){\r\n        return \"Buyer\"\r\n    }\r\n    if (target.includes(\"DeliveryParty\")){\r\n        return \"Shipper\"\r\n    }\r\n    return target\r\n    // switch(target){\r\n    //     case \"Supplier\":\r\n    //         return \"Supplier\"\r\n    //     case \"Buyer\":\r\n    //         return \"Buyer\"\r\n    //     case \"Shipper\":\r\n    //         return \"Shipper\"\r\n    //     default:\r\n    //         return target\r\n    // }\r\n    // return \"\"\r\n}\r\n\r\nfunction UpdateSupplierData(inv_num){\r\n    payload = {}\r\n    s_code = CralDB.QueryByComp(\"select dataset,doct,sup_code,sup_adrs from {{einv_header}} where e_inv_no='$1'\", jscall.company, inv_num)\r\n    if (s_code?.length != 0){\r\n        if (s_code[0].doct == \"11\" || s_code[0].doct == \"12\" || s_code[0].doct == \"13\" || s_code[0].doct == \"14\"){\r\n            sup_data = CralDB.QueryByComp(\"select * from {{buyer_companies}} where data_set='\" + s_code[0]?.dataset + \"' and buy_code='\" + s_code[0]?.sup_code + \"'\", jscall.company)\r\n            if (sup_data.length != 0){\r\n                payload = {\r\n                    \"e_inv_no\": inv_num,\r\n                    \"sup_name\": sup_data[0].buy_name,\r\n                    \"sup_cont_num\": sup_data[0].buy_cont_num,\r\n                    \"sup_email\": sup_data[0].buy_email,\r\n                    \"sup_sst_reg\": sup_data[0].buy_sst_reg,\r\n                    \"sup_ttx_no\": sup_data[0].buy_ttx_reg,\r\n                    \"sup_tin\": sup_data[0].buy_tin,\r\n                    \"sup_reg_brn\": sup_data[0].buy_reg_brn,\r\n                    \"sup_reg_nric\": sup_data[0].buy_reg_nric,\r\n                    \"sup_reg_passport\": sup_data[0].buy_reg_passport,\r\n                    \"sup_reg_army\": sup_data[0].buy_reg_army,\r\n                    \"sup_badsca\": sup_data[0].buy_badsca,\r\n                    \"sup_bank_acc\": \"\",\r\n                    \"sup_msic\": sup_data[0].buy_msic\r\n                }\r\n                if (s_code[0].sup_adrs == \"\" || s_code[0].sup_adrs == null || s_code[0].sup_adrs == undefined){\r\n                    payload.sup_adrs = sup_data[0].buy_adrs\r\n                }\r\n            }\r\n        } else {\r\n            sup_data = CralDB.QueryByComp(\"select * from {{supplier_companies}} where sup_company=$1\", jscall.company, s_code[0].sup_code)\r\n            if (sup_data.length != 0){\r\n                payload = {\r\n                    \"e_inv_no\": inv_num,\r\n                    \"sup_name\": sup_data[0].sup_name,\r\n                    \"sup_cont_num\": sup_data[0].sup_cont_num,\r\n                    \"sup_email\": sup_data[0].sup_email,\r\n                    \"sup_sst_reg\": sup_data[0].sup_sst_reg,\r\n                    \"sup_ttx_no\": sup_data[0].sup_ttx_no,\r\n                    \"sup_tin\": sup_data[0].sup_tin,\r\n                    \"sup_reg_brn\": sup_data[0].sup_reg_brn,\r\n                    \"sup_reg_nric\": sup_data[0].sup_reg_nric,\r\n                    \"sup_reg_passport\": sup_data[0].sup_reg_passport,\r\n                    \"sup_reg_army\": sup_data[0].sup_reg_army,\r\n                    \"sup_badsca\": sup_data[0].sup_badsca,\r\n                    \"sup_bank_acc\": sup_data[0].sup_bank_acc,\r\n                    \"sup_msic\": sup_data[0].sup_msic,\r\n                    \"sup_adrs\": sup_data[0].sup_adrs\r\n                }\r\n            }\r\n        }\r\n        if (payload != null && typeof payload === 'object' && Object.keys(payload).length > 0){\r\n            ret = CralDB.PublishTopic(\"einv_header\", jscall.company, \"Update\", payload, jscall.user)\r\n            debug(ret)\r\n            if (ret.Success == true){\r\n                return UpdateAddressData(ret.Message.dataset, inv_num, ret.Message.sup_adrs, \"Supplier\")\r\n                // return true\r\n            }\r\n        }\r\n    }\r\n    return false\r\n}\r\nfunction UpdateBuyerData(inv_num){\r\n    payload = {}\r\n    debug(\"Updating Buyer\")\r\n    buyer_code = CralDB.QueryByComp(\"select dataset,inv_bp,buy_adrs,doct from {{einv_header}} where e_inv_no='$1'\", jscall.company, inv_num)\r\n    if (buyer_code?.length != 0){\r\n        if (buyer_code[0].doct == \"11\" || buyer_code[0].doct == \"12\" || buyer_code[0].doct == \"13\" || buyer_code[0].doct == \"14\"){\r\n            buyer_details = CralDB.QueryByComp(\"select * from {{supplier_companies}} where sup_company=$1\", jscall.company, buyer_code[0].inv_bp)\r\n            if (buyer_details.length != 0){\r\n                payload = {\r\n                    \"e_inv_no\": inv_num,\r\n                    \"buy_name\": buyer_details[0].sup_name,\r\n                    \"buy_cont_num\": buyer_details[0].sup_cont_num,\r\n                    \"buy_email\": buyer_details[0].sup_email,\r\n                    \"buy_sst_reg\": buyer_details[0].sup_sst_reg,\r\n                    \"buy_tin\": buyer_details[0].sup_tin,\r\n                    \"buy_reg_brn\": buyer_details[0].sup_reg_brn,\r\n                    \"buy_reg_nric\": buyer_details[0].sup_reg_nric,\r\n                    \"buy_reg_passport\": buyer_details[0].sup_reg_passport,\r\n                    \"buy_reg_army\": buyer_details[0].sup_reg_army\r\n                    // \"buy_adrs\": buyer_details[0].sup_adrs\r\n                }\r\n                if (buyer_code[0].buy_adrs == \"\" || buyer_code[0].buy_adrs == null || buyer_code[0].buy_adrs == undefined){\r\n                    payload.buy_adrs = buyer_details[0].sup_adrs\r\n                }\r\n            }\r\n        } else {\r\n            buyer_details = CralDB.QueryByComp(\"select * from {{buyer_companies}} where data_set='\" + buyer_code[0].dataset + \"' and buy_code='\" + buyer_code[0].inv_bp + \"'\", jscall.company)\r\n            if (buyer_details.length != 0){\r\n                payload = {\r\n                    \"e_inv_no\": inv_num,\r\n                    \"buy_name\": buyer_details[0].buy_name,\r\n                    \"buy_cont_num\": buyer_details[0].buy_cont_num,\r\n                    \"buy_email\": buyer_details[0].buy_email,\r\n                    \"buy_sst_reg\": buyer_details[0].buy_sst_reg,\r\n                    \"buy_tin\": buyer_details[0].buy_tin,\r\n                    \"buy_reg_brn\": buyer_details[0].buy_reg_brn,\r\n                    \"buy_reg_nric\": buyer_details[0].buy_reg_nric,\r\n                    \"buy_reg_passport\": buyer_details[0].buy_reg_passport,\r\n                    \"buy_reg_army\": buyer_details[0].buy_reg_army\r\n                }\r\n                if (buyer_code[0].buy_adrs == \"\" || buyer_code[0].buy_adrs == null || buyer_code[0].buy_adrs == undefined){\r\n                    payload.buy_adrs = buyer_details[0].buy_adrs\r\n                }\r\n            }\r\n        }\r\n        // if (payload != {} && payload != null && payload != undefined){\r\n        if (payload != null && typeof payload === 'object' && Object.keys(payload).length > 0){\r\n            ret = CralDB.PublishTopic(\"einv_header\", jscall.company, \"Update\", payload, jscall.user)\r\n            debug(ret)\r\n            if (ret.Success == true){\r\n                debug(ret.Message.buy_adrs)\r\n                return UpdateAddressData(ret.Message.dataset, inv_num, ret.Message.buy_adrs, \"Buyer\")\r\n                // return true\r\n            }\r\n        }\r\n    }\r\n    return false\r\n}\r\nfunction UpdateShipperData(inv_num){\r\n    payload = {}\r\n    ship_code = CralDB.QueryByComp(\"select dataset,ship_bp,ship_adrs,doct from {{einv_header}} where e_inv_no='$1'\", jscall.company, inv_num)\r\n    // ship_details = CralDB.QueryByComp(\"select * from {{buyer_companies}} where data_set='\" + \"DS1\" + \"' and buy_code='\" + \"AAPR01\" + \"'\", jscall.company)\r\n    if (ship_code.length != 0){\r\n        if (ship_code[0].doct == \"11\" || ship_code[0].doct == \"12\" || ship_code[0].doct == \"13\" || ship_code[0].doct == \"14\"){\r\n            ship_details = CralDB.QueryByComp(\"select * from {{supplier_companies}} where sup_company=$1\", jscall.company, ship_code[0].ship_bp)\r\n            if (ship_details.length != 0){\r\n                payload = {\r\n                    \"e_inv_no\": inv_num,\r\n                    \"ship_name\": ship_details[0].sup_name,\r\n                    \"ship_tin\": ship_details[0].sup_tin,\r\n                    \"ship_reg_brn\": ship_details[0].sup_reg_brn,\r\n                    \"ship_reg_nric\": ship_details[0].sup_reg_nric,\r\n                    \"ship_reg_passport\": ship_details[0].sup_reg_passport,\r\n                    \"ship_reg_army\": ship_details[0].sup_reg_army\r\n                }\r\n                if (ship_code[0].ship_adrs != \"\" || ship_code[0].ship_adrs != null || ship_code[0].ship_adrs != undefined){\r\n                    payload.ship_adrs = ship_details[0].sup_adrs\r\n                }\r\n            }\r\n        } else {\r\n            ship_details = CralDB.QueryByComp(\"select * from {{buyer_companies}} where data_set='\" + ship_code[0].dataset + \"' and buy_code='\" + ship_code[0].ship_bp + \"'\", jscall.company)\r\n            if (ship_details.length != 0){\r\n                payload = {\r\n                    \"e_inv_no\": inv_num,\r\n                    \"ship_name\": ship_details[0].buy_name,\r\n                    \"ship_tin\": ship_details[0].buy_tin,\r\n                    \"ship_reg_brn\": ship_details[0].buy_reg_brn,\r\n                    \"ship_reg_nric\": ship_details[0].buy_reg_nric,\r\n                    \"ship_reg_passport\": ship_details[0].buy_reg_passport,\r\n                    \"ship_reg_army\": ship_details[0].buy_reg_army\r\n                }\r\n                if (ship_code[0].ship_adrs != \"\" || ship_code[0].ship_adrs != null || ship_code[0].ship_adrs != undefined){\r\n                    payload.ship_adrs = ship_details[0].buy_adrs\r\n                }\r\n            }\r\n        }\r\n        if (payload != {} && payload != null && payload != undefined){\r\n            ret = CralDB.PublishTopic(\"einv_header\", jscall.company, \"Update\", payload, jscall.user)\r\n            if (ret.Success == true){\r\n                return UpdateAddressData(ret.Message.dataset, inv_num, ret.Message.ship_adrs, \"Shipper\")\r\n                // return true\r\n            }\r\n        }\r\n    }\r\n    return false\r\n}\r\nfunction UpdateAddressData(ds, invNum, code, catg){\r\n    address_data = CralDB.QueryByComp(\"select * from {{address_master}} where data_set='\" + ds + \"' and adrs_code='\" + code + \"'\", jscall.company)\r\n    debug(address_data)\r\n    if (address_data.length != 0){\r\n        var [getcountry, getstate] = einvois.get_country_state(address_data[0].adrs_country, address_data[0].adrs_state, ds)\r\n        switch(catg){\r\n            case \"Supplier\":\r\n            payload = {\r\n                \"sup_city\": address_data[0].adrs_city,\r\n                \"sup_postal_zone\": address_data[0].postal_zone,\r\n                \"sup_adrs_line0\": address_data[0].adrs_line0,\r\n                \"sup_adrs_line1\": address_data[0].adrs_line1,\r\n                \"sup_adrs_line2\": address_data[0].adrs_line2,\r\n                \"sup_country\": getcountry,\r\n                \"sup_cste\": getstate\r\n            }\r\n            break;\r\n            case \"Buyer\":\r\n            payload = {\r\n                \"buy_city\": address_data[0].adrs_city,\r\n                \"buy_postal_zone\": address_data[0].postal_zone,\r\n                \"buy_adrs_line0\": address_data[0].adrs_line0,\r\n                \"buy_adrs_line1\": address_data[0].adrs_line1,\r\n                \"buy_adrs_line2\": address_data[0].adrs_line2,\r\n                \"buy_country\": getcountry,\r\n                \"buy_cste\": getstate\r\n            }\r\n            break;\r\n            case \"Shipper\":\r\n            payload = {\r\n                \"ship_city\": address_data[0].adrs_city,\r\n                \"ship_postal_zone\": address_data[0].postal_zone,\r\n                \"ship_adrs_line0\": address_data[0].adrs_line0,\r\n                \"ship_adrs_line1\": address_data[0].adrs_line1,\r\n                \"ship_adrs_line2\": address_data[0].adrs_line2,\r\n                \"ship_country\": getcountry,\r\n                \"ship_cste\": getstate\r\n            }\r\n            break;\r\n            default:\r\n                return false\r\n            break;\r\n        }\r\n        payload.e_inv_no = invNum\r\n        ret = CralDB.PublishTopic(\"einv_header\", jscall.company, \"Update\", payload, jscall.user)\r\n        if (ret.Success == true){\r\n            return true\r\n        }\r\n    }\r\n    return false\r\n}\r\n"},{"Bizobj":{"ObjectName":"submitEinvoiceToPortal","Description":"Submit the E-Invoice to Portal","external":true,"input_struct":"","out_success":"","out_fail":""},"Script":"//**** Business Object submitEinvoiceToPortal Created by malai on 24-Apr-2024 11:17:26 ****//\r\n\r\nlet header_err_msg = \"\"\r\nlet line_err_msg = \"\"\r\nlet isSumbyQty = false\r\nvar einvois = require(\"./scripts/Business_Objects/createEinvoice\")\r\nvar consoCheck = require(\"./scripts/Business_Objects/conso_checking\")\r\nvar jsoncmp = require(\"./scripts/Business_Objects/json_sumqty_by_item\")\r\n// var jsoncmp = require(\"./scripts/Business_Objects/json_sumby_qty\")\r\n\r\nfunction submit_einv_to_portal(){\r\n    CralUtil.LogInfo(\"Einvois Input\", \"InvoiceCreation\", jscall.input)\r\n    entity_ds = CralDB.QueryByComp(`select sum_line250,sum_lineb250 from {{entity_data_set}} where sup_company=${jscall.input.comp} and data_set='${jscall.input.dataset}'`, jscall.company)\r\n    if (entity_ds.length == 0){\r\n        jscall_error = `Entity Data Set is Not Maintained for ${jscall.input.comp} - ${jscall.input.dataset}`\r\n        CralUtil.LogInfo(\"Einvois Output\", \"\", jscall_error)\r\n        return false;\r\n    } else {\r\n        if (entity_ds[0].sum_lineb250 == true && jscall.input.line_cnt <= 250){\r\n            jscall.input.e_inv_no = jscall.input.tran + jscall.input.idoc.toString()\r\n            jscall.input.lines.forEach(line => {\r\n                line.e_inv_no = jscall.input.e_inv_no\r\n            })\r\n            comp_result = jsoncmp.sum_quantity_by_item(jscall.input)\r\n            CralUtil.LogInfo(\"AfterCompress\", \"Invoice\", comp_result)\r\n            if (comp_result.result){\r\n                jscall.input = comp_result.object\r\n                isSumbyQty = true\r\n            } else {\r\n                jscall_error = \"Unable to perform Sum by Quantity and Item.\"\r\n                CralUtil.LogInfo(\"Einvois Output\", \"Invoice\", jscall_error)\r\n                return false\r\n            }\r\n            CralUtil.LogInfo(\"InputAfterJsonCompress\", \"Invoice\", jscall.input)\r\n        } else {\r\n            if (entity_ds[0].sum_line250 == true && jscall.input.line_cnt > 250){\r\n                jscall.input.e_inv_no = jscall.input.tran + jscall.input.idoc.toString()\r\n                jscall.input.lines.forEach(line => {\r\n                    line.e_inv_no = jscall.input.e_inv_no\r\n                })\r\n                comp_result = jsoncmp.sum_quantity_by_item(jscall.input)\r\n                if (comp_result.result){\r\n                    jscall.input = comp_result.object\r\n                    isSumbyQty = true\r\n                } else {\r\n                    jscall_error = \"Unable to perform Sum by Quantity and Item.\"\r\n                    CralUtil.LogInfo(\"Einvois Output\", \"Invoice\", jscall_error)\r\n                    return false\r\n                }\r\n            }\r\n        }\r\n    }\r\n    if (jscall.input.doct == \"\" || jscall.input.doct == null || jscall.input.doct == undefined){\r\n        jscall_error = \"Document Type is Mandatory\"\r\n        CralUtil.LogInfo(\"Einvois Output\", \"\", jscall_error)\r\n        return false;\r\n    }\r\n    document_Type = einvois.get_doc_type(jscall.input.doct)\r\n    if (document_Type == \"\"){\r\n        jscall_error = \"Unmapped or Invalid Document Type\"\r\n        CralUtil.LogInfo(\"Einvois Output\", \"\", jscall_error)\r\n        return false;\r\n    }\r\n    if (GetInvImpStatus(document_Type) != true){\r\n        jscall_error = \"Document Type Not Implemented.\"\r\n        CralUtil.LogInfo(\"Einvois Output\", \"\", jscall_error)\r\n        return false;\r\n    }\r\n    if (jscall.input.line_cnt == 0 || jscall.input.lines?.length == 0){\r\n        jscall_error = \"Lines is Empty.\"\r\n        CralUtil.LogInfo(\"Einvois Output\", \"\", jscall_error)\r\n        return false\r\n    }\r\n    if (document_Type == \"11\" || document_Type == \"12\"){\r\n        if (jscall.input.styp.toUpperCase() == \"LOCAL\"){\r\n            sb_imp = CralDB.QueryByComp(\"select src_tran_type from {{self_billed}} where src_tran_type='$1' and active=true and delf=false\", jscall.company, jscall.input.tran)\r\n            if (sb_imp.length == 0){\r\n                jscall_error = \"Transaction Type not defined in Self E-Invois\";\r\n                CralUtil.LogInfo(\"Einvois Output\", \"\", jscall_error)\r\n                // return false;\r\n                return{\r\n                    \"resend\":false\r\n                }\r\n            }\r\n        }\r\n    }\r\n    isConsoInv = CheckConsoInv(jscall.input.doct)\r\n    if (isConsoInv == true){\r\n        // return CreateConsoInvoice()\r\n        inv_out = CreateConsoInvoice()\r\n        inv_out[\"SumByQty\"] = isSumbyQty\r\n        // println(\"E-Invois Output(Consolidated Invoice): \" + JSON.stringify(inv_out))\r\n        CralUtil.LogInfo(\"Einvois Output\", \"Consolidated Invoice\", inv_out)\r\n        return inv_out\r\n    } else {\r\n        // if (jscall.input.line_cnt > 120){\r\n        //     return CreateEInvoiceMultipleHeaders()\r\n        // } else {\r\n            // return CreateEInvoice()\r\n            inv_out = CreateEInvoice()\r\n            // println(\"E-Invois Output: \" + JSON.stringify(inv_out))\r\n            inv_out[\"SumByQty\"] = isSumbyQty\r\n            CralUtil.LogInfo(\"Einvois Output\", \"Invoice Created Successfully\", inv_out)\r\n            return inv_out\r\n        // }\r\n    }\r\n    // return header_result\r\n}\r\n\r\nfunction CreateEInvoice(){\r\n    header_result = insert_header()\r\n    println(\"Creating E-Invoice...\")\r\n    // header_result = einvoice.insert_header()\r\n    check_error = GetInsertErrorMessage(header_result, jscall.input.comp, jscall.input.tran, jscall.input.idoc, 0)\r\n    println(\"Header Inserted\")\r\n    println(JSON.stringify(check_error))\r\n    if (check_error.Status == true){\r\n        println(\"IN\")\r\n        if (header_result.Message.ccur == \"\" || header_result.Message.ccur == null || header_result.Message.ccur == undefined){\r\n            einvois.CreateValidation(header_result.Message.e_inv_no, 0, \"10\", \"MAP\", \"Unmapped Currency Code\", \"Invoice.Map\", \"ccur\", jscall.input.ccur)\r\n        }\r\n        if (header_result.Message.cvat == \"\" || header_result.Message.cvat == null || header_result.Message.cvat == undefined){\r\n            einvois.CreateValidation(header_result.Message.e_inv_no, 0, \"10\", \"MAP\", \"Unmapped Tax Code\", \"Invoice.Map\", \"cvat\", jscall.input.cvat)\r\n        }\r\n        println(\"Before Line Inserting\")\r\n        header_result.Lines = insert_multiple_lines(jscall.input.lines, \"einv_lines\", header_result.Message.e_inv_no)\r\n        println(\"Output To LN: \" + JSON.stringify(header_result))\r\n        println(\"Invoice Inserted Successfully \" + header_result.Message.e_inv_no)\r\n        // if (einvois.check_validations(header_result.Message.e_inv_no) == true){\r\n        //     println(\"Validation Pass\")\r\n        //     debug(\"Validation Pass\")\r\n        //     if (header_result.Message.sctg == \"10\"){\r\n        //         einvois.submitEinvoiceToLHDN(header_result.Message.e_inv_no)\r\n        //         return header_result\r\n        //         // Moved to Function on Sept.5 \r\n        //         // var doc_json = einvois.BuildJSONFormat(header_result.Message.e_inv_no)\r\n        //         // println(\"After Doc\")\r\n        //         // if (typeof doc_json == \"string\"){\r\n        //         //     println(\"Error Doc\")\r\n        //         //     einvois.CreatePortalValidation(header_result.Message.e_inv_no, 0, doc_json, \"\")\r\n        //         //     return header_result\r\n        //         // } else {\r\n        //         //     // Convert JSON to XML and hash the doc to string.\r\n        //         //     println(\"Success Doc\")\r\n        //         //     submission_ret = einvois.SubmitTOLHDN(doc_json.document, doc_json.InvoiceCodeNumber)\r\n        //         //     if (submission_ret == false){\r\n        //         //         return header_result\r\n        //         //     } else {\r\n        //         //         sub_data = einvois.SubmissionUpdate(submission_ret)\r\n        //         //         return header_result\r\n        //         //     }\r\n        //         // }\r\n        //     }\r\n        // }\r\n        // println(\"Validation Fail\")\r\n        // debug(\"Validation Fail\")\r\n        return header_result\r\n    } else {\r\n        return check_error.Result\r\n    }\r\n}\r\n\r\nfunction CreateConsoInvoice(){\r\n    conso_header = insert_conso_header()\r\n    check_error = GetInsertErrorMessage(conso_header, jscall.input.comp, jscall.input.tran, jscall.input.idoc, 0)\r\n    if (check_error.Status == true){\r\n        conso_header.Lines = insert_multiple_lines(jscall.input.lines, \"conso_line\", \"\")\r\n        return conso_header\r\n    }\r\n    return check_error.Result\r\n}\r\n\r\nfunction CreateEInvoiceMultipleHeaders(){\r\n    header_result = []\r\n    line_results = []\r\n    // src_header = einvoice.insert_header()\r\n    src_header = insert_header()\r\n    check_error = GetInsertErrorMessage(src_header, jscall.input.comp, jscall.input.tran, jscall.input.idoc, 0)\r\n    if (check_error.Status == true){\r\n        total_headers = parseInt(jscall.input.line_cnt/120) + 1\r\n        start_line = 0;\r\n        end_line = 120;\r\n        for (i = 1; i < total_headers; i++){\r\n            temp_lines = jscall.input.lines.slice(start_line, end_line)\r\n            head_num_str = i.toString()\r\n            insert_result = insert_header()\r\n            // insert_result = einvoice.insert_header()\r\n            insert_error = GetInsertErrorMessage(insert_result, jscall.input.comp, jscall.input.tran, jscall.input.idoc, 0)\r\n            if (insert_error.Status == true){\r\n                temp_line_result = insert_multiple_lines(temp_lines, \"einv_lines\", insert_result.Message.e_inv_no)\r\n                Array.prototype.push.apply(line_results, temp_line_result)\r\n            } else {\r\n                ret = CralDB.PublishTopic(\"einv_header\", jscall.company, \"Delete\", jscall.input, jscall.user)\r\n                return insert_error.Result\r\n            }\r\n            start_line = end_line;\r\n            end_line = (i == total_headers)?(jscall.input.lines.length - 1):(end_line + 120)\r\n        }\r\n        src_header.Lines = line_results\r\n        return src_header\r\n    } else {\r\n        return check_error.Result\r\n    }\r\n}\r\n\r\nfunction submit_mlines_to_portal(){\r\n    header_data = CralDB.QueryByComp(\"select * from {{einv_header}} where comp=$1 and tran='$2' and idoc=$3 and src_type='$4'\", jscall.company, jscall.input.comp.toString(), jscall.input.tran, jscall.input.idoc.toString(), einvois.get_src_inv_type(jscall.input.src_type))\r\n    if (header_data.length == 0){\r\n        conso_data = CralDB.QueryByComp(\"select * from {{conso_header}} where comp=$1 and tran='$2' and idoc=$3 and src_type='$4'\", jscall.company, jscall.input.comp.toString(), jscall.input.tran, jscall.input.idoc.toString(), einvois.get_src_inv_type(jscall.input.src_type))\r\n        if (conso_data.length == 0){\r\n            jscall_error = \"Header Not Found in Portal.\"\r\n            return false\r\n        } else {\r\n            println(\"Inserting Missing Lines\")\r\n            line_results = insert_multiple_lines(jscall.input.lines, \"conso_line\", \"\")\r\n        }\r\n    } else {\r\n        missing_lines = []\r\n        for (i=0;i<jscall.input.lines.length;i++){\r\n            isAvil = CralDB.QueryByComp(\"select line from {{einv_lines}} where e_inv_no='$1' and line=$2\", jscall.company, header_data[0].e_inv_no, jscall.input.lines[i].line)\r\n            if (isAvil.length == 0){\r\n                missing_lines.push(jscall.input.lines[i])\r\n            }\r\n        }\r\n        line_results = insert_multiple_lines(missing_lines, \"einv_lines\", header_data[0].e_inv_no)\r\n        // line_results = insert_multiple_lines(jscall.input.lines, \"einv_lines\", header_data[0].e_inv_no)\r\n        // Go to Check Validation...\r\n    }\r\n    return {\r\n        \"Lines\": line_results\r\n    }\r\n}\r\n\r\nfunction insert_multiple_lines(array_lines, table_code, einvNumber){\r\n    line_results = []\r\n    println(\"Inserting Line\")\r\n    for ( i = 0; i < array_lines.length; i++){\r\n        line_result = insert_line(array_lines[i], table_code, einvNumber)\r\n        check_error = GetInsertErrorMessage(line_result, array_lines[i].comp, array_lines[i].tran, array_lines[i].idoc, array_lines[i].line)\r\n        if (table_code == \"einv_lines\" && check_error.Status == true){\r\n            println(\"Line Inserted Successfully\")\r\n            if (line_result.Message.cvat == \"\" || line_result.Message.cvat == undefined || line_result.Message.cvat == null){\r\n                einvois.CreateValidation(einvNumber, array_lines[i].line, \"10\", \"MAP\", \"Unmapped Tax Code\", \"InvoiceLine.Map\", \"cvat\", array_lines[i].cvat)\r\n            }\r\n            if (line_result.Message.clas == \"\" || line_result.Message.clas == undefined || line_result.Message.clas == null){\r\n                einvois.CreateValidation(einvNumber, array_lines[i].line, \"10\", \"MAP\", \"Unmapped Classification Code\", \"InvoiceLine.Map\", \"clas\", array_lines[i].clas)\r\n            }\r\n            println(\"After Map Validations\")\r\n        }\r\n        line_results.push(check_error.Result)\r\n    }\r\n    return line_results\r\n}\r\n\r\nfunction GetInsertErrorMessage(result, comp, tran, idoc, line){\r\n    if (typeof result == \"string\"){\r\n        return {\r\n            \"Status\": false,\r\n            \"Result\": {\r\n                \"comp\": comp,\r\n                \"tran\": tran,\r\n                \"idoc\": idoc,\r\n                \"line\": line,\r\n                \"Message\": result,\r\n                \"Success\":false\r\n            }\r\n        }\r\n    } else {\r\n        if (result.Success == false){\r\n            result.comp = comp\r\n            result.tran = tran\r\n            result.idoc = idoc\r\n            result.line = line\r\n            return {\r\n                \"Status\": false,\r\n                \"Result\": result\r\n            }\r\n        } else {\r\n            return {\r\n                \"Status\": true,\r\n                \"Result\": result\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nfunction GetInvImpStatus(inv_type){\r\n    switch (inv_type){\r\n        case \"01\":\r\n            // CralDB.QueryByComp(\"select imp_inv from {{einv_implementation}}\", jscall.company)\r\n            fld_name = \"imp_inv\"\r\n            break;\r\n        case \"02\":\r\n            fld_name = \"imp_crd_nt\"\r\n            break;\r\n        case \"11\":\r\n            fld_name = \"imp_slf_inv\"\r\n            break;\r\n        case \"12\":\r\n            fld_name = \"imp_slf_crd_nt\"\r\n            break;\r\n        default:\r\n            return false\r\n    }\r\n    imp_data = CralDB.QueryByComp(\"select \" + fld_name + \" from {{einv_implementation}}\", jscall.company)\r\n    if (imp_data.length == 0){\r\n        return false;\r\n    }\r\n    return imp_data[0][fld_name]\r\n}\r\n// function test_conso_check(){\r\n//     return CheckConsoInv(jscall.input.doct)\r\n// }\r\nfunction CheckConsoInv(docType){\r\n    println(\"Checking Conso......\")\r\n    imp_data = CralDB.QueryByComp(\"select consolidation from {{einv_implementation}}\", jscall.company)\r\n    // println(JSON.stringify(imp_data))\r\n    if (imp_data.length == 0){\r\n        return false\r\n    }\r\n    if (imp_data[0].consolidation == true){\r\n        srcType = einvois.get_src_inv_type(jscall.input.src_type)\r\n\r\n        // Additional Checking for Consolidation\r\n        if (einvois.get_doc_type(docType)==='01'){  // Only Invoices is Allowed for Consolidation.\r\n            if (consoCheck.checkConsoInvoice({\r\n                ...jscall.input,\r\n                doct : einvois.get_doc_type(docType),\r\n                src_type: srcType\r\n            })){\r\n                return true\r\n            }\r\n        }\r\n        // If the Criteria from conso_parameter becomes true then conso is created. \r\n\r\n        println(srcType)\r\n        // if (docType == \"01\"){ //Invoice or Sales Invoice\r\n        println(docType)\r\n        // if (docType.toUpperCase() == \"INVOICE\"){\r\n        //     switch (srcType){\r\n        //         case \"20\": //Sales Order\r\n        //             conso_fld = \"conso_sls\"\r\n        //             list_name = \"conso_sls_list\"\r\n        //             // get_conso_data = CralDB.QueryByComp(\"select conso_sls from {{conso_filing}} where comp=$1\", jscall.company, jscall.company)\r\n        //         break;\r\n        //         case \"10\": // Manual Sales\r\n        //             conso_fld = \"conso_man_sls\"\r\n        //             list_name = \"conso_man_sls_list\"\r\n        //         break;\r\n        //         default:\r\n        //         return false;\r\n        //         break;\r\n        //     }\r\n        // } else {\r\n        //     if (docType.toUpperCase() == \"SALES INVOICE\" && srcType == \"40\"){ //Sales Invoice\r\n        //         conso_fld = \"conso_acr\"\r\n        //         list_name = \"conso_acr_list\"\r\n        //     } else {\r\n        //         return false;\r\n        //     }\r\n        // }\r\n        if (docType.toUpperCase() == \"INVOICE\" || docType.toUpperCase() == \"SALES INVOICE\"){\r\n            switch (srcType){\r\n                case \"20\": //Sales Order\r\n                    conso_fld = \"conso_sls\"\r\n                    list_name = \"conso_sls_list\"\r\n                    // get_conso_data = CralDB.QueryByComp(\"select conso_sls from {{conso_filing}} where comp=$1\", jscall.company, jscall.company)\r\n                break;\r\n                case \"10\": // Manual Sales\r\n                    conso_fld = \"conso_man_sls\"\r\n                    list_name = \"conso_man_sls_list\"\r\n                break;\r\n                case \"40\":\r\n                    conso_fld = \"conso_acr\"\r\n                    list_name = \"conso_acr_list\"\r\n                break;\r\n                default:\r\n                return false;\r\n                break;\r\n            }\r\n        } else {\r\n            return false;\r\n        }\r\n        get_conso_data = CralDB.QueryByComp(\"select \" + conso_fld + \" from {{conso_filing}} where comp=$1\", jscall.company, jscall.input.comp)\r\n        // println(JSON.stringify(get_conso_data))\r\n        if (get_conso_data.length != 0){\r\n            println(CralUtil.GetListDesc(list_name, get_conso_data[0][conso_fld]))\r\n            switch (CralUtil.GetListDesc(list_name, get_conso_data[0][conso_fld]).toUpperCase()){\r\n                case \"BUYER\":\r\n                    println(jscall.input.inv_bp)\r\n                    if (jscall.input.inv_bp != undefined && jscall.input.inv_bp != null && jscall.input.inv_bp != \"\"){\r\n                        conso_data = CralDB.QueryByComp(\"select count(buy_code) from {{buyer_companies}} where buy_code='$1' and conso_buyer=true and data_set='$2'\", jscall.company, jscall.input.inv_bp, jscall.input.dataset)\r\n                        println(JSON.stringify(conso_data))\r\n                        // if (CralDB.QueryByComp(\"select buy_code from {{buyer_companies}} where buy_code='$1'\", jscall.company, jscall.input.itbp).length != 0){\r\n                        //     return true;\r\n                        // }\r\n                    } else {\r\n                        return false;\r\n                    }\r\n                break;\r\n                case \"ORDER TYPE\":\r\n                    if (jscall.input.ord_typ != undefined && jscall.input.ord_typ != null && jscall.input.ord_typ != \"\"){\r\n                        conso_data = CralDB.QueryByComp(\"select count(ord_typ) from {{conso_ord_type}} where ord_typ='$1' and data_set='$2'\", jscall.company, jscall.input.ord_typ, jscall.input.dataset)\r\n                    } else {\r\n                        return false;\r\n                    }\r\n                break;\r\n                case \"SERIES\":\r\n                    if (jscall.input.ngrp != undefined && jscall.input.ngrp != null && jscall.input.ngrp != \"\" && jscall.input.seri != undefined && jscall.input.seri != null && jscall.input.seri != \"\"){\r\n                        conso_data = CralDB.QueryByComp(\"select count(seri) from {{conso_sls_seri}} where ngrp='$1' and seri='$2' and data_set='$3'\", jscall.company, jscall.input.ngrp, jscall.input.seri, jscall.input.dataset)\r\n                    } else {\r\n                        return false;\r\n                    }\r\n                break;\r\n                case \"SALES OFFICE\":\r\n                    if (jscall.input.sls_ofc != undefined && jscall.input.sls_ofc != null && jscall.input.sls_ofc != \"\"){\r\n                        conso_data = CralDB.QueryByComp(\"select count(sls_ofc) from {{conso_sls_off}} where sls_ofc='$1' and data_set='$2'\", jscall.company, jscall.input.sls_ofc, jscall.input.dataset)\r\n                    } else {\r\n                        return false;\r\n                    }\r\n                break;\r\n                case \"MANUAL ID\":\r\n                    println(jscall.input.ngrp)\r\n                    println(jscall.input.seri)\r\n                    if (jscall.input.ngrp != undefined && jscall.input.ngrp != null && jscall.input.ngrp != \"\" && jscall.input.seri != undefined && jscall.input.seri != null && jscall.input.seri != \"\"){\r\n                        conso_data = CralDB.QueryByComp(\"select count(seri) from {{conso_man_id}} where ngrp='$1' and seri='$2' and data_set='$3'\", jscall.company, jscall.input.ngrp, jscall.input.seri, jscall.input.dataset)\r\n                    } else {\r\n                        return false;\r\n                    }\r\n                break;\r\n                case \"TRANSACTION TYPE\":\r\n                    println(jscall.input.tran)\r\n                    if (jscall.input.tran != undefined && jscall.input.tran != null && jscall.input.tran != \"\"){\r\n                        conso_data = CralDB.QueryByComp(\"select count(conso_tran_type) from {{conso_tran_types}} where conso_tran_type='$1' and data_set='$2'\", jscall.company, jscall.input.tran, jscall.input.dataset)\r\n                    } else {\r\n                        return false;\r\n                    }\r\n                break;\r\n                default:\r\n                    return false;\r\n                break;\r\n            }\r\n            if (conso_data[0].count != 0){\r\n                return true;\r\n            } else {\r\n                return false;\r\n            }\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n    return false\r\n}\r\n\r\nfunction insert_header(){\r\n    header_err_msg = \"\"\r\n    temp_doct = einvois.get_doc_type(jscall.input.doct)\r\n    // if (temp_doct == \"\"){\r\n    //     header_err_msg = write_err_msg(header_err_msg, \"Document Type\")\r\n    // }\r\n    temp_ccur = einvois.get_ccur(jscall.input.ccur, jscall.input.dataset)\r\n    // if (temp_ccur == \"\"){\r\n    //     header_err_msg = write_err_msg(header_err_msg, \"Currency Code\")\r\n    // }\r\n    temp_paym = einvois.get_paym(jscall.input.paym, jscall.input.dataset)\r\n    // if (temp_paym == \"\"){\r\n    //     // header_err_msg = write_err_msg(header_err_msg, \"Payment Mode\")\r\n    // }\r\n    temp_cvat = einvois.get_cvat(jscall.input.cvat, jscall.input.dataset)\r\n    // if (temp_cvat == \"\"){\r\n    //     header_err_msg = write_err_msg(header_err_msg, \"Tax Code\")\r\n    // }\r\n\r\n    switch(jscall.input.styp.toUpperCase()){\r\n        case \"LOCAL\":\r\n            sctg = \"10\"\r\n            break\r\n        case \"EXPORT\":\r\n            sctg = \"20\"\r\n            break\r\n        case \"IMPORT\":\r\n            sctg = \"30\"\r\n            break\r\n        default:\r\n            sctg = \"\"\r\n            break\r\n    }\r\n    sup_data = false\r\n    sup_adrs = false\r\n    buy_data = false\r\n    buy_adrs = false\r\n    ship_data = false\r\n    ship_adrs = false\r\n\r\n    supplier_data = CralDB.QueryByComp(\"select * from {{supplier_companies}} where sup_company=$1\", jscall.company, jscall.input.comp)\r\n    if (supplier_data.length != 0){\r\n        sup_data = true\r\n        supplier_address = CralDB.QueryByComp(\"select * from {{address_master}} where data_set='$1' and adrs_code='$2'\", jscall.company, jscall.input.dataset, supplier_data[0].sup_adrs)\r\n        if (supplier_address.length != 0){\r\n            sup_adrs = true\r\n        }\r\n    }\r\n\r\n    buyer_adrs = (jscall.input.buy_adrs != \"\" && jscall.input.buy_adrs != undefined && jscall.input.buy_adrs != null)?jscall.input.buy_adrs:\"\";\r\n    buyer_data = CralDB.QueryByComp(\"select * from {{buyer_companies}} where data_set='$1' and buy_code='$2'\", jscall.company, jscall.input.dataset, jscall.input.inv_bp)\r\n    if (buyer_data.length != 0){\r\n        buy_data = true\r\n        buyer_adrs = (buyer_adrs == \"\")?buyer_data[0].buy_adrs:buyer_adrs;\r\n        buyer_address = CralDB.QueryByComp(\"select * from {{address_master}} where data_set='$1' and adrs_code='$2'\", jscall.company, jscall.input.dataset, buyer_adrs)\r\n        if (buyer_address.length != 0){\r\n            buy_adrs = true\r\n        }\r\n    }\r\n\r\n    if (jscall.input.stbp != \"\" && jscall.input.stbp != undefined && jscall.input.stbp != null){\r\n        if (jscall.input.stbp != jscall.input.inv_bp){\r\n            shipper_data = CralDB.QueryByComp(\"select * from {{buyer_companies}} where data_set='$1' and buy_code='$2'\", jscall.company, jscall.input.dataset, jscall.input.stbp)\r\n            if (shipper_data.length == 0){\r\n                // ship_data = buy_data\r\n                // shipper_data = buyer_data\r\n            } else {\r\n                ship_data = true\r\n                if (jscall.input.sadr != \"\" && jscall.input.sadr != undefined && jscall.input.sadr != null){\r\n                    shipper_address = CralDB.QueryByComp(\"select * from {{address_master}} where data_set='$1' and adrs_code='$2'\", jscall.company, jscall.input.dataset, jscall.input.sadr)\r\n                    if (shipper_address.length != 0){\r\n                        ship_adrs = true\r\n                    }\r\n                } else {\r\n                    shipper_address = CralDB.QueryByComp(\"select * from {{address_master}} where data_set='$1' and adrs_code='$2'\", jscall.company, jscall.input.dataset, shipper_data[0].buy_adrs)\r\n                    if (shipper_address.length != 0){\r\n                        ship_adrs = true\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    supplier_name = (sup_data == false)?\"\":supplier_data[0].sup_name\r\n    supplier_cn = (sup_data == false)?\"\":supplier_data[0].sup_cont_num\r\n    supplier_email = (sup_data == false)?\"\":supplier_data[0].sup_email\r\n    supplier_sst = (sup_data == false)?\"\":supplier_data[0].sup_sst_reg\r\n    supplier_ttx = (sup_data == false)?\"\":supplier_data[0].sup_ttx_no\r\n    supplier_tin = (sup_data == false)?\"\":supplier_data[0].sup_tin\r\n    supplier_brn = (sup_data == false)?\"\":supplier_data[0].sup_reg_brn\r\n    supplier_nric = (sup_data == false)?\"\":supplier_data[0].sup_reg_nric\r\n    supplier_passport = (sup_data == false)?\"\":supplier_data[0].sup_reg_passport\r\n    supplier_army = (sup_data == false)?\"\":supplier_data[0].sup_reg_army\r\n    supplier_badsca = (sup_data == false)?\"\":supplier_data[0].sup_badsca\r\n    supplier_bacc = (sup_data == false)?\"\":supplier_data[0].sup_bank_acc\r\n    supplier_msic = (sup_data == false)?\"\":supplier_data[0].sup_msic\r\n\r\n    supplier_adrs = (sup_data == false)?\"\":supplier_data[0].sup_adrs\r\n    supplier_city = (sup_adrs == false)?\"\":supplier_address[0].adrs_city\r\n    supplier_pz = (sup_adrs == false)?\"\":supplier_address[0].postal_zone\r\n    supplier_l0 = (sup_adrs == false)?\"\":supplier_address[0].adrs_line0\r\n    supplier_l1 = (sup_adrs == false)?\"\":supplier_address[0].adrs_line1\r\n    supplier_l2 = (sup_adrs == false)?\"\":supplier_address[0].adrs_line2\r\n    let [sup_ccty, sup_cste] = einvois.get_country_state((sup_adrs == false)?\"\":supplier_address[0].adrs_country, (sup_adrs == false)?\"\":supplier_address[0].adrs_state, jscall.input.dataset)\r\n    \r\n    buy_name = (buy_data == false)?\"\":buyer_data[0].buy_name\r\n    buy_cont_num = (buy_data == false)?\"\":buyer_data[0].buy_cont_num\r\n    buy_email = (buy_data == false)?\"\":buyer_data[0].buy_email\r\n    buy_sst_reg = (buy_data == false)?\"\":buyer_data[0].buy_sst_reg\r\n    buy_tin = (buy_data == false)?\"\":buyer_data[0].buy_tin\r\n    buy_reg_brn = (buy_data == false)?\"\":buyer_data[0].buy_reg_brn\r\n    buy_reg_nric = (buy_data == false)?\"\":buyer_data[0].buy_reg_nric\r\n    buy_reg_passport =(buy_data == false)?\"\":buyer_data[0].buy_reg_passport \r\n    buy_reg_army = (buy_data == false)?\"\":buyer_data[0].buy_reg_army\r\n\r\n    buyer_city = (buy_adrs == false)?\"\":buyer_address[0].adrs_city\r\n    buyer_pz = (buy_adrs == false)?\"\":buyer_address[0].postal_zone\r\n    buyer_l0 = (buy_adrs == false)?\"\":buyer_address[0].adrs_line0\r\n    buyer_l1 = (buy_adrs == false)?\"\":buyer_address[0].adrs_line1\r\n    buyer_l2 = (buy_adrs == false)?\"\":buyer_address[0].adrs_line2\r\n    let [buy_ccty, buy_cste] = einvois.get_country_state((buy_adrs == false)?\"\":buyer_address[0].adrs_country, (buy_adrs == false)?\"\":buyer_address[0].adrs_state, jscall.input.dataset)\r\n    \r\n    shipper_name = (ship_data == false)?\"\":shipper_data[0].buy_name\r\n    shipper_tin = (ship_data == false)?\"\":shipper_data[0].buy_tin\r\n    shipper_brn = (ship_data == false)?\"\":shipper_data[0].buy_reg_brn\r\n    shipper_nric = (ship_data == false)?\"\":shipper_data[0].buy_reg_nric\r\n    shipper_passport = (ship_data == false)?\"\":shipper_data[0].buy_reg_passport\r\n    shipper_army = (ship_data == false)?\"\":shipper_data[0].buy_reg_army\r\n\r\n    shipper_city = (ship_adrs == false)?\"\":shipper_address[0].adrs_city\r\n    shipper_pz = (ship_adrs == false)?\"\":shipper_address[0].postal_zone\r\n    shipper_l0 = (ship_adrs == false)?\"\":shipper_address[0].adrs_line0\r\n    shipper_l1 = (ship_adrs == false)?\"\":shipper_address[0].adrs_line1\r\n    shipper_l2 = (ship_adrs == false)?\"\":shipper_address[0].adrs_line2\r\n    let [ship_ccty, ship_cste] = einvois.get_country_state((ship_adrs == false)?\"\":shipper_address[0].adrs_country, (ship_adrs == false)?\"\":shipper_address[0].adrs_state, jscall.input.dataset)\r\n    \r\n    self_inv = false\r\n    if (temp_doct == \"11\" || temp_doct == \"12\" || temp_doct == \"13\" || temp_doct == \"14\"){\r\n        self_inv = true\r\n    }\r\n\r\n    let org_e_inv_no =\"\"\r\n    let org_doc_uuid = \"\"\r\n    if (temp_doct != \"01\" && temp_doct != \"11\" && jscall.input.refDoc){\r\n        [org_e_inv_no, org_doc_uuid] = getOriginalDocumentReference(jscall.input.refDoc)\r\n    }\r\n    \r\n    header_data = {\r\n        \"comp\": jscall.input.comp,\r\n        \"tran\": jscall.input.tran,\r\n        \"idoc\": jscall.input.idoc,\r\n        \"doct\": temp_doct,\r\n        \"ccur\": temp_ccur,\r\n        \"paym\": temp_paym,\r\n        \"cvat\": temp_cvat,\r\n        \"sctg\": sctg,\r\n        \"dataset\": jscall.input.dataset,\r\n        \"line_cnt\": 0,\r\n        \"s_line_cnt\": jscall.input.line_cnt,\r\n        \"sup_code\": (self_inv == true)?jscall.input.inv_bp:jscall.input.comp,\r\n        \"sup_name\":         (self_inv == true)?buy_name:supplier_name,\r\n        \"sup_cont_num\":     (self_inv == true)?buy_cont_num:supplier_cn,\r\n        \"sup_email\":        (self_inv == true)?buy_email:supplier_email,\r\n        \"sup_sst_reg\":      (self_inv == true)?buy_sst_reg:supplier_sst,\r\n        \"sup_ttx_no\":       (self_inv == true)?(buy_data == false)?\"\":buyer_data[0].buy_ttx_reg:supplier_ttx,\r\n        \"sup_tin\":          (self_inv == true)?buy_tin:supplier_tin,\r\n        \"sup_reg_brn\":      (self_inv == true)?buy_reg_brn:supplier_brn,\r\n        \"sup_reg_nric\":     (self_inv == true)?buy_reg_nric:supplier_nric,\r\n        \"sup_reg_passport\": (self_inv == true)?buy_reg_passport:supplier_passport,\r\n        \"sup_reg_army\":     (self_inv == true)?buy_reg_army:supplier_army,\r\n        \"sup_badsca\":       (self_inv == true)?(buy_data == false)?\"\":buyer_data[0].buy_badsca:supplier_badsca,\r\n        \"sup_bank_acc\":     (self_inv == true)?\"\":supplier_bacc,\r\n        \"sup_msic\":         (self_inv == true)?(buy_data == false)?\"\":buyer_data[0].buy_msic:supplier_msic,\r\n        \"sup_adrs\":         (self_inv == true)?buyer_adrs:supplier_adrs,\r\n        \"sup_city\":         (self_inv == true)?buyer_city:supplier_city,\r\n        \"sup_postal_zone\":  (self_inv == true)?buyer_pz:supplier_pz,\r\n        \"sup_adrs_line0\":   (self_inv == true)?buyer_l0:supplier_l0,\r\n        \"sup_adrs_line1\":   (self_inv == true)?buyer_l1:supplier_l1,\r\n        \"sup_adrs_line2\":   (self_inv == true)?buyer_l2:supplier_l2,\r\n        \"sup_country\":      (self_inv == true)?buy_ccty:sup_ccty,\r\n        \"sup_cste\":         (self_inv == true)?buy_cste:sup_cste,\r\n        \"inv_bp\":           (self_inv == true)?jscall.input.comp:jscall.input.inv_bp,\r\n        \"buy_name\":         (self_inv == true)?supplier_name:buy_name,\r\n        \"buy_cont_num\":     (self_inv == true)?supplier_cn:buy_cont_num,\r\n        \"buy_email\":        (self_inv == true)?supplier_email:buy_email,\r\n        \"buy_sst_reg\":      (self_inv == true)?supplier_sst:buy_sst_reg,\r\n        \"buy_tin\":          (self_inv == true)?supplier_tin:buy_tin,\r\n        \"buy_reg_brn\":      (self_inv == true)?supplier_brn:buy_reg_brn,\r\n        \"buy_reg_nric\":     (self_inv == true)?supplier_nric:buy_reg_nric,\r\n        \"buy_reg_passport\": (self_inv == true)?supplier_passport:buy_reg_passport,\r\n        \"buy_reg_army\":     (self_inv == true)?supplier_army:buy_reg_army,\r\n        \"buy_adrs\": (self_inv == true)?supplier_adrs:buyer_adrs,\r\n        \"buy_city\":         (self_inv == true)?supplier_city:buyer_city,\r\n        \"buy_postal_zone\":  (self_inv == true)?supplier_pz:buyer_pz,\r\n        \"buy_adrs_line0\":   (self_inv == true)?supplier_l0:buyer_l0,\r\n        \"buy_adrs_line1\":   (self_inv == true)?supplier_l1:buyer_l1,\r\n        \"buy_adrs_line2\":   (self_inv == true)?supplier_l2:buyer_l2,\r\n        \"buy_country\":      (self_inv == true)?sup_ccty:buy_ccty,\r\n        \"buy_cste\":         (self_inv == true)?sup_cste:buy_cste,\r\n        \"dtrm\": jscall.input.dtrm,\r\n        \"ship_bp\": jscall.input.stbp,\r\n        \"ship_name\":        shipper_name,\r\n        \"ship_tin\":         shipper_tin,\r\n        \"ship_reg_brn\":     shipper_brn,\r\n        \"ship_reg_nric\":    shipper_nric,\r\n        \"ship_reg_passport\":shipper_passport,\r\n        \"ship_reg_army\":    shipper_army,\r\n        \"ship_adrs\": jscall.input.sadr,\r\n        \"ship_city\":        shipper_city,\r\n        \"ship_postal_zone\": shipper_pz,\r\n        \"ship_adrs_line0\":  shipper_l0,\r\n        \"ship_adrs_line1\":  shipper_l1,\r\n        \"ship_adrs_line2\":  shipper_l2,\r\n        \"ship_country\":     ship_ccty,\r\n        \"ship_cste\":        ship_cste,\r\n        // \"ship_bp\": (self_inv == true)?jscall.input.comp:jscall.input.stbp,\r\n        // \"ship_name\":        (self_inv == true)?supplier_name:shipper_name,\r\n        // \"ship_tin\":         (self_inv == true)?supplier_tin:shipper_tin,\r\n        // \"ship_reg_brn\":     (self_inv == true)?supplier_brn:shipper_brn,\r\n        // \"ship_reg_nric\":    (self_inv == true)?supplier_nric:shipper_nric,\r\n        // \"ship_reg_passport\":(self_inv == true)?supplier_passport:shipper_passport,\r\n        // \"ship_reg_army\":    (self_inv == true)?supplier_army:shipper_army,\r\n        // \"ship_adrs\": (self_inv == true)?supplier_adrs:jscall.input.sadr,\r\n        // \"ship_city\":        (self_inv == true)?supplier_city:shipper_city,\r\n        // \"ship_postal_zone\": (self_inv == true)?supplier_pz:shipper_pz,\r\n        // \"ship_adrs_line0\":  (self_inv == true)?supplier_l0:shipper_l0,\r\n        // \"ship_adrs_line1\":  (self_inv == true)?supplier_l1:shipper_l1,\r\n        // \"ship_adrs_line2\":  (self_inv == true)?supplier_l2:shipper_l2,\r\n        // \"ship_country\":     (self_inv == true)?sup_ccty:ship_ccty,\r\n        // \"ship_cste\":        (self_inv == true)?sup_cste:ship_cste,\r\n        \"frm1\": jscall.input.frm1,\r\n        \"frm2\": jscall.input.frm2,\r\n        \"rate\": jscall.input.rate,\r\n        \"tote\": jscall.input.tote,\r\n        \"toti\": jscall.input.toti,\r\n        \"tott\": jscall.input.tott,\r\n        \"pamt\": jscall.input.pamt,\r\n        // \"pydt\": \"YYYY-MM-DD\",\r\n        // \"pytm\": \"YYYY-MM-DD HH:MM\",\r\n        \"pref\": jscall.input.pref,\r\n        \"tpat\": jscall.input.tpat,\r\n        \"tnat\": jscall.input.tnat,\r\n        \"tdis\": jscall.input.tdis,\r\n        \"tfee\": jscall.input.tfee,\r\n        \"ramt\": jscall.input.ramt,\r\n        \"ttax\": jscall.input.ttax,\r\n        \"ttat\": jscall.input.ttat,\r\n        \"adis\": jscall.input.adis,\r\n        \"adis_reason\": \"\",\r\n        \"afee\": jscall.input.afee,\r\n        \"afee_reason\": \"\",\r\n        \"fbil\": jscall.input.fbil,\r\n        \"org_e_inv_no\": org_e_inv_no,\r\n        \"term\": jscall.input.term,\r\n        \"bref\": jscall.input.bref,\r\n        \"ftrd\": jscall.input.ftrd,\r\n        \"anum\": jscall.input.anum,\r\n        \"ochg\": jscall.input.ochg,\r\n        \"ochg_amnt\": jscall.input.ochg_amnt,\r\n        \"ochg_reason\": jscall.input.ochg_reason,\r\n        \"det_tax\": (jscall.input?.det_tax)?jscall.input.det_tax:\"\",\r\n        // \"bsdt\": \"YYYY-MM-DD\",\r\n        // \"bedt\": \"YYYY-MM-DD\",\r\n        \"amnt_ex\": (jscall.input?.amnt_ex)?jscall.input.amnt_ex:0,\r\n        \"dshp\": jscall.input.dshp,\r\n        \"submission_uid\": \"\",\r\n        \"doc_uuid\": \"\",\r\n        \"esta\": \"10\",\r\n        \"err_msg\": \"\",\r\n        // \"e_invdt\": getCurrentDateTime(),\r\n        \"einv_stat\": (sctg == \"20\" || sctg==\"30\")?\"10\":\"05\",\r\n        // \"etim\": \"YYYY-MM-DD HH:MM\",\r\n        \"modi_stat\": \"\",\r\n        \"src_type\": einvois.get_src_inv_type(jscall.input.src_type),\r\n        \"inv_pdf\": \"\",\r\n        \"reference0\": jscall.input.reference0 ? jscall.input.reference0 : \"\",\r\n        \"reference1\": jscall.input.reference1 ? jscall.input.reference1 : \"\",\r\n        \"reference2\": jscall.input.reference2 ? jscall.input.reference2 : \"\",\r\n        \"reference3\": jscall.input.reference3 ? jscall.input.reference3 : \"\",\r\n        \"reference4\": jscall.input.reference4 ? jscall.input.reference4 : \"\",\r\n        \"reference5\": jscall.input.reference5 ? jscall.input.reference5 : \"\",\r\n        \"reference6\": jscall.input.reference6 ? jscall.input.reference6 : \"\",\r\n        \"reference7\": jscall.input.reference7 ? jscall.input.reference7 : \"\",\r\n        \"reference8\": jscall.input.reference8 ? jscall.input.reference8 : \"\",\r\n        \"reference9\": jscall.input.reference9 ? jscall.input.reference9 : \"\",\r\n        \"qr_code\": \"\",\r\n        \"org_doc_uuid\": org_doc_uuid,\r\n        \"einv_version\": \"\"\r\n    }\r\n\r\n    // if (temp_doct == \"11\" || temp_doct == \"12\"){\r\n    //     [header_data[\"comp\"], header_data[\"inv_bp\"]] = [header_data[\"inv_bp\"], header_data[\"comp\"]]\r\n    //     [header_data[\"sup_adrs\"], header_data[\"buy_adrs\"]] = [header_data[\"buy_adrs\"], header_data[\"sup_adrs\"]]\r\n    // }\r\n    return CralDB.PublishTopic(\"einv_header\", jscall.company, \"Insert\", header_data, jscall.user)\r\n}\r\n\r\nfunction getOriginalDocumentReference(refDocNum){\r\n    let invoice_number = \"\"\r\n    let document_uuid = \"\"\r\n    let refDocs = refDocNum.split(\",\")\r\n    refDocs.forEach(data => {\r\n        cancel_rec = CralDB.QueryByComp(`select e_inv_no from {{cancel_header}} where adcn='${data}'`, jscall.company)\r\n        if (cancel_rec?.length){\r\n            invoice_number = cancel_rec[0].e_inv_no\r\n            org_document_uuid = CralDB.QueryByComp(`select doc_uuid from {{einv_header}} where e_inv_no='${cancel_rec[0].e_inv_no} and esta='30''`, jscall.company)\r\n            if (org_document_uuid?.length){\r\n                document_uuid = org_document_uuid[0].doc_uuid\r\n            }\r\n        }\r\n    })\r\n    return [invoice_number, document_uuid]\r\n}\r\nfunction insert_conso_header(){\r\n    header_err_msg = \"\"\r\n    temp_doct = einvois.get_doc_type(jscall.input.doct)\r\n    if (temp_doct == \"\"){\r\n        header_err_msg = write_err_msg(header_err_msg, \"Document Type\")\r\n    }\r\n    temp_ccur = einvois.get_ccur(jscall.input.ccur, jscall.input.dataset)\r\n    if (temp_ccur == \"\"){\r\n        header_err_msg = write_err_msg(header_err_msg, \"Currency Code\")\r\n    }\r\n    temp_paym = einvois.get_paym(jscall.input.paym, jscall.input.dataset)\r\n    if (temp_paym == \"\"){\r\n        // header_err_msg = write_err_msg(header_err_msg, \"Payment Mode\")\r\n    }\r\n    temp_cvat = einvois.get_cvat(jscall.input.cvat, jscall.input.dataset)\r\n    if (temp_cvat == \"\"){\r\n        header_err_msg = write_err_msg(header_err_msg, \"Tax Code\")\r\n    }\r\n    header_data = {\r\n        \"comp\": jscall.input.comp,\r\n        \"tran\": jscall.input.tran,\r\n        \"idoc\": jscall.input.idoc,\r\n        // \"line\": jscall.input.line,\r\n        \"doct\": temp_doct,\r\n        \"itbp\": jscall.input.inv_bp,\r\n        \"itoa\": jscall.input.buy_adrs,\r\n        \"ccur\": temp_ccur,\r\n        \"rate\": jscall.input.rate,\r\n        \"paym\": temp_paym,\r\n        \"term\": jscall.input.term,\r\n        \"tote\": jscall.input.tote,\r\n        \"toti\": jscall.input.toti,\r\n        \"tott\": jscall.input.tott,\r\n        \"cvat\": temp_cvat,\r\n        \"stbp\": jscall.input.stbp,\r\n        \"sadr\": jscall.input.sadr,\r\n        \"dtrm\": jscall.input.dtrm,\r\n        \"styp\": jscall.input.styp,\r\n        \"cein\": false,\r\n        \"disb\": false,\r\n        \"dshp\": false,\r\n        \"sinc\": false,\r\n        \"fbil\": jscall.input.fbil,\r\n        // \"bsdt\": jscall.input.bsdt,\r\n        // \"bedt\": jscall.input.bedt,\r\n        \"pamt\": jscall.input.pamt,\r\n        // \"pydt\": jscall.input.pydt,\r\n        // \"pytm\": jscall.input.pytm,\r\n        \"pref\": jscall.input.pref,\r\n        \"bref\": jscall.input.bref,\r\n        \"tpat\": jscall.input.tpat,\r\n        \"tnat\": jscall.input.tnat,\r\n        \"tdis\": jscall.input.tdis,\r\n        \"tfee\": jscall.input.tfee,\r\n        \"ramt\": jscall.input.ramt,\r\n        \"ttax\": jscall.input.ttax,\r\n        \"ttat\": jscall.input.ttat,\r\n        \"adis\": jscall.input.adis,\r\n        \"afee\": jscall.input.afee,\r\n        \"frm1\": jscall.input.frm1,\r\n        \"ftrd\": jscall.input.ftrd,\r\n        \"anum\": jscall.input.anum,\r\n        \"frm2\": jscall.input.frm2,\r\n        \"ochg\": jscall.input.ochg,\r\n        \"ochg_amnt\": jscall.input.ochg_amnt,\r\n        \"ochg_reason\": jscall.input.ochg_reason,\r\n        \"esta\": \"10\",\r\n        // \"etim\": jscall.input.etim,\r\n        \"submission_uid\": \"\",\r\n        \"err_msg\": \"\",\r\n        \"line_cnt\": 0,\r\n        \"trgt\": \"\",\r\n        \"val_err\": \"\",\r\n        \"cncl\": false,\r\n        \"det_tax\": jscall.input.det_tax, // Remove default value empty\r\n        \"amnt_ex\": 0,\r\n        \"e_invdt\": \"\",\r\n        \"src_type\": einvois.get_src_inv_type(jscall.input.src_type),\r\n        \"adis_reason\": \"\",\r\n        \"afee_reason\": \"\",\r\n        \"par_cncl\": false,\r\n        \"s_line_cnt\": jscall.input.line_cnt,\r\n        \"einv_stat\": \"10\",\r\n        \"conso_inv\": \"\",\r\n        \"inv_date\": getCurrentDateTime(),\r\n        \"data_set\": jscall.input.dataset,\r\n        \"inv_no\": \"\"\r\n    }\r\n    return CralDB.PublishTopic(\"conso_header\", jscall.company, \"Insert\", header_data, jscall.user)\r\n}\r\n\r\nfunction insert_line(input_data, table_name, einvNumber){\r\n    line_err_msg = \"\"\r\n    \r\n    temp_cvat = einvois.get_cvat(input_data.cvat, jscall.input.dataset)\r\n    if (temp_cvat == \"\"){\r\n        line_err_msg = write_err_msg(line_err_msg, \"Tax Code\")\r\n    }\r\n    \r\n    // temp_ccty = einvois.get_ccty(input_data.ccty)\r\n    // if (temp_ccty == \"\"){\r\n    //     // line_err_msg = write_err_msg(line_err_msg, \"Country Code\")\r\n    // }\r\n    temp_clas = einvois.get_clas(input_data.clas, jscall.input.dataset)\r\n    if (temp_clas == \"\"){\r\n        line_err_msg = write_err_msg(line_err_msg, \"Classification Code\")\r\n    }\r\n    if (table_name == \"einv_lines\"){\r\n        line_data = {\r\n            \"e_inv_no\": einvNumber,\r\n            \"line\": input_data.line,\r\n            \"cuni\": einvois.get_cuni(input_data.cuni, jscall.input.dataset),\r\n            \"ccty\": einvois.get_ccty(input_data.ccty, jscall.input.dataset),\r\n            \"clas_grp\": einvois.getClassificationGroup(),\r\n            \"clas\": temp_clas,\r\n            \"item\": input_data.item,\r\n            \"item_desc\": input_data.item_desc,\r\n            \"pric\": input_data.pric,\r\n            \"pvat\": input_data.pvat,\r\n            \"txai\": input_data.txai,\r\n            \"ceno\": input_data.ceno,\r\n            \"amtt\": input_data.amtt,\r\n            \"stot\": input_data.stot,\r\n            \"amti\": input_data.amti,\r\n            \"dqua\": input_data.dqua,\r\n            \"disc\": input_data.disc,\r\n            \"ldai\": input_data.ldai,\r\n            \"ccde\": input_data.ccde,\r\n            \"feer\": input_data.feer,\r\n            \"feea\": input_data.feea,\r\n            \"disc_reason\": (input_data?.disc_reason)?input_data.disc_reason:\"\",\r\n            \"fee_reason\": (input_data?.fee_reason)?input_data.fee_reason:\"\",\r\n            \"err_msg\": \"\",  \r\n            \"lsta\": \"10\",\r\n            \"modi_lsta\": \"\",\r\n            \"cvat\": temp_cvat,\r\n            \"reference0\":  input_data.reference0 ?  input_data.reference0 : \"\",\r\n            \"reference1\":  input_data.reference1 ?  input_data.reference1 : \"\",\r\n            \"reference2\":  input_data.reference2 ?  input_data.reference2 : \"\",\r\n            \"reference3\":  input_data.reference3 ?  input_data.reference3 : \"\",\r\n            \"reference4\":  input_data.reference4 ?  input_data.reference4 : \"\",\r\n            \"reference5\":  input_data.reference5 ?  input_data.reference5 : \"\",\r\n            \"reference6\":  input_data.reference6 ?  input_data.reference6 : \"\",\r\n            \"reference7\":  input_data.reference7 ?  input_data.reference7 : \"\",\r\n            \"reference8\":  input_data.reference8 ?  input_data.reference8 : \"\",\r\n            \"reference9\":  input_data.reference9 ?  input_data.reference9 : \"\",\r\n            \"reference10\": input_data.reference10 ? input_data.reference10 : \"\",\r\n            \"reference11\": input_data.reference11 ? input_data.reference11 : \"\",\r\n            \"reference12\": input_data.reference12 ? input_data.reference12 : \"\",\r\n            \"reference13\": input_data.reference13 ? input_data.reference13 : \"\",\r\n            \"reference14\": input_data.reference14 ? input_data.reference14 : \"\",\r\n            \"reference15\": input_data.reference15 ? input_data.reference15 : \"\",\r\n            \"reference16\": input_data.reference16 ? input_data.reference16 : \"\",\r\n            \"reference17\": input_data.reference17 ? input_data.reference17 : \"\",\r\n            \"reference18\": input_data.reference18 ? input_data.reference18 : \"\",\r\n            \"reference19\": input_data.reference19 ? input_data.reference19 : \"\",\r\n            \"reference20\": input_data.reference20 ? input_data.reference20 : \"\"\r\n        }\r\n    } else {\r\n        line_data = {\r\n            \"comp\": input_data.comp,\r\n            \"tran\": input_data.tran,\r\n            // \"doct\": temp_doct,\r\n            \"idoc\": input_data.idoc,\r\n            \"line\": input_data.line,\r\n            \"item\": input_data.item,\r\n            \"item_desc\": input_data.item_desc,\r\n            \"pric\": input_data.pric,\r\n            \"cvat\": temp_cvat,\r\n            \"pvat\": input_data.pvat,\r\n            \"txai\": input_data.txai,\r\n            \"ceno\": input_data.ceno,\r\n            \"amtt\": input_data.amtt,\r\n            \"stot\": input_data.stot,\r\n            \"amti\": input_data.amti,\r\n            \"dqua\": input_data.dqua,\r\n            \"cuni\": einvois.get_cuni(input_data.cuni, jscall.input.dataset),\r\n            \"disc\": input_data.disc,\r\n            \"ldai\": input_data.ldai,\r\n            \"ccde\": input_data.ccde,\r\n            \"ccty\": einvois.get_ccty(input_data.ccty, jscall.input.dataset),\r\n            \"clas\": temp_clas,\r\n            \"feer\": input_data.feer,\r\n            \"feea\": input_data.feea,\r\n            \"err_msg\": line_err_msg,\r\n            \"lsta\":\"10\",\r\n            // \"cncl\": false,\r\n            \"disc_reason\": \"\",\r\n            \"fee_reason\": \"\"\r\n        }\r\n    }\r\n    return CralDB.PublishTopic(table_name, jscall.company, \"Insert\", line_data, jscall.user)\r\n}\r\n\r\nfunction write_err_msg(err_msg, err_code){\r\n    if (err_msg == \"\"){\r\n        err_msg = \"Code Validation Failed for \" + err_code\r\n    } else {\r\n        err_msg = err_msg + \", \" + err_code\r\n    }\r\n    return err_msg\r\n}\r\n\r\nfunction getCurrentDateTime() {\r\n    let now = new Date();\r\n    let year = now.getUTCFullYear();\r\n    let month = String(now.getUTCMonth() + 1).padStart(2, '0');\r\n    let day = String(now.getUTCDate()).padStart(2, '0');\r\n    let hours = String(now.getUTCHours()).padStart(2, '0');\r\n    let minutes = String(now.getUTCMinutes()).padStart(2, '0');\r\n    let seconds = String(now.getUTCSeconds()).padStart(2, '0');\r\n    return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}Z`;\r\n}"}],"Roles":null,"DataSets":null,"Screens":null,"EmailTemplates":null,"Lists":[{"List":{"ListID":"einv_status","ListName":"E-Invoice Status","Items":{"Items":[{"Value":"10","Label":"For Filing"},{"Value":"20","Label":"Submitted"},{"Value":"30","Label":"Valid"},{"Value":"40","Label":"Invalid"},{"Value":"50","Label":"Cancelled"},{"Value":"60","Label":"Error"},{"Value":"05","Label":"Pending For Submission"}]}}}],"Reports":null}