{"ExportedSolution":{"SolutionID":"1.004","Description":"1.004_Monthly_revision","Status":"Created","CreatedTime":"2025-01-02T13:10:23.85598+08:00","ExportedTime":"0001-01-01T06:55:25+06:55","LastUpdated":"0001-01-01T06:55:25+06:55","CreatedUser":"api_user","UpdatedUser":"","ExportedUser":"","ExportComponents":[{"SolutionID":"1.004","ComponentType":"BusinessObject","ComponentID":"addLayout"},{"SolutionID":"1.004","ComponentType":"BusinessObject","ComponentID":"cancelInvoice"},{"SolutionID":"1.004","ComponentType":"BusinessObject","ComponentID":"commonBO"},{"SolutionID":"1.004","ComponentType":"BusinessObject","ComponentID":"conso_checking"},{"SolutionID":"1.004","ComponentType":"BusinessObject","ComponentID":"consolidation"},{"SolutionID":"1.004","ComponentType":"BusinessObject","ComponentID":"docUpload"},{"SolutionID":"1.004","ComponentType":"BusinessObject","ComponentID":"excel_data"},{"SolutionID":"1.004","ComponentType":"BusinessObject","ComponentID":"generate_report"},{"SolutionID":"1.004","ComponentType":"BusinessObject","ComponentID":"getInvDocs"},{"SolutionID":"1.004","ComponentType":"BusinessObject","ComponentID":"initializeUserGroup"},{"SolutionID":"1.004","ComponentType":"BusinessObject","ComponentID":"printReport"},{"SolutionID":"1.004","ComponentType":"BusinessObject","ComponentID":"submitEinvoiceToPortal"},{"SolutionID":"1.004","ComponentType":"Dataset","ComponentID":"getSubmissionUUID"},{"SolutionID":"1.004","ComponentType":"Dataset","ComponentID":"getUploadedFile"},{"SolutionID":"1.004","ComponentType":"Dataset","ComponentID":"getValidation"},{"SolutionID":"1.004","ComponentType":"Dataset","ComponentID":"invoice_data"},{"SolutionID":"1.004","ComponentType":"List","ComponentID":"src_inv_type"},{"SolutionID":"1.004","ComponentType":"Role","ComponentID":"ntpm_normal_user"},{"SolutionID":"1.004","ComponentType":"Screen","ComponentID":"buyers"},{"SolutionID":"1.004","ComponentType":"Screen","ComponentID":"cancel_cn"},{"SolutionID":"1.004","ComponentType":"Screen","ComponentID":"cancel_inv"},{"SolutionID":"1.004","ComponentType":"Screen","ComponentID":"cancel_scn"},{"SolutionID":"1.004","ComponentType":"Screen","ComponentID":"cancel_sinv"},{"SolutionID":"1.004","ComponentType":"Screen","ComponentID":"create_temp"},{"SolutionID":"1.004","ComponentType":"Screen","ComponentID":"download_doc_get_sub"},{"SolutionID":"1.004","ComponentType":"Screen","ComponentID":"download_doc_get_vld"},{"SolutionID":"1.004","ComponentType":"Screen","ComponentID":"for_conso"},{"SolutionID":"1.004","ComponentType":"Screen","ComponentID":"for_filing_cn"},{"SolutionID":"1.004","ComponentType":"Screen","ComponentID":"for_filing_inv"},{"SolutionID":"1.004","ComponentType":"Screen","ComponentID":"for_filing_scn"},{"SolutionID":"1.004","ComponentType":"Screen","ComponentID":"for_filing_sinv"},{"SolutionID":"1.004","ComponentType":"Screen","ComponentID":"for_vld_cn"},{"SolutionID":"1.004","ComponentType":"Screen","ComponentID":"for_vld_inv"},{"SolutionID":"1.004","ComponentType":"Screen","ComponentID":"for_vld_scn"},{"SolutionID":"1.004","ComponentType":"Screen","ComponentID":"for_vld_sinv"},{"SolutionID":"1.004","ComponentType":"Screen","ComponentID":"layouts"},{"SolutionID":"1.004","ComponentType":"Screen","ComponentID":"master_clas_via_gl"},{"SolutionID":"1.004","ComponentType":"Screen","ComponentID":"master_country"},{"SolutionID":"1.004","ComponentType":"Screen","ComponentID":"master_currency"},{"SolutionID":"1.004","ComponentType":"Screen","ComponentID":"master_einv_types"},{"SolutionID":"1.004","ComponentType":"Screen","ComponentID":"master_itm_clas"},{"SolutionID":"1.004","ComponentType":"Screen","ComponentID":"master_paym"},{"SolutionID":"1.004","ComponentType":"Screen","ComponentID":"master_state"},{"SolutionID":"1.004","ComponentType":"Screen","ComponentID":"master_tax_types"},{"SolutionID":"1.004","ComponentType":"Screen","ComponentID":"master_unit"},{"SolutionID":"1.004","ComponentType":"Screen","ComponentID":"param_cancel"},{"SolutionID":"1.004","ComponentType":"Screen","ComponentID":"param_conso"},{"SolutionID":"1.004","ComponentType":"Screen","ComponentID":"param_entity_ds"},{"SolutionID":"1.004","ComponentType":"Screen","ComponentID":"param_imp"},{"SolutionID":"1.004","ComponentType":"Screen","ComponentID":"param_self_einv"},{"SolutionID":"1.004","ComponentType":"Screen","ComponentID":"submit_cn"},{"SolutionID":"1.004","ComponentType":"Screen","ComponentID":"submit_inv"},{"SolutionID":"1.004","ComponentType":"Screen","ComponentID":"submit_scn"},{"SolutionID":"1.004","ComponentType":"Screen","ComponentID":"submit_sinv"},{"SolutionID":"1.004","ComponentType":"Screen","ComponentID":"suppliers"},{"SolutionID":"1.004","ComponentType":"Screen","ComponentID":"test_screen"},{"SolutionID":"1.004","ComponentType":"Screen","ComponentID":"upld_doc"},{"SolutionID":"1.004","ComponentType":"Topic","ComponentID":"cancel_header"},{"SolutionID":"1.004","ComponentType":"Topic","ComponentID":"cancel_line"},{"SolutionID":"1.004","ComponentType":"Topic","ComponentID":"conso_header"},{"SolutionID":"1.004","ComponentType":"Topic","ComponentID":"conso_line"},{"SolutionID":"1.004","ComponentType":"Topic","ComponentID":"conso_parameter"},{"SolutionID":"1.004","ComponentType":"Topic","ComponentID":"einv_header"},{"SolutionID":"1.004","ComponentType":"Topic","ComponentID":"einv_lines"},{"SolutionID":"1.004","ComponentType":"Topic","ComponentID":"entity_data_set"},{"SolutionID":"1.004","ComponentType":"Topic","ComponentID":"number_defaults"},{"SolutionID":"1.004","ComponentType":"Topic","ComponentID":"pur_off"},{"SolutionID":"1.004","ComponentType":"Topic","ComponentID":"pur_ord_type"},{"SolutionID":"1.004","ComponentType":"Topic","ComponentID":"ret_reason"},{"SolutionID":"1.004","ComponentType":"Topic","ComponentID":"uploaded_file_details"},{"SolutionID":"1.004","ComponentType":"Topic","ComponentID":"user_access_configuration"},{"SolutionID":"1.004","ComponentType":"Topic","ComponentID":"user_access_control"}]},"Topics":[{"Topic":{"Name":"cancel_header","Description":"Cancellation Header","Keys":["e_inv_no","seqn"],"SendAlertOnFail":true,"DistributionList":[],"HotTopic":true,"FieldDefs":[{"FieldName":"e_inv_no","Description":"E-Invoice Number","Sequence":1,"DataType":"String","Length":50,"IsKey":true,"IndexSequence":1,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"seqn","Description":"Sequence","Sequence":2,"DataType":"Integer","Length":4,"IsKey":true,"IndexSequence":2,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"data_set","Description":"Data Set","Sequence":3,"DataType":"String","Length":10,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"comp","Description":"Company","Sequence":4,"DataType":"Integer","Length":4,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"tran","Description":"Transaction Type","Sequence":5,"DataType":"String","Length":3,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"idoc","Description":"Invoice Number","Sequence":6,"DataType":"Integer","Length":8,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"doct","Description":"Document Type","Sequence":7,"DataType":"String","Length":2,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"reason","Description":"Reason","Sequence":8,"DataType":"String","Length":200,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"adcn","Description":"Additional Document Reference","Sequence":9,"DataType":"String","Length":20,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"cdte","Description":"Cancelled Date \u0026 Time","Sequence":10,"DataType":"DateTime","Length":20,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"errm","Description":"Error Message","Sequence":11,"DataType":"String","Length":300,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"with_ship","Description":"With Shipment","Sequence":12,"DataType":"Boolean","Length":1,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"with_rec","Description":"With Receipt","Sequence":13,"DataType":"Boolean","Length":1,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"scale","Description":"Scale","Sequence":14,"DataType":"String","Length":10,"IsKey":false,"IndexSequence":0,"Props":{"List":true,"ListID":"scale","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"seri","Description":"Series","Sequence":15,"DataType":"String","Length":3,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"ord_typ","Description":"Order Type","Sequence":16,"DataType":"String","Length":3,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"sls_pur_off","Description":"Sales/Purchase Office","Sequence":17,"DataType":"String","Length":6,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"ret_reason","Description":"Return Reason","Sequence":18,"DataType":"String","Length":6,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"tran_type","Description":"Transaction Type","Sequence":19,"DataType":"String","Length":3,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"all_lines","Description":"All Lines","Sequence":20,"DataType":"Boolean","Length":1,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"target_doc","Description":"Target Document","Sequence":21,"DataType":"String","Length":10,"IsKey":false,"IndexSequence":0,"Props":{"List":true,"ListID":"targetDocument","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""}],"Segments":[],"AdditionalProps":null,"References":[],"Indices":[],"SharedTable":false,"CreatedBy":"parthi","ModifiedBy":"malai","CreatedDate":"2024-05-06T19:29:11.891534+08:00","ModifiedDate":"2024-12-03T19:10:18.004372+08:00","EnableComments":false,"ReferenceFields":null,"ReadQuery":"SELECT * FROM {{cancel_header}} "},"BeforeSave":"//**** Hook before_save Created by parthi on 09-May-2024 16:51:17\n\t\t\t function before_save(){\n\t\t\t\t if (jscall.input.idoc){\n\t\t\t\t\tjscall.input.idoc = jscall.input.idoc.toString()\n\t\t\t\t }\n\t\t\t  return true;\n\t\t\t}","AfterSave":"//**** Hook after_save Created by mithiran on 10-Sep-2024 15:59:12\n\t\t\tfunction after_save(){\n\t\t\t  return true;\n\t\t\t}","BeforeDelete":"","AfterDelete":""},{"Topic":{"Name":"cancel_line","Description":"Cancellation Line","Keys":["e_inv_no","seqn","line"],"SendAlertOnFail":true,"DistributionList":[],"HotTopic":true,"FieldDefs":[{"FieldName":"e_inv_no","Description":"E-Invoice Number","Sequence":1,"DataType":"String","Length":50,"IsKey":true,"IndexSequence":1,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"seqn","Description":"E-Invoice Sequence","Sequence":2,"DataType":"Integer","Length":4,"IsKey":true,"IndexSequence":2,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"line","Description":"Line Number","Sequence":3,"DataType":"Integer","Length":4,"IsKey":true,"IndexSequence":3,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"comp","Description":"Company","Sequence":4,"DataType":"Integer","Length":4,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"tran","Description":"Transaction Type","Sequence":5,"DataType":"String","Length":3,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"idoc","Description":"Invoice Number","Sequence":6,"DataType":"Integer","Length":4,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"reason","Description":"Reason","Sequence":7,"DataType":"String","Length":300,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"adcn","Description":"Additional Document Reference","Sequence":8,"DataType":"String","Length":20,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"errm","Description":"Error Message","Sequence":9,"DataType":"String","Length":300,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""}],"Segments":[],"AdditionalProps":null,"References":[],"Indices":[],"SharedTable":false,"CreatedBy":"parthi","ModifiedBy":"api_user","CreatedDate":"2024-05-06T19:34:31.783551+08:00","ModifiedDate":"2024-12-03T19:10:18.012895+08:00","EnableComments":false,"ReferenceFields":null,"ReadQuery":"SELECT * FROM {{cancel_line}} "},"BeforeSave":"//**** Hook before_save Created by parthi on 09-May-2024 16:57:01\n\t\t\tfunction before_save(){\n\t\t\t\tif (jscall.input.idoc){\n\t\t\t\t\tjscall.input.idoc = jscall.input.idoc.toString()\n\t\t\t\t}\n\t\t\t  return true;\n\t\t\t}","AfterSave":"","BeforeDelete":"","AfterDelete":""},{"Topic":{"Name":"conso_header","Description":"Consolidation Header - Interim Table","Keys":["inv_no"],"SendAlertOnFail":true,"DistributionList":[],"HotTopic":true,"FieldDefs":[{"FieldName":"inv_no","Description":"Invoice Number","Sequence":1,"DataType":"String","Length":50,"IsKey":true,"IndexSequence":1,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"comp","Description":"Financial Company","Sequence":2,"DataType":"Integer","Length":4,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"tran","Description":"Finance Type","Sequence":3,"DataType":"String","Length":3,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"idoc","Description":"Invoice Number","Sequence":4,"DataType":"Integer","Length":4,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"doct","Description":"Invoice Type","Sequence":5,"DataType":"String","Length":2,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"itbp","Description":"Buyer Code","Sequence":6,"DataType":"String","Length":9,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"itoa","Description":"Buyer Address","Sequence":7,"DataType":"String","Length":9,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"ccur","Description":"Invoice Currency Code","Sequence":8,"DataType":"String","Length":3,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"rate","Description":"Currency Exchange Rate","Sequence":9,"DataType":"Float","Length":20,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"paym","Description":"Payment Mode","Sequence":10,"DataType":"String","Length":3,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"term","Description":"Payment Term","Sequence":11,"DataType":"String","Length":120,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"tote","Description":"Total Excluding Tax","Sequence":12,"DataType":"Float","Length":20,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"toti","Description":"Total Including Tax","Sequence":13,"DataType":"Float","Length":20,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"tott","Description":"Total Tax Amount","Sequence":14,"DataType":"Float","Length":20,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"cvat","Description":"Tax Type","Sequence":15,"DataType":"String","Length":9,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"stbp","Description":"Shipping Recipient’s Name","Sequence":16,"DataType":"String","Length":9,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"sadr","Description":"Shipping Recipient’s Address","Sequence":17,"DataType":"String","Length":9,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"dtrm","Description":"Incoterms","Sequence":18,"DataType":"String","Length":10,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"styp","Description":"Sales Transaction Type","Sequence":19,"DataType":"String","Length":10,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"cein","Description":"Consolidate E-Invoice","Sequence":20,"DataType":"Boolean","Length":1,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"disb","Description":"Disbursement","Sequence":21,"DataType":"Boolean","Length":1,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"dshp","Description":"Dropshipment","Sequence":22,"DataType":"Boolean","Length":1,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"sinc","Description":"Sales Invoice Correction","Sequence":23,"DataType":"Boolean","Length":1,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"fbil","Description":"Frequency of Billing","Sequence":24,"DataType":"String","Length":50,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"bsdt","Description":"Billing Period Start Date","Sequence":25,"DataType":"Date","Length":10,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"bedt","Description":"Billing Period End Date","Sequence":26,"DataType":"Date","Length":10,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"pamt","Description":"Payment Amount","Sequence":27,"DataType":"Float","Length":20,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"pydt","Description":"Payment Date","Sequence":28,"DataType":"Date","Length":10,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"pytm","Description":"PaymentTime","Sequence":29,"DataType":"DateTime","Length":10,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"pref","Description":"Payment Reference Number","Sequence":30,"DataType":"String","Length":150,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"bref","Description":"Bill Reference Number","Sequence":31,"DataType":"String","Length":150,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"tpat","Description":"Total Payable Amount","Sequence":32,"DataType":"Float","Length":20,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"tnat","Description":"Total Net Amount","Sequence":33,"DataType":"Float","Length":20,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"tdis","Description":"Total Discount Value","Sequence":34,"DataType":"Float","Length":20,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"tfee","Description":"Total Fee / Charge Amount","Sequence":35,"DataType":"Float","Length":20,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"ramt","Description":"Rounding Amount","Sequence":36,"DataType":"Float","Length":20,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"ttax","Description":"Total Taxable Amount Per Tax Type","Sequence":37,"DataType":"Float","Length":20,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"ttat","Description":"Total Tax Amount Per Tax Type","Sequence":38,"DataType":"Float","Length":20,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"adis","Description":"Invoice Additional Discount Amount","Sequence":39,"DataType":"Float","Length":20,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"afee","Description":"Invoice Additional Fee Amount","Sequence":40,"DataType":"Float","Length":20,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"frm1","Description":"Reference No of Customs form No 1, 9, etc","Sequence":41,"DataType":"String","Length":12,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"ftrd","Description":"Free Trade Agreement(FTA) Information","Sequence":42,"DataType":"String","Length":300,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"anum","Description":"Authorisation Number for Certified Exporter","Sequence":43,"DataType":"String","Length":300,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"frm2","Description":"Reference Number of Customs Form No.2","Sequence":44,"DataType":"String","Length":12,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"ochg","Description":"Details of other charges","Sequence":45,"DataType":"Boolean","Length":1,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"ochg_amnt","Description":"Details of other charges - Amount","Sequence":46,"DataType":"Float","Length":20,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"ochg_reason","Description":"Details of other charges - Reason","Sequence":47,"DataType":"String","Length":300,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"esta","Description":"LHDN Status","Sequence":48,"DataType":"String","Length":30,"IsKey":false,"IndexSequence":0,"Props":{"List":true,"ListID":"lhdn_status","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"etim","Description":"LHDN Validated Date \u0026 Time","Sequence":49,"DataType":"DateTime","Length":20,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"submission_uid","Description":"LHDN Submission UID","Sequence":50,"DataType":"String","Length":26,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"err_msg","Description":"Error Message","Sequence":51,"DataType":"String","Length":600,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"line_cnt","Description":"Line Count","Sequence":52,"DataType":"Integer","Length":4,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"trgt","Description":"Target","Sequence":53,"DataType":"String","Length":100,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"val_err","Description":"Validation Error Category","Sequence":54,"DataType":"String","Length":30,"IsKey":false,"IndexSequence":0,"Props":{"List":true,"ListID":"error_type","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"cncl","Description":"Cancelled","Sequence":55,"DataType":"Boolean","Length":1,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"det_tax","Description":"Detail of Tax Exemption(Invoice Level)","Sequence":56,"DataType":"String","Length":300,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"amnt_ex","Description":"Amount Exemption from Tax(Invoice Level)","Sequence":57,"DataType":"Float","Length":20,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"e_invdt","Description":"E-Invoice Date \u0026 Time","Sequence":58,"DataType":"DateTime","Length":20,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"src_type","Description":"Source Type","Sequence":59,"DataType":"String","Length":30,"IsKey":false,"IndexSequence":0,"Props":{"List":true,"ListID":"src_inv_type","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"adis_reason","Description":"Invoice Additional Discount Amount Reason","Sequence":60,"DataType":"String","Length":300,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"afee_reason","Description":"Invoice Additional Fee Amount Reason","Sequence":61,"DataType":"String","Length":300,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"par_cncl","Description":"Partially Cancelled","Sequence":62,"DataType":"Boolean","Length":1,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"s_line_cnt","Description":"Source Line Count","Sequence":63,"DataType":"Integer","Length":1,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"einv_stat","Description":"E-Invoice Status","Sequence":64,"DataType":"String","Length":10,"IsKey":false,"IndexSequence":0,"Props":{"List":true,"ListID":"einv_status","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"conso_inv","Description":"Consolidation E-Invoice Number","Sequence":65,"DataType":"String","Length":20,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"inv_date","Description":"Invoice Date","Sequence":66,"DataType":"DateTime","Length":25,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"data_set","Description":"Data Set","Sequence":67,"DataType":"String","Length":5,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""}],"Segments":[],"AdditionalProps":null,"References":[],"Indices":[{"Topic":"conso_header","IndexNo":2,"Description":"Invoice Number","Fields":["inv_no"],"Unique":true,"Cascade":false},{"Topic":"conso_header","IndexNo":4,"Description":"Invoice Number","Fields":["inv_no"],"Unique":true,"Cascade":false},{"Topic":"conso_header","IndexNo":1,"Description":"Invoice Number","Fields":["inv_no"],"Unique":true,"Cascade":false}],"SharedTable":false,"CreatedBy":"malai","ModifiedBy":"api_user","CreatedDate":"2024-06-03T18:10:15.383108+08:00","ModifiedDate":"2024-12-18T20:33:27.386967+08:00","EnableComments":false,"ReferenceFields":null,"ReadQuery":"SELECT * FROM {{conso_header}} "},"BeforeSave":"//**** Hook before_save Created by malai on 23-Aug-2024 17:47:31\nfunction before_save(){\n\tif (jscall.input.idoc){\n\t\tjscall.input.idoc = jscall.input.idoc.toString()\n\t}\n\tif (!jscall.input.inv_no){\n\t\tjscall.input.inv_no = jscall.input.tran + jscall.input.idoc.toString()\n\t}\n\treturn true;\n}","AfterSave":"","BeforeDelete":"","AfterDelete":""},{"Topic":{"Name":"conso_line","Description":"Consolidation Line - Interim Table","Keys":["inv_no","line"],"SendAlertOnFail":true,"DistributionList":[],"HotTopic":true,"FieldDefs":[{"FieldName":"inv_no","Description":"Invoice Number","Sequence":1,"DataType":"String","Length":50,"IsKey":true,"IndexSequence":1,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"line","Description":"Invoice Line No","Sequence":2,"DataType":"Integer","Length":4,"IsKey":true,"IndexSequence":2,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"item","Description":"Item","Sequence":3,"DataType":"String","Length":47,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"item_desc","Description":"Description of Product or Service","Sequence":4,"DataType":"String","Length":300,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"pric","Description":"Unit Price","Sequence":5,"DataType":"Float","Length":20,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"cvat","Description":"Tax Type","Sequence":6,"DataType":"String","Length":2,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"pvat","Description":"Tax Rate","Sequence":7,"DataType":"Float","Length":10,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"txai","Description":"Tax Amount","Sequence":8,"DataType":"Float","Length":20,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"ceno","Description":"Detail of Tax Exemption","Sequence":9,"DataType":"String","Length":300,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"amtt","Description":"Amount Exempted from Tax","Sequence":10,"DataType":"Float","Length":20,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"stot","Description":"Sub Total","Sequence":11,"DataType":"Float","Length":20,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"amti","Description":"Total Excluding Tax","Sequence":12,"DataType":"Float","Length":20,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"dqua","Description":"Quantity","Sequence":13,"DataType":"Float","Length":20,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"cuni","Description":"Measurement","Sequence":14,"DataType":"String","Length":5,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"disc","Description":"Discount Rate","Sequence":15,"DataType":"Float","Length":6,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"ldai","Description":"Discount Amount","Sequence":16,"DataType":"Float","Length":20,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"ccde","Description":"Product Tariff","Sequence":17,"DataType":"String","Length":25,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"ccty","Description":"Country of Origin","Sequence":18,"DataType":"String","Length":3,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"clas","Description":"Classification","Sequence":19,"DataType":"String","Length":3,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"feer","Description":"Fee / Charge Rate","Sequence":20,"DataType":"Float","Length":20,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"feea","Description":"Fee / Charge Amount","Sequence":21,"DataType":"Float","Length":20,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"err_msg","Description":"Error Message","Sequence":22,"DataType":"String","Length":300,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"lsta","Description":"Line Status","Sequence":23,"DataType":"String","Length":30,"IsKey":false,"IndexSequence":0,"Props":{"List":true,"ListID":"lhdn_status","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"disc_reason","Description":"Discount Reason","Sequence":24,"DataType":"String","Length":300,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"fee_reason","Description":"Fees Reason","Sequence":25,"DataType":"String","Length":300,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""}],"Segments":[],"AdditionalProps":null,"References":[],"Indices":[],"SharedTable":false,"CreatedBy":"malai","ModifiedBy":"malai","CreatedDate":"2024-06-04T13:10:40.372533+08:00","ModifiedDate":"2024-12-18T20:33:27.397716+08:00","EnableComments":false,"ReferenceFields":null,"ReadQuery":"SELECT * FROM {{conso_line}} "},"BeforeSave":"//**** Hook before_save Created by malai on 11-Dec-2024 10:49:40\n\t\t\tfunction before_save(){\n\t\t\t  if (!jscall.input.inv_no){\n\t\t\t\t  if (jscall.input.tran \u0026\u0026 jscall.input.idoc){\n\t\t\t\t\t  jscall.input.inv_no = jscall.input?.tran + jscall.input?.idoc.toString()\n\t\t\t\t  } else {\n\t\t\t\t\t  jscall.input.inv_no = ''\n\t\t\t\t  }\n\t\t\t  }\n\t\t\t  return true;\n\t\t\t}","AfterSave":"","BeforeDelete":"","AfterDelete":""},{"Topic":{"Name":"conso_parameter","Description":"Consolidation Parameter","Keys":["criteria","seq"],"SendAlertOnFail":true,"DistributionList":[],"HotTopic":true,"FieldDefs":[{"FieldName":"criteria","Description":"Criteria","Sequence":1,"DataType":"Integer","Length":4,"IsKey":true,"IndexSequence":1,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"seq","Description":"Sequence","Sequence":2,"DataType":"Integer","Length":4,"IsKey":true,"IndexSequence":2,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"is_buyer","Description":"Buyer","Sequence":3,"DataType":"Boolean","Length":1,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"field_name","Description":"Field Name","Sequence":4,"DataType":"String","Length":200,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"condition","Description":"Condition","Sequence":5,"DataType":"String","Length":200,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"by_range","Description":"Range","Sequence":6,"DataType":"Boolean","Length":1,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"from_range","Description":"From","Sequence":7,"DataType":"String","Length":100,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"to_range","Description":"To","Sequence":8,"DataType":"String","Length":100,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"joiner","Description":"Joiner","Sequence":9,"DataType":"String","Length":3,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""}],"Segments":[],"AdditionalProps":null,"References":[],"Indices":[],"SharedTable":false,"CreatedBy":"malai","ModifiedBy":"malai","CreatedDate":"2024-12-06T17:58:23.656844+08:00","ModifiedDate":"2024-12-18T20:33:27.407277+08:00","EnableComments":false,"ReferenceFields":null,"ReadQuery":"SELECT * FROM {{conso_parameter}} "},"BeforeSave":"//**** Hook before_save Created by malai on 06-Dec-2024 15:47:47\nfunction before_save(){\n\tif (jscall.mode == 'insert'){\n\t\tjscall.input.seq = CralDB.QueryByComp(`select count(seq) from {{conso_parameter}} where criteria=${jscall.input.criteria}`, jscall.company)[0].count + 1\n\t}\n\tif (jscall.input.by_range \u0026\u0026 jscall.input.is_buyer){\n\t\tjscall_error = `Only one condition can be applied in one sequence.`\n\t\treturn false;\n\t} else if (!jscall.input.by_range \u0026\u0026 !jscall.input.is_buyer){\n\t\tif (!jscall.input.field_name || !jscall.input.condition){\n\t\t\tjscall_error = `Field Name and Condition is Mandatory.`;\n\t\t\treturn false;\n\t\t}\n\t} else if (jscall.input.by_range) {\n\t\tif (!jscall.input.field_name){\n\t\t\tjscall_error = `Field Name is Mandatory.`\n\t\t\treturn false;\n\t\t}\n\t}\n\tif (jscall.input.seq \u003e 1 \u0026\u0026 !jscall.input.joiner){\n\t\tjscall_error = 'Joiner is Mandatory';\n\t\treturn false;\n\t}\n\treturn true;\n}","AfterSave":"","BeforeDelete":"","AfterDelete":""},{"Topic":{"Name":"einv_header","Description":"E-Invoice Header","Keys":["e_inv_no"],"SendAlertOnFail":true,"DistributionList":[],"HotTopic":true,"FieldDefs":[{"FieldName":"e_inv_no","Description":"E-Invoice Number","Sequence":1,"DataType":"String","Length":50,"IsKey":true,"IndexSequence":1,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"comp","Description":"Financial Company","Sequence":2,"DataType":"Integer","Length":4,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"tran","Description":"Finance Type","Sequence":3,"DataType":"String","Length":3,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"idoc","Description":"Invoice Number","Sequence":4,"DataType":"Integer","Length":8,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"doct","Description":"Invoice Type","Sequence":5,"DataType":"String","Length":2,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"ccur","Description":"Invoice Currency Code","Sequence":6,"DataType":"String","Length":3,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"paym","Description":"Payment Mode","Sequence":7,"DataType":"String","Length":3,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"cvat","Description":"Tax Type","Sequence":8,"DataType":"String","Length":9,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"sctg","Description":"Sales Category","Sequence":9,"DataType":"String","Length":10,"IsKey":false,"IndexSequence":0,"Props":{"List":true,"ListID":"sales_catg","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"dataset","Description":"Dataset","Sequence":10,"DataType":"String","Length":3,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"line_cnt","Description":"Line Count","Sequence":11,"DataType":"Integer","Length":4,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"s_line_cnt","Description":"Source Line Count","Sequence":12,"DataType":"Integer","Length":4,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"sup_name","Description":"Supplier Name","Sequence":13,"DataType":"String","Length":300,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"sup_cont_num","Description":"Supplier Contact Number","Sequence":14,"DataType":"String","Length":20,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"sup_email","Description":"Supplier Mail","Sequence":15,"DataType":"String","Length":320,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"sup_sst_reg","Description":"Supplier SST Registration","Sequence":16,"DataType":"String","Length":17,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"sup_ttx_no","Description":"Supplier Tourism Tax Number","Sequence":17,"DataType":"String","Length":17,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"sup_tin","Description":"Supplier TIN","Sequence":18,"DataType":"String","Length":14,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"sup_reg_brn","Description":"Supplier Registration Number","Sequence":19,"DataType":"String","Length":20,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"sup_reg_nric","Description":"Supplier NRIC","Sequence":20,"DataType":"String","Length":12,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"sup_reg_passport","Description":"Supplier Passport Number","Sequence":21,"DataType":"String","Length":12,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"sup_reg_army","Description":"Supplier Army Identification","Sequence":22,"DataType":"String","Length":12,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"sup_badsca","Description":"Supplier Business Activity","Sequence":23,"DataType":"String","Length":300,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"sup_bank_acc","Description":"Supplier Bank Account Number","Sequence":24,"DataType":"String","Length":150,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"sup_msic","Description":"Supplier MSIC Code","Sequence":25,"DataType":"String","Length":5,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"sup_adrs","Description":"Supplier Address Code","Sequence":26,"DataType":"String","Length":9,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"sup_city","Description":"Supplier City","Sequence":27,"DataType":"String","Length":150,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"sup_postal_zone","Description":"Supplier Postal Code","Sequence":28,"DataType":"String","Length":10,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"sup_adrs_line0","Description":"Supplier Address Line 0","Sequence":29,"DataType":"String","Length":400,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"sup_adrs_line1","Description":"Supplier Address Line 1","Sequence":30,"DataType":"String","Length":400,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"sup_adrs_line2","Description":"Supplier Address Line 2","Sequence":31,"DataType":"String","Length":400,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"sup_country","Description":"Supplier Country Code","Sequence":32,"DataType":"String","Length":3,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"ccty","RefersTo":"country"},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"sup_cste","Description":"Supplier State Code","Sequence":33,"DataType":"String","Length":3,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"code","RefersTo":"state_codes"},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"inv_bp","Description":"Buyer Code","Sequence":34,"DataType":"String","Length":9,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"buy_name","Description":"Buyer Name","Sequence":35,"DataType":"String","Length":300,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"buy_cont_num","Description":"Buyer Contact Number","Sequence":36,"DataType":"String","Length":20,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"buy_email","Description":"Buyer Mail","Sequence":37,"DataType":"String","Length":320,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"buy_sst_reg","Description":"Buyer SST Registration","Sequence":38,"DataType":"String","Length":17,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"buy_tin","Description":"Buyer TIN","Sequence":39,"DataType":"String","Length":17,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"buy_reg_brn","Description":"Buyer Registration Number","Sequence":40,"DataType":"String","Length":14,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"buy_reg_nric","Description":"Buyer NRIC","Sequence":41,"DataType":"String","Length":12,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"buy_reg_passport","Description":"Buyer Passport","Sequence":42,"DataType":"String","Length":12,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"buy_reg_army","Description":"Buyer Army","Sequence":43,"DataType":"String","Length":12,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"buy_adrs","Description":"Buyer Address","Sequence":44,"DataType":"String","Length":9,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"buy_city","Description":"Buyer City","Sequence":45,"DataType":"String","Length":150,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"buy_postal_zone","Description":"Buyer Postal Code","Sequence":46,"DataType":"String","Length":10,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"buy_adrs_line0","Description":"Buyer Address Line 0","Sequence":47,"DataType":"String","Length":400,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"buy_adrs_line1","Description":"Buyer Address Line 1","Sequence":48,"DataType":"String","Length":400,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"buy_adrs_line2","Description":"Buyer Address Line 2","Sequence":49,"DataType":"String","Length":400,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"buy_country","Description":"Buyer Country Code","Sequence":50,"DataType":"String","Length":3,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"ccty","RefersTo":"country"},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"buy_cste","Description":"Buyer State Code","Sequence":51,"DataType":"String","Length":3,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"code","RefersTo":"state_codes"},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"dtrm","Description":"Incoterms","Sequence":52,"DataType":"String","Length":3,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"ship_bp","Description":"Shipper Code","Sequence":53,"DataType":"String","Length":9,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"ship_name","Description":"Shipper Name","Sequence":54,"DataType":"String","Length":300,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"ship_tin","Description":"Shipper TIN","Sequence":55,"DataType":"String","Length":14,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"ship_reg_brn","Description":"Shipper Registration Number","Sequence":56,"DataType":"String","Length":20,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"ship_reg_nric","Description":"Shipper NRIC","Sequence":57,"DataType":"String","Length":12,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"ship_reg_passport","Description":"Shipper Passport","Sequence":58,"DataType":"String","Length":12,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"ship_reg_army","Description":"Shipper Army","Sequence":59,"DataType":"String","Length":12,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"ship_adrs","Description":"Shipper Address Code","Sequence":60,"DataType":"String","Length":9,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"ship_city","Description":"Shipper City","Sequence":61,"DataType":"String","Length":150,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"ship_postal_zone","Description":"Shipper Postal Code","Sequence":62,"DataType":"String","Length":10,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"ship_adrs_line0","Description":"Shipper Address Line 0","Sequence":63,"DataType":"String","Length":400,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"ship_adrs_line1","Description":"Shipper Address Line 1","Sequence":64,"DataType":"String","Length":400,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"ship_adrs_line2","Description":"Shipper Address Line 2","Sequence":65,"DataType":"String","Length":400,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"ship_country","Description":"Shipper Country Code","Sequence":66,"DataType":"String","Length":3,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"ccty","RefersTo":"country"},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"ship_cste","Description":"Shipper State Code","Sequence":67,"DataType":"String","Length":3,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"code","RefersTo":"state_codes"},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"frm1","Description":"Reference No of Customs form No 1, 9, etc","Sequence":68,"DataType":"String","Length":12,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"frm2","Description":"Reference Number of Customs Form No.2","Sequence":69,"DataType":"String","Length":12,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"rate","Description":"Currency Exchange Rate","Sequence":70,"DataType":"Float","Length":20,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"tote","Description":"Total Excluding Tax","Sequence":71,"DataType":"Float","Length":20,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"toti","Description":"Total Including Tax","Sequence":72,"DataType":"Float","Length":20,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"tott","Description":"Total Tax Amount","Sequence":73,"DataType":"Float","Length":20,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"pamt","Description":"PrePayment Amount","Sequence":74,"DataType":"Float","Length":20,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"pydt","Description":"PrePayment Date","Sequence":75,"DataType":"Date","Length":10,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"pytm","Description":"PrePayment Time","Sequence":76,"DataType":"DateTime","Length":25,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"pref","Description":"PrePayment Reference Number","Sequence":77,"DataType":"String","Length":150,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"tpat","Description":"Total Payable Amount","Sequence":78,"DataType":"Float","Length":20,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"tnat","Description":"Total Net Amount","Sequence":79,"DataType":"Float","Length":20,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"tdis","Description":"Total Discount Value","Sequence":80,"DataType":"Float","Length":20,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"tfee","Description":"Total Fee / Charge Amount","Sequence":81,"DataType":"Float","Length":20,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"ramt","Description":"Rounding Amount","Sequence":82,"DataType":"Float","Length":20,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"ttax","Description":"Total Taxable Amount Per Tax Type","Sequence":83,"DataType":"Float","Length":20,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"ttat","Description":"Total Tax Amount Per Tax Type","Sequence":84,"DataType":"Float","Length":20,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"adis","Description":"Invoice Additional Discount Amount","Sequence":85,"DataType":"Float","Length":20,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"adis_reason","Description":"Invoice Additional Discount Amount Reason","Sequence":86,"DataType":"String","Length":300,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"afee","Description":"Invoice Additional Fee Amount","Sequence":87,"DataType":"Float","Length":20,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"afee_reason","Description":"Invoice Additional Fee Amount Reason","Sequence":88,"DataType":"String","Length":300,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"fbil","Description":"Frequency of Billing","Sequence":89,"DataType":"String","Length":50,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"org_e_inv_no","Description":"Original E-Invoice Reference Number","Sequence":90,"DataType":"String","Length":50,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"term","Description":"Payment Term","Sequence":91,"DataType":"String","Length":120,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"bref","Description":"Bill Reference Number","Sequence":92,"DataType":"String","Length":150,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"ftrd","Description":"Free Trade Agreement(FTA) Information","Sequence":93,"DataType":"String","Length":300,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"anum","Description":"Authorisation Number for Certified Exporter","Sequence":94,"DataType":"String","Length":300,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"ochg","Description":"Details of other charges","Sequence":95,"DataType":"Boolean","Length":1,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"ochg_amnt","Description":"Details of other charges - Amount","Sequence":96,"DataType":"Float","Length":20,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"ochg_reason","Description":"Details of other charges - Reason","Sequence":97,"DataType":"String","Length":300,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"det_tax","Description":"Detail of Tax Exemption(Invoice Level)","Sequence":98,"DataType":"String","Length":300,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"bsdt","Description":"Billing Period Start Date","Sequence":99,"DataType":"Date","Length":10,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"bedt","Description":"Billing Period End Date","Sequence":100,"DataType":"Date","Length":10,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"amnt_ex","Description":"Amount Exemption from Tax(Invoice Level)","Sequence":101,"DataType":"Float","Length":20,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"dshp","Description":"Dropshipment","Sequence":102,"DataType":"Boolean","Length":1,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"submission_uid","Description":"LHDN Submission UID","Sequence":103,"DataType":"String","Length":26,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"doc_uuid","Description":"LHDN UUID","Sequence":104,"DataType":"String","Length":26,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"esta","Description":"LHDN Status","Sequence":105,"DataType":"String","Length":10,"IsKey":false,"IndexSequence":0,"Props":{"List":true,"ListID":"lhdn_status","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"err_msg","Description":"Error Message","Sequence":106,"DataType":"String","Length":600,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"e_invdt","Description":"E-Invoice Date \u0026 Time","Sequence":107,"DataType":"DateTime","Length":25,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"einv_stat","Description":"E-Invoice Status","Sequence":108,"DataType":"String","Length":10,"IsKey":false,"IndexSequence":0,"Props":{"List":true,"ListID":"einv_status","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"etim","Description":"LHDN Validated Date \u0026 Time","Sequence":109,"DataType":"DateTime","Length":25,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"modi_stat","Description":"Header Modification Status","Sequence":110,"DataType":"String","Length":10,"IsKey":false,"IndexSequence":0,"Props":{"List":true,"ListID":"m_status","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"src_type","Description":"Sales Type","Sequence":111,"DataType":"String","Length":10,"IsKey":false,"IndexSequence":0,"Props":{"List":true,"ListID":"src_inv_type","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"inv_pdf","Description":"PDF Resource ID","Sequence":112,"DataType":"String","Length":100,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"reference0","Description":"LN Invoice Date","Sequence":113,"DataType":"String","Length":100,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"reference1","Description":"Reference 1","Sequence":114,"DataType":"String","Length":500,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"reference2","Description":"Reference 2","Sequence":115,"DataType":"String","Length":100,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"reference3","Description":"Reference 3","Sequence":116,"DataType":"String","Length":100,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"reference4","Description":"Reference 4","Sequence":117,"DataType":"String","Length":100,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"reference5","Description":"Reference 5","Sequence":118,"DataType":"String","Length":100,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"reference6","Description":"Reference 6","Sequence":119,"DataType":"String","Length":100,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"reference7","Description":"Reference 7","Sequence":120,"DataType":"String","Length":100,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"reference8","Description":"Reference 8","Sequence":121,"DataType":"String","Length":100,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"reference9","Description":"Reference 9","Sequence":122,"DataType":"String","Length":100,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"sup_code","Description":"Supplier Code","Sequence":123,"DataType":"String","Length":9,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"qr_code","Description":"QR Code","Sequence":124,"DataType":"String","Length":300,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"org_doc_uuid","Description":"Original Document UUID","Sequence":125,"DataType":"String","Length":26,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"einv_version","Description":"E-Invoice Version","Sequence":126,"DataType":"String","Length":10,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""}],"Segments":[],"AdditionalProps":null,"References":[{"Name":"einv_header","Sequence":1,"Columns":["dataset"],"RefersTo":"data_set","ReferenceFields":["data_set"],"OnDelete":"RESTRICT","OnUpdate":"RESTRICT"}],"Indices":[],"SharedTable":false,"CreatedBy":"malai","ModifiedBy":"malai","CreatedDate":"2024-06-26T18:20:00.911604+08:00","ModifiedDate":"2024-12-04T20:40:00.268834+08:00","EnableComments":false,"ReferenceFields":null,"ReadQuery":"SELECT * FROM {{einv_header}} "},"BeforeSave":"//**** Hook before_save Created by malai on 24-Apr-2024 11:08:36\nvar einvois = require(\"./scripts/Business_Objects/createEinvoice\")\nfunction before_save(){\n\tif (jscall.mode == \"insert\"){\n\t\tentity_ds = CralDB.QueryByComp(`select skip_einv_no_iter from {{entity_data_set}} where sup_company=${jscall.input.comp} and data_set='${jscall.input.dataset}'`, jscall.company)\n\t\tif (entity_ds.length == 0){\n\t\t\tjscall_error = `Entity Data Set is Not Maintained for ${jscall.input.comp} - ${jscall.input.dataset}`\n\t\t\treturn false;\n\t\t}\n\t\tif (!jscall.input.e_inv_no){\n\t\t\titer_num = CralDB.QueryByComp(\"select comp,tran,idoc,src_type from {{einv_header}} where comp='$1' and tran='$2' and idoc=$3\", jscall.company, jscall.input.comp, jscall.input.tran, parseInt(jscall.input.idoc))\n\t\t\tfor (i=0;i\u003citer_num.length;i++){\n\t\t\t\tif (jscall.input.src_type == iter_num[i].src_type){\n\t\t\t\t\tjscall_error = \"Record Alreday Exists\"\n\t\t\t\t\treturn false\n\t\t\t\t}\n\t\t\t}\n\t\t\tjscall.input.e_inv_no = jscall.input.tran + jscall.input.idoc.toString()\n\n\t\t\tif (!entity_ds[0].skip_einv_no_iter){\n\t\t\t\titeration = (iter_num?.length + 1).toString()\n\t\t\t\twhile(iteration.length \u003c 2){\n\t\t\t\t\titeration = \"0\" + iteration\n\t\t\t\t}\n\t\t\t\tjscall.input.e_inv_no = jscall.input.e_inv_no + \"_\" + iteration\n\t\t\t}\n\t\t}\n\t\tjscall.input.e_invdt = einvois.getCurrentDateTimeUTC()\n\t\t// fin_fld = [\"rate\", \"tote\", \"toti\", \"tott\", \"pamt\", \"tpat\", \"tnat\", \"tdis\", \"tfee\", \"ramt\", \"ttax\", \"ttat\", \"adis\", \"afee\", \"ochg_amnt\", \"amnt_ex\"]\n\t\t// for (i=0;i\u003cfin_fld?.length;i++){\n\t\t// \tjscall.input[fin_fld[i]] = parseFloat(jscall.input[fin_fld[i]].toFixed(2))\n\t\t// }\n\t}\n\tdebug(\"out\" + jscall.input.e_inv_no)\n\tif (jscall.input.idoc != \"\" \u0026\u0026 jscall.input.idoc != null \u0026\u0026 jscall.input.idoc != undefined){\n\t\tjscall.input.idoc = jscall.input.idoc.toString()\n\t}\n\t// isPDFAvil = CralDB.QueryByComp(\"select inv_pdf from {{einv_header}} where e_inv_no='$1'\", jscall.company, jscall.input.e_inv_no)\n\t// println(isPDFAvil)\n\t// if (isPDFAvil.length != 0){\n\t// \tif (jscall.input.einv_stat == \"30\" \u0026\u0026 (isPDFAvil[0].inv_pdf == \"\" || isPDFAvil[0].inv_pdf == null || isPDFAvil[0].inv_pdf == undefined)){\n\t// \t\tprintln(\"IN\")\n\t// \t\tpdf = printPDF.printReportLayout(jscall.input.e_inv_no)\n\t// \t\tif (pdf.result != null || pdf.result != undefined){\n\t// \t\t\tif (pdf.result == \"\"){\n\t// \t\t\t\tjscall_error = pdf.error\n\t// \t\t\t\treturn false\n\t// \t\t\t}\n\t// \t\t\tjscall.input.inv_pdf = pdf.result\n\t// \t\t}\n\t// \t}\n\t// }\n\treturn true;\n}","AfterSave":"","BeforeDelete":"//**** Hook before_delete Created by malai on 02-May-2024 13:17:13\n\t\t\tfunction before_delete(){\n\t\t\t\t// jscall_error = JSON.stringify(jscall.input)\n\t\t\t\tprintln(jscall.input)\n\t\t\t\t// return false\n\t\t\t\tline_records = CralDB.QueryByComp(\"select e_inv_no,line from {{einv_lines}} where e_inv_no='$1'\", jscall.company, jscall.input.e_inv_no);\n\t\t\t\tfor (let i = 0; i \u003c line_records.length; i++){\n\t\t\t\t\tret = CralDB.PublishTopic(\"einv_lines\", jscall.company, \"Delete\", line_records[i], jscall.user)\n\t\t\t\t\tif (ret.Success == false){\n\t\t\t\t\t\tjscall_error = ret.Message\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tvld_records = jscall.RunQuery(`DELETE FROM einv_validation_${jscall.company.toString().padStart(4, '0')} where einv_code='${jscall.input.e_inv_no}'`)\n\t\t\t\tif (vld_records.error){\n\t\t\t\t\tjscall_error = vld_records.error;\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t  return true;\n\t\t\t}","AfterDelete":""},{"Topic":{"Name":"einv_lines","Description":"E-Invoice Lines","Keys":["e_inv_no","line"],"SendAlertOnFail":true,"DistributionList":[],"HotTopic":true,"FieldDefs":[{"FieldName":"e_inv_no","Description":"E-Invoice Number","Sequence":1,"DataType":"String","Length":50,"IsKey":true,"IndexSequence":1,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"line","Description":"Line","Sequence":2,"DataType":"Integer","Length":4,"IsKey":true,"IndexSequence":2,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"cuni","Description":"Unit of Measure","Sequence":3,"DataType":"String","Length":3,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"ccty","Description":"Country of Origin","Sequence":4,"DataType":"String","Length":3,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"clas_grp","Description":"Classification Group","Sequence":5,"DataType":"String","Length":10,"IsKey":false,"IndexSequence":0,"Props":{"List":true,"ListID":"class_map","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"clas","Description":"Classification","Sequence":6,"DataType":"String","Length":3,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"item","Description":"Item Code","Sequence":7,"DataType":"String","Length":47,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"item_desc","Description":"Item Description","Sequence":8,"DataType":"String","Length":300,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"pric","Description":"Price","Sequence":9,"DataType":"Float","Length":20,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"pvat","Description":"Tax Rate","Sequence":10,"DataType":"Float","Length":10,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"txai","Description":"Tax Amount","Sequence":11,"DataType":"Float","Length":20,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"ceno","Description":"Tax Exemption Certificate Number","Sequence":12,"DataType":"String","Length":300,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"amtt","Description":"Amount Exempted from Tax","Sequence":13,"DataType":"Float","Length":20,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"stot","Description":"Sub Total","Sequence":14,"DataType":"Float","Length":20,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"amti","Description":"Total Excluding Tax","Sequence":15,"DataType":"Float","Length":20,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"dqua","Description":"Quantity","Sequence":16,"DataType":"Float","Length":20,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"disc","Description":"Discount Rate","Sequence":17,"DataType":"Float","Length":6,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"ldai","Description":"Discount Amount","Sequence":18,"DataType":"Float","Length":20,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"ccde","Description":"Product Tariff","Sequence":19,"DataType":"String","Length":25,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"feer","Description":"Fee / Charge Rate","Sequence":20,"DataType":"Float","Length":20,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"feea","Description":"Fee / Charge Amount","Sequence":21,"DataType":"Float","Length":20,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"disc_reason","Description":"Discount Reason","Sequence":22,"DataType":"String","Length":300,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"fee_reason","Description":"Fees Reason","Sequence":23,"DataType":"String","Length":300,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"err_msg","Description":"Invoice Line Error","Sequence":24,"DataType":"String","Length":300,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"lsta","Description":"Invoice Line Status","Sequence":25,"DataType":"String","Length":10,"IsKey":false,"IndexSequence":0,"Props":{"List":true,"ListID":"einv_status","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"modi_lsta","Description":"Line Modification Status","Sequence":26,"DataType":"String","Length":10,"IsKey":false,"IndexSequence":0,"Props":{"List":true,"ListID":"m_status","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"cvat","Description":"Tax Type","Sequence":27,"DataType":"String","Length":3,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"reference0","Description":"Reference 0","Sequence":28,"DataType":"String","Length":100,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"reference1","Description":"Reference 1","Sequence":29,"DataType":"String","Length":5000,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"reference2","Description":"Reference 2","Sequence":30,"DataType":"String","Length":5000,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"reference3","Description":"Reference 3","Sequence":31,"DataType":"String","Length":5000,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"reference4","Description":"Reference 4","Sequence":32,"DataType":"String","Length":5000,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"reference5","Description":"Reference 5","Sequence":33,"DataType":"String","Length":100,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"reference6","Description":"Reference 6","Sequence":34,"DataType":"String","Length":100,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"reference7","Description":"Reference 7","Sequence":35,"DataType":"String","Length":100,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"reference8","Description":"Reference 8","Sequence":36,"DataType":"String","Length":5000,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"reference9","Description":"Reference 9","Sequence":37,"DataType":"String","Length":5000,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"reference10","Description":"Reference 10","Sequence":38,"DataType":"String","Length":100,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"reference11","Description":"Reference 11","Sequence":39,"DataType":"String","Length":100,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"reference12","Description":"Reference 12","Sequence":40,"DataType":"String","Length":100,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"reference13","Description":"Reference 13","Sequence":41,"DataType":"String","Length":100,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"reference14","Description":"Reference 14","Sequence":42,"DataType":"String","Length":100,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"reference15","Description":"Reference 15","Sequence":43,"DataType":"String","Length":100,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"reference16","Description":"Reference 16","Sequence":44,"DataType":"String","Length":100,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"reference17","Description":"Reference 17","Sequence":45,"DataType":"String","Length":100,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"reference18","Description":"Reference 18","Sequence":46,"DataType":"String","Length":100,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"reference19","Description":"Reference 19","Sequence":47,"DataType":"String","Length":100,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"reference20","Description":"Reference 20","Sequence":48,"DataType":"String","Length":100,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""}],"Segments":[],"AdditionalProps":null,"References":[],"Indices":[],"SharedTable":false,"CreatedBy":"malai","ModifiedBy":"malai","CreatedDate":"2024-06-26T19:54:27.033737+08:00","ModifiedDate":"2024-12-18T20:33:27.414359+08:00","EnableComments":false,"ReferenceFields":null,"ReadQuery":"SELECT * FROM {{einv_lines}} "},"BeforeSave":"//**** Hook before_save Created by malai on 02-May-2024 09:52:04\n\t\t\tfunction before_save(){\n\t\t\t\t// jscall.input.idoc = jscall.input.idoc.toString()\n\t\t\t  return true;\n\t\t\t}","AfterSave":"//**** Hook after_save Created by malai on 30-Apr-2024 16:31:04\n\t\t\tfunction after_save(){\n\t\t\t\tif (jscall.mode.toUpperCase() == \"INSERT\"){\n\t\t\t\t\tline_val = CralDB.QueryByComp(\"select e_inv_no,line_cnt from {{einv_header}} where e_inv_no='$1'\", jscall.company, jscall.input.e_inv_no)\n\t\t\t\t\tif (line_val.length == 0){\n\t\t\t\t\t\tjscall_error = \"Header Not Found\"\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tline_count = line_val[0].line_cnt + 1\n\t\t\t\t\t\tupdate_line_count = line_val[0]\n\t\t\t\t\t\tupdate_line_count.line_cnt = line_count\n\t\t\t\t\t\tupdate_ret = CralDB.PublishTopic(\"einv_header\", jscall.company, \"Update\", update_line_count, jscall.user)\n\t\t\t\t\t\tif (update_ret.Success != true){\n\t\t\t\t\t\t\t// Line Count Not Updated Error should be handled\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t  return true;\n\t\t\t}","BeforeDelete":"","AfterDelete":"//**** Hook after_delete Created by malai on 30-Apr-2024 17:09:49\n\t\t\tfunction after_delete(){\n\t\t\t  line_val = CralDB.QueryByComp(\"select e_inv_no,line_cnt from {{einv_header}} where e_inv_no='$1'\", jscall.company, jscall.input.e_inv_no)\n\t\t\t\tif (line_val.length == 0){\n\t\t\t\t\tjscall_error = \"Header Not Found\"\n\t\t\t\t\t// return false;\n\t\t\t\t} else {\n\t\t\t\t\tline_count = line_val[0].line_cnt - 1\n\t\t\t\t\tupdate_line_count = line_val[0]\n\t\t\t\t\tupdate_line_count.line_cnt = line_count\n\t\t\t\t\tupdate_ret = CralDB.PublishTopic(\"einv_header\", jscall.company, \"Update\", update_line_count, jscall.user)\n\t\t\t\t\tif (update_ret.Success != true){\n\t\t\t\t\t\t// Line Count Not Updated Error should be handled\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t  return true;\n\t\t\t}"},{"Topic":{"Name":"entity_data_set","Description":"Entity Data Set","Keys":["sup_company","data_set"],"SendAlertOnFail":true,"DistributionList":[],"HotTopic":true,"FieldDefs":[{"FieldName":"sup_company","Description":"Supplier Company","Sequence":1,"DataType":"Integer","Length":4,"IsKey":true,"IndexSequence":1,"Props":{"List":false,"ListID":"","ReferenceField":"sup_company","RefersTo":"supplier_companies"},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":true,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"data_set","Description":"Data Set","Sequence":2,"DataType":"String","Length":10,"IsKey":true,"IndexSequence":2,"Props":{"List":false,"ListID":"","ReferenceField":"data_set","RefersTo":"data_set"},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":true,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"skip_master","Description":"Skip Master","Sequence":3,"DataType":"Boolean","Length":1,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"skip_einv_no_iter","Description":"Skip E-Invoice Number Iteration","Sequence":4,"DataType":"Boolean","Length":1,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"sum_line250","Description":"Sum Line Over 250","Sequence":5,"DataType":"Boolean","Length":1,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"sum_lineb250","Description":"Sum Line within 250","Sequence":6,"DataType":"Boolean","Length":1,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"skip_duplicate_files","Description":"Skip Duplicate Files","Sequence":7,"DataType":"Boolean","Length":1,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""}],"Segments":[],"AdditionalProps":null,"References":[{"Name":"entity_data_set","Sequence":1,"Columns":["data_set"],"RefersTo":"data_set","ReferenceFields":["data_set"],"OnDelete":"RESTRICT","OnUpdate":"RESTRICT"},{"Name":"entity_data_set","Sequence":2,"Columns":["sup_company"],"RefersTo":"supplier_companies","ReferenceFields":["sup_company"],"OnDelete":"RESTRICT","OnUpdate":"RESTRICT"}],"Indices":[],"SharedTable":true,"CreatedBy":"parthi","ModifiedBy":"malai","CreatedDate":"2024-06-15T10:21:16.338548+08:00","ModifiedDate":"2024-12-24T18:48:28.918063+08:00","EnableComments":false,"ReferenceFields":null,"ReadQuery":"SELECT * FROM {{entity_data_set}} "},"BeforeSave":"//**** Hook before_save Created by malai on 12-Sep-2024 15:09:22\n\t\t\tfunction before_save(){\n\t\t\t  return true;\n\t\t\t}","AfterSave":"","BeforeDelete":"","AfterDelete":""},{"Topic":{"Name":"number_defaults","Description":"Numbering Defaults","Keys":["data_set","comp"],"SendAlertOnFail":true,"DistributionList":[],"HotTopic":true,"FieldDefs":[{"FieldName":"data_set","Description":"Data Set","Sequence":1,"DataType":"String","Length":10,"IsKey":true,"IndexSequence":1,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":true,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"comp","Description":"Company","Sequence":2,"DataType":"Integer","Length":4,"IsKey":true,"IndexSequence":2,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"man_inv_ngrp","Description":"Manual Invoice Number Group","Sequence":3,"DataType":"String","Length":3,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"ngrp","RefersTo":"number_grp"},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"man_inv_seri","Description":"Manual Invoice Series","Sequence":4,"DataType":"String","Length":8,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"seri","RefersTo":"number_grp"},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"man_soinv_ngrp","Description":"SO Invoice Number Group","Sequence":5,"DataType":"String","Length":3,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"ngrp","RefersTo":"number_grp"},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"man_soinv_seri","Description":"SO Invoice Series","Sequence":6,"DataType":"String","Length":8,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"seri","RefersTo":"number_grp"},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"sor_ord_typ","Description":"SOR Order Type","Sequence":7,"DataType":"String","Length":3,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"ord_typ","RefersTo":"ord_type"},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"sls_ofc","Description":"SOR Sales Office","Sequence":8,"DataType":"String","Length":6,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"sls_ofc","RefersTo":"sls_off"},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"ret_reason","Description":"SOR Return Reason","Sequence":9,"DataType":"String","Length":6,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"ret_reason","RefersTo":"ret_reason"},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"sor_inv_ngrp","Description":"SOR Invoice Number Group","Sequence":10,"DataType":"String","Length":3,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"ngrp","RefersTo":"number_grp"},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"sor_inv_seri","Description":"SOR Invoice Series","Sequence":11,"DataType":"String","Length":8,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"seri","RefersTo":"number_grp"},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"pur_tran_typ","Description":"Purchase Transaction Type","Sequence":12,"DataType":"String","Length":3,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"src_tran_type","RefersTo":"src_tran_types"},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"pur_ord_typ","Description":"Purchase Order Type","Sequence":13,"DataType":"String","Length":3,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"pur_ord_type","RefersTo":"pur_ord_type"},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"pur_ofc","Description":"Purchase Office","Sequence":14,"DataType":"String","Length":6,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"pur_off","RefersTo":"pur_off"},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"pur_ret_reson","Description":"Purchase Return Reason","Sequence":15,"DataType":"String","Length":6,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"ret_reason","RefersTo":"ret_reason"},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"pur_inv_ngrp","Description":"Purchase Invoice Number Group","Sequence":16,"DataType":"String","Length":3,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"ngrp","RefersTo":"number_grp"},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"pur_inv_seri","Description":"Purchase Invoice Series","Sequence":17,"DataType":"String","Length":8,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"seri","RefersTo":"number_grp"},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"sls_tran_typ","Description":"Sales Transaction Type","Sequence":18,"DataType":"String","Length":3,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"src_tran_type","RefersTo":"src_tran_types"},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""}],"Segments":[],"AdditionalProps":null,"References":[{"Name":"number_defaults","Sequence":1,"Columns":["data_set"],"RefersTo":"data_set","ReferenceFields":["data_set"],"OnDelete":"RESTRICT","OnUpdate":"RESTRICT"}],"Indices":[],"SharedTable":false,"CreatedBy":"parthi","ModifiedBy":"parthi","CreatedDate":"2024-05-06T19:46:47.910251+08:00","ModifiedDate":"2024-12-03T19:10:18.019935+08:00","EnableComments":false,"ReferenceFields":null,"ReadQuery":"SELECT * FROM {{number_defaults}} "},"BeforeSave":"//**** Hook before_save Created by malai on 23-May-2024 17:29:34\n\t\t\tfunction before_save(){\n\t\t\t\tif (jscall.input.man_inv_ngrp != undefined \u0026\u0026 jscall.input.man_inv_ngrp != null \u0026\u0026 jscall.input.man_inv_ngrp != \"\"){\n\t\t\t\t\tman_inv = CralDB.QueryByComp(\"select seri from {{number_grp}} where ngrp='$1' and seri='$2'\", jscall.company, jscall.input.man_inv_ngrp, jscall.input.man_inv_seri)\n\t\t\t\t\tif (man_inv.length == 0){\n\t\t\t\t\t\tjscall_error = \"Manual Invoice series is not defined under given number group.\"\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (jscall.input.man_soinv_ngrp != undefined \u0026\u0026 jscall.input.man_soinv_ngrp != null \u0026\u0026 jscall.input.man_soinv_ngrp != \"\"){\n\t\t\t\t\tman_soinv = CralDB.QueryByComp(\"select seri from {{number_grp}} where ngrp='$1' and seri='$2'\", jscall.company, jscall.input.man_soinv_ngrp, jscall.input.man_soinv_seri)\n\t\t\t\t\tif (man_soinv.length == 0){\n\t\t\t\t\t\tjscall_error = \"SO Invoice series is not defined under given number group.\"\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t  return true;\n\t\t\t}","AfterSave":"","BeforeDelete":"","AfterDelete":""},{"Topic":{"Name":"pur_off","Description":"Purchase Office","Keys":["data_set","pur_off"],"SendAlertOnFail":true,"DistributionList":[],"HotTopic":true,"FieldDefs":[{"FieldName":"data_set","Description":"Data Set","Sequence":1,"DataType":"String","Length":10,"IsKey":true,"IndexSequence":1,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"pur_off","Description":"Purchase Office","Sequence":2,"DataType":"String","Length":6,"IsKey":true,"IndexSequence":2,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"dsca","Description":"Description","Sequence":3,"DataType":"String","Length":120,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"delf","Description":"Delete Flag","Sequence":4,"DataType":"Boolean","Length":1,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""}],"Segments":[],"AdditionalProps":null,"References":[],"Indices":[],"SharedTable":false,"CreatedBy":"leka","ModifiedBy":"saravanan","CreatedDate":"2024-07-30T12:50:52.07762+08:00","ModifiedDate":"2024-12-03T19:10:18.032873+08:00","EnableComments":false,"ReferenceFields":null,"ReadQuery":"SELECT * FROM {{pur_off}} "},"BeforeSave":"","AfterSave":"","BeforeDelete":"","AfterDelete":""},{"Topic":{"Name":"pur_ord_type","Description":"Purchase Order Type","Keys":["data_set","pur_ord_type"],"SendAlertOnFail":true,"DistributionList":[],"HotTopic":true,"FieldDefs":[{"FieldName":"data_set","Description":"Data Set","Sequence":1,"DataType":"String","Length":10,"IsKey":true,"IndexSequence":1,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"pur_ord_type","Description":"Purchase Order Type","Sequence":2,"DataType":"String","Length":3,"IsKey":true,"IndexSequence":2,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"dsca","Description":"Description","Sequence":3,"DataType":"String","Length":120,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"delf","Description":"Delete Flag","Sequence":4,"DataType":"Boolean","Length":1,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""}],"Segments":[],"AdditionalProps":null,"References":[],"Indices":[],"SharedTable":false,"CreatedBy":"leka","ModifiedBy":"leka","CreatedDate":"2024-07-30T12:48:19.36898+08:00","ModifiedDate":"2024-12-03T19:10:18.04018+08:00","EnableComments":false,"ReferenceFields":null,"ReadQuery":"SELECT * FROM {{pur_ord_type}} "},"BeforeSave":"","AfterSave":"","BeforeDelete":"","AfterDelete":""},{"Topic":{"Name":"ret_reason","Description":"Return Reason","Keys":["data_set","ret_reason"],"SendAlertOnFail":true,"DistributionList":[],"HotTopic":true,"FieldDefs":[{"FieldName":"data_set","Description":"Data Set","Sequence":1,"DataType":"String","Length":10,"IsKey":true,"IndexSequence":1,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"ret_reason","Description":"Return Reason","Sequence":2,"DataType":"String","Length":6,"IsKey":true,"IndexSequence":2,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"dsca","Description":"Description","Sequence":3,"DataType":"String","Length":120,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"delf","Description":"Delete Flag","Sequence":4,"DataType":"Boolean","Length":1,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""}],"Segments":[],"AdditionalProps":null,"References":[],"Indices":[],"SharedTable":false,"CreatedBy":"leka","ModifiedBy":"saravanan","CreatedDate":"2024-07-30T12:44:30.201139+08:00","ModifiedDate":"2024-12-03T19:10:18.048211+08:00","EnableComments":false,"ReferenceFields":null,"ReadQuery":"SELECT * FROM {{ret_reason}} "},"BeforeSave":"","AfterSave":"","BeforeDelete":"","AfterDelete":""},{"Topic":{"Name":"uploaded_file_details","Description":"Uploaded File Details","Keys":["upload_id"],"SendAlertOnFail":true,"DistributionList":[],"HotTopic":true,"FieldDefs":[{"FieldName":"upload_id","Description":"Upload ID","Sequence":1,"DataType":"Integer","Length":10,"IsKey":true,"IndexSequence":1,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"file_name","Description":"File Name","Sequence":2,"DataType":"String","Length":300,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":true,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"upload_user","Description":"Uploaded User","Sequence":3,"DataType":"String","Length":20,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":true,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"upload_time","Description":"Uploaded Date \u0026 Time","Sequence":4,"DataType":"DateTime","Length":20,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":true,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"revi","Description":"Revision","Sequence":5,"DataType":"Integer","Length":1,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""}],"Segments":[],"AdditionalProps":null,"References":[],"Indices":[],"SharedTable":false,"CreatedBy":"malai","ModifiedBy":"leka","CreatedDate":"2024-09-03T09:07:41.349233+08:00","ModifiedDate":"2024-12-24T18:48:28.922151+08:00","EnableComments":false,"ReferenceFields":null,"ReadQuery":"SELECT * FROM {{uploaded_file_details}} "},"BeforeSave":"//**** Hook before_save Created by leka on 03-Sep-2024 10:44:51\n\t\t\tfunction before_save(){\n\t\t\t\tupld_id = CralDB.QueryByComp(`select max(upload_id) from {{uploaded_file_details}}`,jscall.company)\n\t\t\t\tjscall.input.upload_id = upld_id[0].max + 1\n\t\t\t  return true;\n\t\t\t}","AfterSave":"","BeforeDelete":"","AfterDelete":""},{"Topic":{"Name":"user_access_configuration","Description":"User Access Configurations","Keys":["user_name"],"SendAlertOnFail":true,"DistributionList":[],"HotTopic":true,"FieldDefs":[{"FieldName":"user_name","Description":"User","Sequence":1,"DataType":"String","Length":100,"IsKey":true,"IndexSequence":1,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":true,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"company","Description":"Company","Sequence":2,"DataType":"Json","Length":50,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":true,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"data_set","Description":"Data Set","Sequence":3,"DataType":"Json","Length":50,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":true,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""}],"Segments":[],"AdditionalProps":null,"References":[],"Indices":[],"SharedTable":true,"CreatedBy":"parthi","ModifiedBy":"parthi","CreatedDate":"2024-12-04T13:19:06.022321+08:00","ModifiedDate":"2024-12-24T18:13:51.612728+08:00","EnableComments":false,"ReferenceFields":null,"ReadQuery":"SELECT * FROM {{user_access_configuration}} "},"BeforeSave":"","AfterSave":"","BeforeDelete":"","AfterDelete":""},{"Topic":{"Name":"user_access_control","Description":"User Access Control for data","Keys":["user_name","seq"],"SendAlertOnFail":true,"DistributionList":[],"HotTopic":true,"FieldDefs":[{"FieldName":"user_name","Description":"User","Sequence":1,"DataType":"String","Length":100,"IsKey":true,"IndexSequence":1,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"seq","Description":"Sequence","Sequence":2,"DataType":"Integer","Length":4,"IsKey":true,"IndexSequence":2,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"by_group","Description":"Restrict by Group","Sequence":3,"DataType":"Boolean","Length":1,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"group","Description":"Group","Sequence":4,"DataType":"String","Length":100,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"field","Description":"Field Name","Sequence":5,"DataType":"String","Length":100,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""},{"FieldName":"condition","Description":"Condition","Sequence":6,"DataType":"String","Length":100,"IsKey":false,"IndexSequence":0,"Props":{"List":false,"ListID":"","ReferenceField":"","RefersTo":""},"SetDefault":false,"Default":"","AutoGen":false,"Mandatory":false,"ClassValidators":"","DecimalPlaces":0,"UIComponent":""}],"Segments":[],"AdditionalProps":null,"References":[],"Indices":[],"SharedTable":true,"CreatedBy":"parthi","ModifiedBy":"parthi","CreatedDate":"2024-12-04T13:22:36.948636+08:00","ModifiedDate":"2024-12-24T18:13:51.618177+08:00","EnableComments":false,"ReferenceFields":null,"ReadQuery":"SELECT * FROM {{user_access_control}} "},"BeforeSave":"//**** Hook before_save Created by parthi on 09-Dec-2024 10:44:53\nfunction before_save(){\n\tif(jscall.input.user_name \u0026\u0026 jscall.mode=='insert'){\n\t\tsequence = CralDB.QueryByComp(\"select seq from {{user_access_control}} where user_name='$1'\",jscall.company,jscall.input.user_name)\n\t\t// jscall_error = sequence\n\t\t// jscall.input.seq = sequence + 1\n\t}else{\n\t\tjscall_error = \"else\"\n\t}\n\n\nreturn true;\n}","AfterSave":"","BeforeDelete":"","AfterDelete":""}],"BizObjects":[{"Bizobj":{"ObjectName":"addLayout","Description":"Add new report layout","external":false,"input_struct":"","out_success":"","out_fail":""},"Script":"//**** Business Object addLayout Created by parthi on 10-Jun-2024 15:17:07 ****//\r\n\r\nlet title = [\"comp_name\", \"comp_address\", \"comp_cont_details\"] // \"comp_cont_num\", \"comp_mail\"]\r\nlet report_header = [\"einv_version\", \"e_inv_no\", \"doc_uuid\", \"org_e_inv_no\", \"e_invdt\", \"term\"]\r\nlet group_supplier = [\"sup_code\", \"sup_name\", \"sup_tin\", \"sup_reg_brn\", \"sup_email\", \"sup_cont_num\", \"supplier_address\"]\r\nlet group_buyer = [\"inv_bp\", \"buy_name\", \"buy_tin\", \"buy_reg_brn\", \"buy_email\", \"buy_cont_num\", \"buyer_address\"]\r\n// let detail = [\"clas\", \"item\", \"item_desc\", \"dqua\", \"cuni\", \"pric\", \"disc\", \"stot\", \"ccur\", \"txai\", \"amti + txai\"]\r\nlet detail = [\"line\", \"item\", \"dqua\", \"cuni\", \"pric\", \"stot\", \"ccur\", \"txai\", \"amti + txai\"]\r\nlet detail_footer = [\"tote + tdis\", \"tote\", \"tott\", \"toti\", \"tdis\", \"tpat\"]\r\nlet group_footer = []\r\nlet report_footer = [\"etim\", \"Now()\", \"tracker.Page\"]\r\n\r\n\r\nfunction addReportLayout(layout_count){\r\n    response = []\r\n\r\n    repLayHeader = CralDB.QueryByComp(\"select layout_code from {{rep_layouts_header}} \",jscall.company)\r\n\r\n    layCount = layout_count - repLayHeader.length\r\n    for(m = 0; m \u003c layCount; m++){\r\n        temp_result = {}\r\n        newCode = generateTempCode(\"EINV_F\",repLayHeader.length + 1 + m)\r\n        layoutDesc = \"Layout Type \" + (repLayHeader.length + 1 + m).toString()\r\n        \r\n        insertRec = {\r\n            \"layout_code\": newCode,\r\n            \"layout_desc\":layoutDesc,\r\n            \"r_rep_head\":false,\r\n            // \"r_grp_head\":false,\r\n            \"r_footer\":false,\r\n            \"page_no\":true,\r\n            \"rep_typ\":\"A4\",\r\n            \"rep_format\":\"Portrait\",\r\n            \"back_clr_head\":\"#FFFFFF\",\r\n            \"cont_align_head\":\"left\",\r\n            \"back_clr_footer\":\"#FFFFFF\",\r\n            \"cont_align_footer\":\"left\",\r\n            \"back_clr_table\":\"#444444\",\r\n            \"no_pos_page_no\":\"left\",\r\n            \"font\":\"Roboto\",\r\n            \"model\":\"default\",\r\n            // \"is_report\": false,\r\n            \"is_report\": true,\r\n            \"report_name\": \"\",\r\n            \"logo\": \"\",\r\n            \"logo_const\": \"L,0,20\",\r\n            \"qr_code\": \"35,30\"\r\n        }\r\n        HeaderLayout = CralDB.PublishTopic(\"rep_layouts_header\",jscall.company, \"Insert\",insertRec,jscall.user)\r\n        temp_result.Header = HeaderLayout\r\n        if (HeaderLayout?.Success){\r\n            LineLayout = reportLayLine(newCode)\r\n            temp_result.Lines = LineLayout\r\n        }\r\n        response.push(temp_result)\r\n    }\r\n    return response\r\n}\r\nexports.addReportLayout = addReportLayout\r\n\r\nfunction reportLayLine(newCode){\r\n    lines_result = []\r\n    title_fields = [\r\n        {\"FieldName\": \"comp_name\", \"Description\": \"Company Name\"},\r\n        {\"FieldName\": \"comp_address\", \"Description\": \"Company Address\"},\r\n        {\"FieldName\": \"comp_cont_details\", \"Description\": \"Contact Details\"},\r\n        {\"FieldName\": `comp_cont_num`, \"Description\": \"Company Contact Number\"},\r\n        {\"FieldName\": `comp_mail`, \"Description\": \"Company Mail\"}\r\n    ]\r\n    \r\n    header_fields = CralUtil.GetTopic(\"einv_header\").FieldDefs\r\n    line_fields = CralUtil.GetTopic(\"einv_lines\").FieldDefs.filter(line =\u003e line.FieldName !== \"e_inv_no\")\r\n    additionalFields = [\r\n        {\"FieldName\": \"buyer_address\",  \"Description\": \"Buyer Address\"}, \r\n        {\"FieldName\":\"supplier_address\",\"Description\": \"Supplier Address\"}, \r\n        {\"FieldName\": \"amti + txai\",    \"Description\": \"Total Amount\"}, \r\n        {\"FieldName\": \"tote + tdis\",    \"Description\": \"Sub Total\"}, \r\n        {\"FieldName\": \"Now()\",          \"Description\": \"Printed Date \u0026 Time\"}, \r\n        {\"FieldName\": \"tracker.Page\",   \"Description\": \"Page No.\"}\r\n    ]\r\n\r\n    insertLines(additionalFields, \r\n                insertLines(line_fields, \r\n                insertLines(orderFields([...report_header, \r\n                                         ...group_supplier,\r\n                                         ...group_buyer, \r\n                                         ...detail, \r\n                                         ...detail_footer], \r\n                                         header_fields), \r\n                insertLines(title_fields, 1))))\r\n    return lines_result\r\n}\r\n\r\nfunction insertLines(input_fields, iter){\r\n    input_fields.forEach(data =\u003e {\r\n        let [grp, seq] = getGroupTypeAndSequence(data.FieldName)\r\n        line = {\r\n            \"layout_code\":  newCode,\r\n            \"line\":         iter,\r\n            \"field_name\":   data.FieldName,\r\n            \"grp_typ\":      grp,\r\n            \"print\":        seq ? true : false,\r\n            \"seq\":          seq,\r\n            // \"field_value\":  data.FieldName === \"comp_cont_details\" ? `fPrint(\"Contact No.: \", comp_cont_num, \"    Email: \", comp_mail)`: data.FieldName,\r\n            \"field_value\":  getFieldValue(data.FieldName),\r\n            \"field_label\":  data.Description,\r\n            \"style\":        getDefaultStyle(grp, data.FieldName),\r\n            \"field_print\":  seq ? ( grp == \"Title\" ? false : true ) : false,\r\n            \"print_label\":  getShortLabel(data.FieldName),\r\n            \"ref\":          false\r\n        }\r\n        lines_result.push(CralDB.PublishTopic(\"rep_layouts_line\", jscall.company, \"Insert\", line, jscall.user))\r\n        iter += 1\r\n    })\r\n    return iter\r\n}\r\n\r\nfunction getFieldValue(fld_name){\r\n    switch (fld_name){\r\n        case \"comp_cont_details\":\r\n            return `fPrint(\"Contact No.: \", comp_cont_num, \"    Email: \", comp_mail)`\r\n        default:\r\n            return fld_name\r\n    }\r\n    return fld_name\r\n}\r\nfunction getShortLabel(fld_name) {\r\n    const fieldMappings = {\r\n        \"e_inv_no\":     \"Number\",\r\n        \"einv_version\": \"Version\",\r\n        \"org_e_inv_no\": \"Org. Einv. Ref. No.\",\r\n        \"e_invdt\":      \"Document Date\",\r\n        \"clas\":         \"Class.\",\r\n        \"dqua\":         \"Qty\",\r\n        \"cuni\":         \"UOM\",\r\n        \"disc\":         \"Disc%\",\r\n        \"stot\":         \"Amount\",\r\n        \"txai\":         \"Tax\",\r\n        \"etim\":         \"Validated Date \u0026 Time\",\r\n        \"sup_badsca\":   \"Business Act.\",\r\n        \"tpat\":         \"Invoice Amount\",\r\n        \"line\":         \"S No\",\r\n        \"tdis\":         \"Total Discount\",\r\n        \"sup_code\":     \"Code\",\r\n        \"inv_bp\":       \"Code\",\r\n        \"sup_name\":     \"Name\",\r\n        \"buy_name\":     \"Name\",\r\n        \"tott\":         \"Tax Amount\",\r\n        \"doc_uuid\":     \"UUID\"\r\n    };\r\n    if (fieldMappings[fld_name]) {\r\n        return fieldMappings[fld_name];\r\n    }\r\n    if (fld_name.toUpperCase().includes(\"TIN\"))         return \"TIN\";\r\n    if (fld_name.toUpperCase().includes(\"BRN\"))         return \"BRN\";\r\n    if (fld_name.toUpperCase().includes(\"NRIC\"))        return \"NRIC\";\r\n    if (fld_name.toUpperCase().includes(\"PASSPORT\"))    return \"Passport No.\";\r\n    if (fld_name.toUpperCase().includes(\"SST\"))         return \"SST\";\r\n    if (fld_name.toUpperCase().includes(\"CONT_NUM\"))    return \"Contact Number\";\r\n    if (fld_name.toUpperCase().includes(\"MAIL\"))        return \"E-Mail\";\r\n    if (fld_name.toUpperCase().includes(\"MSIC\"))        return \"MSIC\";\r\n    if (fld_name.toUpperCase().includes(\"ADDRESS\"))     return \"Address\";\r\n    return \"\";\r\n}\r\n\r\nfunction getDefaultStyle(group, fld_name) {\r\n    // let amountFields = [\"tpat\", \"toti\", \"tott\", \"tote\", \"tote + tdis\", \"amti + txai\", \"txai\", \"stot\", \"pric\"]\r\n    let amountFields = [\"tpat\", \"toti\", \"tott\", \"tote\", \"tote + tdis\", \"amti + txai\"]\r\n    switch (group) {\r\n        case \"Title\":\r\n            return fld_name === \"comp_name\" ? \"B,NA,AC\" : \"NA,NA,AC\";\r\n        case \"Report Header\":\r\n        case \"Group Supplier\":\r\n        case \"Group Buyer\":\r\n        case \"Report Footer\":\r\n            return fld_name === \"tracker.Page\" ? \"NA,T,AC\" : \"NA,NA,AL\";\r\n        case \"Detail\":\r\n            return amountFields.includes(fld_name) ? \"NA,NA,AR\" : \"NA,NA,AC\";\r\n        case \"Detail Footer\":\r\n            return \"NA,NA,AR\";\r\n        case \"Group Footer\":\r\n            return \"\"\r\n        default:\r\n            return \"\";\r\n    }\r\n}\r\nexports.getDefaultStyle = getDefaultStyle\r\n\r\n\r\nfunction getGroupTypeAndSequence(fld_name){\r\n    if (title.includes(fld_name)) {\r\n        return [\"Title\", title.indexOf(fld_name) + 1]\r\n    }\r\n    if (report_header.includes(fld_name)) {\r\n        return [\"Report Header\", report_header.indexOf(fld_name) + 1]\r\n    }\r\n    if (group_supplier.includes(fld_name)) {\r\n        return [\"Group Supplier\", group_supplier.indexOf(fld_name) + 1]\r\n    }\r\n    if (group_buyer.includes(fld_name)) {\r\n        return [\"Group Buyer\", group_buyer.indexOf(fld_name) + 1]\r\n    }\r\n    if (detail.includes(fld_name)) {\r\n        return [\"Detail\", detail.indexOf(fld_name) + 1]\r\n    }\r\n    if (detail_footer.includes(fld_name)) {\r\n        return [\"Detail Footer\", detail_footer.indexOf(fld_name) + 1]\r\n    }\r\n    if (group_footer.includes(fld_name)) {\r\n        return [\"Group Footer\", group_footer.indexOf(fld_name) + 1]\r\n    }\r\n    if (report_footer.includes(fld_name)) {\r\n        return [\"Report Footer\", report_footer.indexOf(fld_name) + 1]\r\n    }\r\n    return [\"Reference\", 0]\r\n}\r\n\r\nfunction orderFields(array1, array2){\r\n    let orderMap = new Map(array1.map((item, index) =\u003e [item, index]));\r\n\r\n    // Sort array2 based on the order in array1 (case-sensitive)\r\n    array2.sort((a, b) =\u003e {\r\n        let orderA = orderMap.get(a.FieldName);\r\n        let orderB = orderMap.get(b.FieldName);\r\n        return (orderA === undefined ? Infinity : orderA) - (orderB === undefined ? Infinity : orderB);\r\n    });\r\n\r\n    return array2\r\n}\r\nfunction getDefaultModel(){\r\n\r\n    reportlayout = CralDB.QueryByComp(\"select * from {{rep_layouts_header }} where layout_code = '$1'\",jscall.company,jscall.input.layout_code)\r\n\r\n    if(reportlayout.length != 0){\r\n\r\n        alignment = {\r\n            \"back_clr_head\":\"#FFFFFF\",\r\n            \"cont_align_head\":\"left\",\r\n            \"back_clr_footer\":\"#FFFFFF\",\r\n            \"cont_align_footer\":\"left\",\r\n            \"back_clr_table\":\"#ECECEC\",\r\n            \"no_pos_page_no\":\"left\"\r\n        }\r\n\r\n        resp = CralDB.PublishTopic(\"rep_layouts_header\",jscall.company,\"Update\",alignment,jscall.user)\r\n    }else{\r\n        jscall_error = \"Layout Not Present\"\r\n        return false\r\n    }\r\n\r\n}\r\nfunction resetLayout(){\r\n\r\n    reset = CralDB.QueryByComp(\"select * from {{rep_layouts_header }} where layout_code = '$1'\",jscall.company,jscall.input.layout_code)\r\n\r\n    if(reset.length != 0){\r\n\r\n        alignment = {\r\n            \"layout_code\": jscall.input.layout_code,\r\n            \"r_rep_head\":false,\r\n            \"r_grp_head\":false,\r\n            \"r_footer\":false,\r\n            \"page_no\":true,\r\n            \"rep_typ\":\"A4\",\r\n            \"rep_format\":\"P\"\r\n        }\r\n\r\n        resp = CralDB.PublishTopic(\"rep_layouts_header\",jscall.company,\"Update\",alignment,jscall.user)\r\n\r\n    }else{\r\n        jscall_error = \"Layout Not Present\"\r\n        return false\r\n    }\r\n}\r\n\r\nfunction generateTempCode(seri, iter){\r\n    return seri + (iter.toString()).padStart(9 - seri.length, '0')\r\n}\r\n\r\n"},{"Bizobj":{"ObjectName":"cancelInvoice","Description":"Cancellation","external":true,"input_struct":"","out_success":"","out_fail":""},"Script":"//**** Business Object cancelInvoice Created by parthi on 06-May-2024 17:24:52 ****//\r\n\r\nvar einvois = require(\"./scripts/Business_Objects/createEinvoice\")\r\n\r\nfunction cancelInvLines(){\r\n    header_data = CralDB.QueryByComp(`select e_inv_no,dataset,comp,tran,idoc,doct,src_type,inv_bp,ship_bp,sup_code from {{einv_header}} where comp=${jscall.input.Company} and tran='${jscall.input.TransactionType}' and idoc=${jscall.input.InvoiceNumber}`, jscall.company)\r\n    if (header_data?.length != 0){\r\n        \r\n        self_inv = false\r\n\r\n        let cncl_seq = CralDB.QueryByComp(`select count(e_inv_no) from {{cancel_header}} where e_inv_no='${header_data[0]?.e_inv_no}'`, jscall.company)[0].count + 1\r\n        let series = jscall.input.LNParameter?.ManualId ? jscall.input.LNParameter.ManualId : (jscall.input.LNParameter?.OrderSeries ? jscall.input.LNParameter.OrderSeries : \"\");\r\n        if (header_data[0].doct == \"11\" || header_data[0].doct == \"12\" || header_data[0].doct == \"13\" || header_data[0].doct == \"14\"){\r\n            self_inv = true\r\n        }\r\n        let with_rec = jscall.input.LNParameter?.WithReceipts ? jscall.input.LNParameter.WithReceipts.toUpperCase() == \"NO\" ? false : true : false\r\n        let scale = jscall.input.LNParameter?.Scale.toUpperCase()\r\n        let err_message = isCancelAvailable(header_data[0].src_type, series, header_data[0].dataset,\r\n                                            header_data[0].comp,\r\n                                            self_inv ? header_data[0].sup_code : header_data[0].inv_bp, \r\n                                            self_inv ? '' : header_data[0].ship_bp, with_rec)\r\n        if (err_message){\r\n            return {\r\n                \"error\": err_message,\r\n                \"status\": false\r\n            }\r\n        }\r\n        \r\n        header_payload = {\r\n            \"e_inv_no\": header_data[0].e_inv_no,\r\n            \"seqn\": cncl_seq,\r\n            \"data_set\": header_data[0].dataset,\r\n            \"comp\": header_data[0].comp,\r\n            \"tran\": header_data[0].tran,\r\n            \"idoc\": header_data[0].idoc,\r\n            \"doct\": header_data[0].doct,\r\n            \"reason\": jscall.input.Reason,\r\n            \"adcn\": \"\",\r\n            \"cdte\": einvois.getCurrentDateTime(),\r\n            \"errm\": \"\",\r\n            \"with_ship\": jscall.input.LNParameter?.WithShipments ? jscall.input.LNParameter.WithShipments.toUpperCase() == \"NO\" ? false : true : false,\r\n            \"with_rec\": with_rec,\r\n            \"scale\": scale == \"UP\" ? \"10\" : scale == \"DOWN\" ? \"20\": \"\",\r\n            \"seri\": series,\r\n            \"ord_typ\": jscall.input.LNParameter?.OrderType ? jscall.input.LNParameter.OrderType : \"\",\r\n            \"sls_pur_off\": jscall.input.LNParameter?.SalesOffice ? jscall.input.LNParameter.SalesOffice : (jscall.input.LNParameter?.PurchaseOffice ? jscall.input.LNParameter.PurchaseOffice : \"\"),\r\n            \"ret_reason\": jscall.input.LNParameter?.ReturnReason ? jscall.input.LNParameter.ReturnReason : \"\",\r\n            \"tran_type\": jscall.input.LNParameter?.TransactionType ? jscall.input.LNParameter.TransactionType : \"\",\r\n            \"all_lines\": jscall.input.AllLines,\r\n            // \"target_doc\": \"\"\r\n        }\r\n        header_payload[\"target_doc\"] = getTargetDoc(header_data[0].src_type, header_payload.with_rec, header_payload.with_ship)\r\n        \r\n        header_result = CralDB.PublishTopic(\"cancel_header\", jscall.company, \"Insert\", header_payload, jscall.user)\r\n        \r\n        if (header_result?.Success != true){\r\n            return {\r\n                \"error\": header_result,\r\n                \"status\": false\r\n            }\r\n        } else {\r\n            header_update_result = CralDB.PublishTopic(\"einv_header\", jscall.company, \"Update\", {\r\n                \"e_inv_no\": header_result.Message.e_inv_no,\r\n                \"einv_stat\": \"50\",\r\n                \"esta\": \"50\",\r\n                \"modi_stat\": jscall.input.AllLines ? \"20\" : \"30\"\r\n            }, jscall.user)\r\n            if (!header_update_result?.Success){\r\n                CralUtil.LogInfo(\"CancelInvoice\", header_result.Message.e_inv_no, header_update_result)\r\n            }\r\n            jscall.input.Lines.forEach(line_rec =\u003e {\r\n                lines_payload = {\r\n                    \"e_inv_no\": header_result.Message.e_inv_no,\r\n                    \"seqn\": header_result.Message.seqn,\r\n                    \"line\": line_rec.line,\r\n                    \"comp\": header_result.Message.comp,\r\n                    \"tran\": header_result.Message.tran,\r\n                    \"idoc\": header_result.Message.idoc,\r\n                    \"reason\": line_rec.reason,\r\n                    \"adcn\": \"\",\r\n                    \"errm\": \"\"\r\n                }\r\n                result = CralDB.PublishTopic(\"cancel_line\", jscall.company, \"Insert\", lines_payload, jscall.user)\r\n                if (!result?.Success){\r\n                    CralUtil.LogInfo(\"Error_Cancelling\", header_result.Message.e_inv_no, {payload: lines_payload, results: result})\r\n                    return {\r\n                        \"error\": \"Unable to Cancel.\",\r\n                        \"status\": false\r\n                    }\r\n                } else {\r\n                    line_update_result = CralDB.PublishTopic(\"einv_lines\", jscall.company, \"Update\", {\r\n                        \"e_inv_no\": result.Message.e_inv_no,\r\n                        \"line\": result.Message.line,\r\n                        \"lsta\": \"50\",\r\n                        \"modi_lsta\": \"20\"\r\n                    }, jscall.user)\r\n                    if (!line_update_result?.Success){\r\n                        CralUtil.LogInfo(\"CancelInvoiceLineError\", result.Message.e_inv_no, line_update_result)\r\n                    }\r\n                }\r\n            })\r\n\r\n            // change modi_stat\r\n\r\n\r\n            return {\r\n                \"error\": \"\",\r\n                \"status\": true\r\n            }\r\n        }\r\n    } else {\r\n        return {\r\n            \"error\": \"Invoice Not Found\",\r\n            \"status\": false\r\n        }\r\n    }\r\n}\r\n\r\nfunction getCNDetails(){\r\n    results = []\r\n    cn_data = CralDB.QueryByComp(`select * from {{cancel_header}} where adcn=''`, jscall.company)\r\n    \r\n    cn_data.forEach(rec =\u003e {\r\n        results.push({\r\n            \"EInvoiceNumber\": rec.e_inv_no,\r\n            \"Sequence\": rec.seqn,\r\n            \"TargetDoc\": rec.target_doc,\r\n            \"AllLines\": rec.all_lines,\r\n            \"Company\": rec.comp,\r\n            \"InvoiceNumber\": rec.idoc,\r\n            \"DocumentType\": rec.doct,\r\n            \"TransactionType\": rec.tran,\r\n            \"Reason\": rec.reason,\r\n            // \"LNParameter\": {\r\n            //     \"Scale\": rec.scale,\r\n            //     \"ManualId\": rec.seri\r\n            // },\r\n            \"LNParameter\": getLNParams(rec),\r\n            \"Lines\": CralDB.QueryByComp(`select line as \"Line\", reason as \"Reason\" from {{cancel_line}} where e_inv_no='${rec.e_inv_no}' and seqn=${rec.seqn}`, jscall.company)\r\n        })\r\n    })\r\n\r\n    return results\r\n}\r\n\r\nfunction getLNParams(cncl_inv){\r\n    param_obj = {}\r\n    param_obj[\"Scale\"] = CralUtil.GetListDesc(\"scale\", cncl_inv.scale)\r\n    // if (cncl_inv.target_doc == \"10\" || cncl_inv.target_doc == \"20\" || cncl_inv.target_doc == \"30\"){\r\n    //     param_obj[\"WithReceipts\"] = cncl_inv.with_rec ? \"Yes\" : \"No\"\r\n    // }\r\n    switch (cncl_inv.target_doc){\r\n        case \"10\":\r\n            param_obj[\"WithReceipts\"] = cncl_inv.with_rec ? \"Yes\" : \"No\"\r\n            param_obj[\"ManualId\"] = cncl_inv.seri\r\n        break;\r\n        case \"20\":\r\n            param_obj[\"WithReceipts\"] = cncl_inv.with_rec ? \"Yes\" : \"No\"\r\n            param_obj[\"OrderType\"] = cncl_inv.ord_typ\r\n            param_obj[\"SalesOffice\"] = cncl_inv.sls_pur_off\r\n            param_obj[\"ReturnReason\"] = cncl_inv.ret_reason\r\n            param_obj[\"OrderSeries\"] = cncl_inv.seri\r\n        break;\r\n        case \"30\":\r\n            param_obj[\"WithReceipts\"] = cncl_inv.with_rec ? \"Yes\" : \"No\"\r\n            param_obj[\"TranType\"] = cncl_inv.tran_type\r\n        break;\r\n        case \"40\":\r\n            param_obj[\"WithShipments\"] = cncl_inv.with_ship ? \"Yes\" : \"No\"\r\n            param_obj[\"OrderType\"] = cncl_inv.ord_typ\r\n            param_obj[\"PurchaseOffice\"] = cncl_inv.sls_pur_off\r\n            param_obj[\"ReturnReason\"] = cncl_inv.ret_reason\r\n            param_obj[\"OrderSeries\"] = cncl_inv.seri\r\n        break;\r\n        case \"50\":\r\n            param_obj[\"WithShipments\"] = cncl_inv.with_ship ? \"Yes\" : \"No\"\r\n            param_obj[\"TranType\"] = cncl_inv.tran_type\r\n        break;\r\n    }\r\n    return param_obj\r\n}\r\n\r\nfunction updateAdditionalRef(){\r\n    let results = []\r\n    CralUtil.LogInfo(\"AdditionalRefUpdate\", \"cancel_header\", jscall.input)\r\n    jscall.input.forEach(rec =\u003e {\r\n        payload = {\r\n            // \"comp\": rec.Company,\r\n            // \"idoc\": rec.InvoiceNumber,\r\n            // \"tran\": rec.TransactionType,\r\n            \"e_inv_no\": rec.EInvoiceNumber,\r\n            \"seqn\": rec.Sequence,\r\n            \"adcn\": rec.AdditionalDoc,\r\n            \"errm\": rec.ErrorMessage\r\n        }\r\n        CralUtil.LogInfo(\"Test\", \"Test\", payload)\r\n        // results.push(CralDB.PublishTopic(\"cancel_header\", jscall.company, \"Update\", payload, jscall.user))\r\n        CralUtil.LogInfo(\"TestInsert\", \"Tracking\", CralDB.PublishTopic(\"cancel_header\", jscall.company, \"Update\", payload, jscall.user))\r\n        rec.Lines.forEach(rec_line =\u003e {\r\n            lines_payload = {\r\n                // \"comp\": rec.Company,\r\n                // \"idoc\": rec.InvoiceNumber,\r\n                // \"tran\": rec.TransactionType,\r\n                \"e_inv_no\": rec.EInvoiceNumber,\r\n                \"seqn\": rec.Sequence,\r\n                \"line\": rec_line.Line,\r\n                \"adcn\": rec_line.AdditionalLine,\r\n                \"errm\": rec_line.ErrorMessage\r\n            }\r\n            results.push(CralDB.PublishTopic(\"cancel_line\", jscall.company, \"Update\", lines_payload, jscall.user))\r\n            CralUtil.LogInfo(\"CancelDetail\", \"TrackingLine\", lines_payload)\r\n        })\r\n    })\r\n    results.forEach(update_ret =\u003e {\r\n        if (!update_ret?.Success){\r\n            CralUtil.LogInfo(\"CancellationUpdationError\", \"InvoiceCancellation\", update_ret)\r\n        }\r\n    })\r\n    return results\r\n}\r\n\r\nfunction isCancelAvailable(cncl_src_type, cncl_seri, data_set, company, buyer_code, shipper_code, with_rec){\r\n    CralUtil.LogInfo(\"CheckBuyer\", \"CancelInvoice\", [buyer_code, shipper_code])\r\n    // switch (cncl_src_type) {\r\n    //     case \"10\":\r\n    //         cncl_ngrp = CralDB.QueryByComp(`select man_inv_ngrp from {{number_defaults}} where data_set='${data_set}' and comp=${company}`, jscall.company)[0]?.man_inv_ngrp\r\n    //         cncl_type = \"Manuval Sales\"\r\n    //         // if (cncl_ngrp){\r\n    //         //     if ( !(CralDB.QueryByComp(`select * from {{number_grp}} where data_set='${data_set}' and ngrp='${cncl_ngrp}' and seri='${cncl_seri}'`, jscall.company).length) ){\r\n    //         //         return \"Manual ID Not Found\"\r\n    //         //     }\r\n    //         // } else {\r\n    //         //     return \"Number Group for Manuval Sales is Not Maintained.\"\r\n    //         // }\r\n    //         break;\r\n    //     case \"20\":\r\n    //         cncl_ngrp = CralDB.QueryByComp(`select man_soinv_ngrp from {{number_defaults}} where data_set='${data_set}' and comp=${company}`, jscall.company)[0]?.man_soinv_ngrp\r\n    //         cncl_type = \"SO Invoice\"\r\n    //         // if (cncl_ngrp){\r\n    //         //     if ( !(CralDB.QueryByComp(`select * from {{number_grp}} where data_set='${data_set}' and ngrp='${cncl_ngrp}' and seri='${cncl_seri}'`, jscall.company).length) ){\r\n    //         //         return \"Order Series Not Found\"\r\n    //         //     }   \r\n    //         // } else {\r\n    //         //     return \"Number Group for SO Invoice is Not Maintained.\"\r\n    //         // }\r\n    //         break;\r\n    // }\r\n\r\n    if (!with_rec){\r\n        cncl_ngrp = CralDB.QueryByComp(`select man_inv_ngrp from {{number_defaults}} where data_set='${data_set}' and comp=${company}`, jscall.company)[0]?.man_inv_ngrp\r\n        cncl_type = \"Manuval Sales\"\r\n    } else {\r\n        cncl_ngrp = CralDB.QueryByComp(`select man_soinv_ngrp from {{number_defaults}} where data_set='${data_set}' and comp=${company}`, jscall.company)[0]?.man_soinv_ngrp\r\n        cncl_type = \"SO Invoice\"\r\n    }\r\n\r\n    if (cncl_ngrp){\r\n        if ( !(CralDB.QueryByComp(`select * from {{number_grp}} where data_set='${data_set}' and ngrp='${cncl_ngrp}' and seri='${cncl_seri}'`, jscall.company).length) ){\r\n            return `Order Series Not Found for ${data_set} - ${cncl_ngrp} - ${cncl_seri}`\r\n        }   \r\n    } else {\r\n        return `Number Group for ${cncl_type} is Not Maintained.`\r\n    }\r\n\r\n    if (!isActiveBuyer(data_set, buyer_code) || shipper_code ? !isActiveBuyer(data_set, shipper_code) : false){\r\n        return \"Inactive BP\"\r\n    }\r\n    return \"\"\r\n}\r\n\r\nfunction isActiveBuyer(ds, code){\r\n    return CralDB.QueryByComp(`select buy_comp_active from {{buyer_companies}} where data_set='${ds}' and buy_code='${code}'`, jscall.company)[0]?.buy_comp_active\r\n}\r\n\r\nfunction getTargetDoc(srcType, withReceipt, withShipment ){ //, docType) {\r\n    // if (docType == '02' || docType == '12'){\r\n    //     switch (srcType){\r\n    //         case \"10\": \r\n\r\n    //     }\r\n    // } else {\r\n        switch (srcType) {\r\n            case \"10\":\r\n                return !withReceipt ? \"10\" : \"\";\r\n            case \"20\":\r\n                return withReceipt ? \"20\" : \"10\";\r\n            case \"30\":\r\n            case \"50\":\r\n                return withShipment ? \"40\" : \"50\";\r\n            case \"40\":\r\n                return !withReceipt ? \"30\" : \"\";\r\n            default:\r\n                return \"\";\r\n        }\r\n    // }\r\n    return \"\"\r\n}\r\n\r\n\r\n// Old Script\r\n// function cancelInvLines(){\r\n    \r\n//     line_arr = []\r\n//     header_rec = CralDB.QueryByComp(\"select * from {{einv_header}} where comp=$1 and tran='$2' and idoc=$3\",jscall.company,jscall.input.Company,jscall.input.TransactionType,jscall.input.InvoiceNumber)\r\n//     // return header_rec\r\n//     if (jscall.input.AllLines == true){\r\n       \r\n//         getAllLines = CralDB.QueryByComp(\"select * from {{einv_lines}} where comp=$1 and tran='$2' and idoc=$3\",jscall.company,jscall.input.Company,jscall.input.TransactionType,jscall.input.InvoiceNumber)\r\n        \r\n//         for (let i = 0; i \u003c getAllLines.length; i++){\r\n\r\n//             updateMultiRec = {\r\n//                 \"comp\":getAllLines[i].comp,\r\n//                 \"tran\":getAllLines[i].tran,\r\n//                 \"idoc\":getAllLines[i].idoc,\r\n//                 \"line\":getAllLines[i].line,\r\n//                 \"reason\":jscall.input.Lines[i].Reason\r\n//             }\r\n//            check = CralDB.PublishTopic(\"cancel_line\", jscall.company, \"Insert\", updateMultiRec, jscall.user)\r\n//             line_arr.push(updateMultiRec)\r\n\r\n//             statusUpdate = {\r\n//                 \"comp\":getAllLines[i].comp,\r\n//                 \"tran\":getAllLines[i].tran,\r\n//                 \"idoc\":getAllLines[i].idoc,\r\n//                 \"line\":getAllLines[i].line,\r\n//                 \"lsta\":'50',\r\n//                 \"cncl\":true\r\n//             }\r\n//             CralDB.PublishTopic(\"einv_lines\", jscall.company, \"Update\",statusUpdate, jscall.user)\r\n            \r\n//         }\r\n//     }else{\r\n//         // getline = CralDB.QueryByComp(\"select * from {{einv_lines}} where comp=$1 and tran='$2' and idoc=$3 and line=$4\",jscall.company,jscall.input.Company,jscall.input.TransactionType,jscall.input.InvoiceNumber,jscall.input.Lines[0].Line)\r\n//         // return getline\r\n//         for (let i = 0; i \u003c jscall.input.Lines.length; i++){\r\n\r\n//             updateSingleRec = {\r\n//                 \"comp\":jscall.input.Company,\r\n//                 \"tran\":jscall.input.TransactionType,\r\n//                 \"idoc\":jscall.input.InvoiceNumber,\r\n//                 \"line\":jscall.input.Lines[i].Line,\r\n//                 \"reason\":jscall.input.Lines[i].Reason,\r\n            \r\n//             }\r\n//           check =  CralDB.PublishTopic(\"cancel_line\", jscall.company, \"Insert\", updateSingleRec, jscall.user)\r\n        \r\n//          statusUpdate = {\r\n//             \"comp\":jscall.input.Company,\r\n//             \"tran\":jscall.input.TransactionType,\r\n//             \"idoc\":jscall.input.InvoiceNumber,\r\n//             \"line\":jscall.input.Lines[i].Line,\r\n//             \"lsta\":'50',\r\n//             \"cncl\":true\r\n//             }\r\n//             CralDB.PublishTopic(\"einv_lines\", jscall.company, \"Update\",statusUpdate, jscall.user)\r\n//         }\r\n//     }\r\n\r\n//     var currentDate = dateValidation() // *GetCurrentDateValidation\r\n\r\n//     updateObj = {\r\n//         \"comp\":header_rec[0].comp,\r\n//         \"tran\":header_rec[0].tran,\r\n//         \"idoc\":header_rec[0].idoc,\r\n//         \"doct\":header_rec[0].doct,\r\n//         \"reason\":jscall.input.Reason,\r\n//         \"cdte\":currentDate,\r\n//         // \"Lines\":line_arr\r\n//         \"scale\": (jscall.input.LNParameter.Scale == \"Up\") ? \"10\": \"20\",\r\n//         \"seri\": jscall.input.LNParameter.ManualId\r\n//     }\r\n//     check_h =CralDB.PublishTopic(\"cancel_header\", jscall.company, \"Insert\", updateObj, jscall.user)\r\n\r\n//     if (jscall.input.AllLines == true){\r\n//         statusUpdateHeadrer = {\r\n//                 \"comp\":header_rec[0].comp,\r\n//                 \"tran\":header_rec[0].tran,\r\n//                 \"idoc\":header_rec[0].idoc,\r\n//                 \"esta\":'50',\r\n//                 \"cncl\":true,\r\n//                 \"par_cncl\":false,\r\n//                 \"einv_stat\":\"50\"\r\n//             }\r\n//     }else{\r\n//         statusUpdateHeadrer = {\r\n//                 \"comp\":header_rec[0].comp,\r\n//                 \"tran\":header_rec[0].tran,\r\n//                 \"idoc\":header_rec[0].idoc,\r\n//                 \"esta\":'50',\r\n//                 \"cncl\":false,\r\n//                 \"par_cncl\":true,\r\n//                 \"einv_stat\":\"50\"\r\n//             }\r\n//     }\r\n//     ret2 = CralDB.PublishTopic(\"einv_header\", jscall.company, \"Update\",statusUpdateHeadrer, jscall.user)\r\n\r\n//     //countRec = CralDB.QueryByComp(\"select count(cncl) from {{einv_lines}} where comp=$1 and tran='$2' and idoc=$3 and line=$4 and cncl=$4\",jscall.company,jscall.input.Company,jscall.input.TransactionType,jscall.input.InvoiceNumber,jscall.input.Lines[0].Line,false)\r\n//     countRec = CralDB.QueryByComp(\"select count(cncl) from {{einv_lines}} where comp=$1 and tran='$2' and idoc=$3 and cncl=$4\",jscall.company,jscall.input.Company,jscall.input.TransactionType,jscall.input.InvoiceNumber,false)\r\n//     if (countRec[0].count == 0){\r\n//         changeStatusUpdate = {\r\n//             \"comp\":jscall.input.Company,\r\n//             \"tran\":jscall.input.TransactionType,\r\n//             \"idoc\":jscall.input.InvoiceNumber,\r\n//             \"cncl\":true,\r\n//             \"par_cncl\":false\r\n//             }\r\n//         ret1 = CralDB.PublishTopic(\"einv_header\", jscall.company, \"Update\",changeStatusUpdate, jscall.user)\r\n//     }\r\n//     seri = checkSeries(header_rec)\r\n//     resp = portaltoLN()\r\n//     return {\r\n//         \"Reasponce\":resp,\r\n//         \"seri\":seri \r\n//     }\r\n// }\r\n\r\n// function dateValidation(){\r\n\r\n//     var currentDate = new Date()\r\n    \r\n//     var year = currentDate.getFullYear(); // Full year (e.g., 2024)\r\n//     var month = currentDate.getMonth() +1 ; // Month (0-11, so add 1 for January to December)\r\n//     var day = currentDate.getDate(); // Day of the month (1-31)\r\n\r\n//     var hours = currentDate.getHours(); // Hours (0-23)\r\n//     var minutes = currentDate.getMinutes(); // Minutes (0-59)\r\n//     var seconds = currentDate.getSeconds(); // Seconds (0-59)\r\n\r\n//     return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}z`;\r\n// }\r\n\r\n// function portaltoLN(){\r\n//     results = []\r\n//     ret = []\r\n\r\n//     api_data = CralDB.QueryByComp(\"select * from {{e_inv_parameter}} where seqn=0\", 0)\r\n//     api_info = {\r\n//         \"url\":api_data[0].cws_url,\r\n//         \"userdetails\":{\r\n//             \"username\":api_data[0].cws_user,\r\n//             \"password\":api_data[0].cws_pswd\r\n//         }\r\n//     }\r\n//     token_info = jscall.ExecuteAPI(\"POST\", api_info.url + \"/auth\", api_info.userdetails)\r\n//     if (token_info.StatusCode != 200){\r\n\r\n//         return {\r\n//             \"Error\":\"Unable to Get Token\",\r\n//             \"Details\":token_info\r\n//         }\r\n        \r\n//     } else {\r\n//         response_data = JSON.parse(token_info.Data)\r\n//         if (response_data.Token !== \"\"){\r\n               \r\n//             payLoadLine = []\r\n\r\n//             for (let i = 0; i \u003c jscall.input.Lines.length; i++){\r\n               \r\n//                     payLoadObj = {\r\n//                         \"Line\":jscall.input.Lines[i].Line,\r\n//                         \"Reason\":jscall.input.Lines[i].Reason\r\n//                     }\r\n//                     payLoadLine.push(payLoadObj)\r\n//                 }\r\n//             lnPara = {}\r\n//             lnPara ={\r\n//                     \"Scale\":jscall.input.LNParameter.Scale,\r\n//                     \"ManualId\":jscall.input.LNParameter.ManualId \r\n//                     }\r\n\r\n//             payLoad = {\r\n//                      \"input.json\": {\r\n//                         \"AllLines\":jscall.input.AllLines,\r\n//                         \"Company\": jscall.input.Company,\r\n//                         \"InvoiceNumber\":jscall.input.InvoiceNumber,\r\n//                         \"TransactionType\":jscall.input.TransactionType,\r\n//                         \"Reason\":jscall.input.Reason,\r\n//                         \"LNParameter\":lnPara,\r\n//                         \"Lines\":payLoadLine\r\n//                         }\r\n//                     }\r\n        \r\n//             cancelInvoice = jscall.ExecuteAPI(\"POST\", api_info.url + \"/api/\" + jscall.company + \"/cancelinvoice\", payLoad, \"CWS-Token\", response_data.Token)\r\n           \r\n//             if (cancelInvoice.StatusCode == 200){\r\n//                 canl_inv_data = JSON.parse(cancelInvoice.Data)\r\n\r\n//                 canl_inv = canl_inv_data.GetDataResponse\r\n                    \r\n//                     cncl_Rec = CralDB.QueryByComp(\"select * from {{cancel_header}} where comp=$1 and tran='$2' and idoc=$3\",jscall.company,canl_inv.Company,canl_inv.TransactionType,canl_inv.InvoiceNumber)\r\n                   \r\n//                     // return canl_inv\r\n//                     if(cncl_Rec != 0){\r\n//                         manualId = {\r\n//                             \"comp\":canl_inv.Company,\r\n//                             \"tran\":canl_inv.TransactionType,\r\n//                             \"idoc\":canl_inv.InvoiceNumber,\r\n//                             \"adcn\":canl_inv.ManualSalesInv,\r\n//                             \"errm\":canl_inv.ErrorMessage\r\n//                         }\r\n//                         CralDB.PublishTopic(\"cancel_header\", jscall.company, \"Update\",manualId, jscall.user)\r\n//                         // return test\r\n                        \r\n                      \r\n//                         if (jscall.input.AllLines == true){\r\n        \r\n//                             for (let i = 0; i \u003c canl_inv.Lines.length; i++){\r\n                                \r\n//                                 updateManulLine = {\r\n//                                     \"comp\":canl_inv.Company,\r\n//                                     \"tran\":canl_inv.TransactionType,\r\n//                                     \"idoc\":canl_inv.InvoiceNumber,\r\n//                                     \"line\":canl_inv.Lines[i].Line,\r\n//                                     \"adcn\":canl_inv.Lines[i].ManualSalesLine,\r\n//                                     \"errm\":canl_inv.Lines[i].ErrorMessage\r\n                                   \r\n//                                 }\r\n//                                 // return updateManulLine\r\n//                                 CralDB.PublishTopic(\"cancel_line\", jscall.company, \"Update\", updateManulLine, jscall.user)\r\n                                \r\n//                                 getAllLinesLN = CralDB.QueryByComp(\"select * from {{cancel_lines}} where comp=$1 and tran='$2' and idoc=$3\",jscall.company,canl_inv.Company,canl_inv.TransactionType,canl_inv.InvoiceNumber)\r\n//                             }\r\n                            \r\n//                         }else{\r\n//                             for (let i = 0; i \u003c canl_inv.Lines.length; i++){\r\n\r\n//                                 updateManualLineSingle = {\r\n//                                     \"comp\":canl_inv.Company,\r\n//                                     \"tran\":canl_inv.TransactionType,\r\n//                                     \"idoc\":canl_inv.InvoiceNumber,\r\n//                                     \"line\":canl_inv.Lines[i].Line,\r\n//                                     \"adcn\":canl_inv.Lines[i].ManualSalesLine,\r\n//                                     \"errm\":canl_inv.Lines[i].ErrorMessage\r\n//                                 }\r\n                            \r\n//                                 CralDB.PublishTopic(\"cancel_line\", jscall.company, \"Update\", updateManualLineSingle, jscall.user)\r\n//                                 var err_msg = canl_inv.Line[i].ErrorMessage\r\n//                             }\r\n//                             // getAllLinesLN = CralDB.QueryByComp(\"select * from {{cancel_lines}} where comp=$1 and tran='$2' and idoc=$3 and line=$4\",jscall.company,canl_inv.Company,canl_inv.TransactionType,canl_inv.InvoiceNumber)\r\n                            \r\n                        \r\n//                         }\r\n//                         response = []\r\n\r\n//                         headerRes = {\r\n//                             \"HeaderErrorMessage\":canl_inv.ErrorMessage,\r\n//                             \"LineErrorMessage\":err_msg\r\n//                         }\r\n//                         response.push(headerRes)\r\n\r\n//                        return response\r\n\r\n//                     }else{\r\n                        \r\n//                         return{\r\n//                             \"InvoiceNumber\":canl_inv.InvoiceNumber,\r\n//                             \"Error\":\"Record not found\",\r\n//                             \"status\":cancelInvoice\r\n//                         }\r\n//                     }\r\n\r\n//             } else {\r\n                \r\n//                 return {\r\n//                     \"Error\":\"Unable to Get Responce\",\r\n//                     \"Details\": cancelInvoice,\r\n//                 }\r\n//             }\r\n//         } else {\r\n           \r\n//             return {\r\n//                 \"Error\":\"Unable to Get Token\"\r\n//             }\r\n//         }\r\n//     }\r\n// }\r\n// function checkSeries(header_rec){\r\n\r\n//     if (header_rec[0].src_type == '10'){\r\n//         data = CralDB.QueryByComp(\"select man_inv_ngrp from {{number_defaults }} where comp = $1\",jscall.company,header_rec[0].comp)\r\n//     }else if(header_rec[0].src_type == '20'){\r\n//         data = CralDB.QueryByComp(\"select man_soinv_ngrp  from {{number_defaults }} where comp = $1\",jscall.company,header_rec[0].comp)\r\n//     }else{\r\n//         jscall_error = \"Manual ID Not Found\";\r\n//         return false\r\n//     }\r\n\r\n//     get_seri = CralDB.QueryByComp(\"select * from {{number_grp}} where (ngrp='$1' or ngrp='$2') and seri='$3'\",jscall.company,data[0].man_inv_ngrp,data[0].man_soinv_ngrp,jscall.input.LNParameter.ManualId)\r\n    \r\n\r\n//     get_seri = CralDB.QueryByComp(\"select * from {{number_grp}} where (ngrp='$1' or ngrp='$2') and seri='$3'\",jscall.company,data[0].man_inv_ngrp,data[0].man_soinv_ngrp,jscall.input.LNParameter.ManualId)\r\n    \r\n//     bpActive = CralDB.QueryByComp(\"select buy_comp_active from {{buyer_companies}} where (buy_code = '$1' or buy_code = '$2')\",jscall.company,header_rec[0].itbp,header_rec[0].stbp)\r\n    \r\n//     if (bpActive[0].buy_comp_active != true){\r\n//         jscall_error = \"InActive BP\" \r\n//         return false\r\n//     }\r\n\r\n// }"},{"Bizobj":{"ObjectName":"commonBO","Description":"Common BO for E-Invoicing","external":true,"input_struct":"","out_success":"","out_fail":""},"Script":"//**** Business Object commonBO Created by malai on 11-May-2024 12:39:04 ****//\r\n\r\nfunction getCancellationDefaults01(){\r\n    switch(jscall.input.SourceType){\r\n        case \"10\":\r\n            default_seri = CralDB.QueryByComp(\"select man_inv_seri,man_inv_ngrp from {{number_defaults}} where comp=$1\", jscall.company, jscall.input.Company)\r\n            series_list = CralDB.QueryByComp(\"select seri,dsca from {{number_grp}} where ngrp='$1'\", jscall.company, default_seri[0].man_inv_ngrp)\r\n            seri_list = []\r\n            series_list.forEach(\r\n                function(record){\r\n                    seri_list.push({\r\n                        \"Series\": record.seri,\r\n                        \"Description\": record.dsca\r\n                    })\r\n                }\r\n            )\r\n            manual_id = default_seri[0].man_inv_seri\r\n            break;\r\n        case \"20\":\r\n            default_seri = CralDB.QueryByComp(\"select man_soinv_seri,man_soinv_ngrp from {{number_defaults}} where comp=$1\", jscall.company, jscall.input.Company)\r\n            series_list = CralDB.QueryByComp(\"select seri,dsca from {{number_grp}} where ngrp='$1'\", jscall.company, default_seri[0].man_soinv_ngrp)\r\n            seri_list = []\r\n            series_list.forEach(\r\n                function(record){\r\n                    seri_list.push({\r\n                        \"Series\": record.seri,\r\n                        \"Description\": record.dsca\r\n                    })\r\n                }\r\n            )\r\n            manual_id = default_seri[0].man_soinv_seri\r\n            break;\r\n        \r\n        default:\r\n            jscall_error = \"Invalid Source Type.\"\r\n            return false;\r\n            break;\r\n    }\r\n    return {\r\n        \"manual_Id\": manual_id,\r\n        \"seri\": seri_list\r\n    }\r\n}\r\n\r\n\r\nfunction ctrlParamPage(){\r\n    if (jscall.company == 0){\r\n        return {\r\n            \"Self E-invoices\": true,\r\n            \"Consolidation Filing Selector\": true,\r\n            \"Cancellation Defaults\": true,\r\n            \"ExcelUpload\": true,\r\n            \"MasterData\": true\r\n        }\r\n    }\r\n    ret = {\r\n        \"Self E-invoices\": false,\r\n        \"Consolidation Filing Selector\": false,\r\n        \"Cancellation Defaults\": false,\r\n        \"ExcelUpload\": false,\r\n        \"MasterData\": false\r\n    }\r\n    einv_imp = CralDB.QueryByComp(\"select ctrl_cancellation,ctrl_consolidation,ctrl_slf_inv,ctrl_slf_crd_nt,ctrl_excel_upload from {{einv_implementation}}\", jscall.company)\r\n    if (einv_imp?.length != 0){\r\n        ret[\"Cancellation Defaults\"] = einv_imp[0]?.ctrl_cancellation\r\n        ret[\"Consolidation Filing Selector\"] = einv_imp[0]?.ctrl_consolidation\r\n        if (einv_imp[0]?.ctrl_slf_inv == true || einv_imp[0]?.ctrl_slf_crd_nt == true){\r\n            ret[\"Self E-invoices\"] = true\r\n        }\r\n        ret[\"ExcelUpload\"] = einv_imp[0]?.ctrl_excel_upload ? true : false\r\n    }\r\n    isSikpMaster = CralDB.QueryByComp(`select skip_master from {{entity_data_set}} where sup_company=${jscall.company} and skip_master=false`, jscall.company)\r\n    if (isSikpMaster?.length){\r\n        ret[\"MasterData\"] = true\r\n    }\r\n    return ret;\r\n}\r\n\r\nfunction isExcelUpload(){\r\n    einv_imp = CralDB.QueryByComp(\"select excel_upload from {{einv_implementation}}\", jscall.company)\r\n    if (einv_imp[0]?.excel_upload == true ){\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\nfunction getMandatoryFields()\r\n{\r\n    mand_flds = CralDB.QueryByComp(`select excl_interim_field from {{fld_parameter}} where mandatory = true`,jscall.company)\r\n    ret_mand_flds = []\r\n    for(i = 0;i\u003cmand_flds.length;i++)\r\n    {\r\n        ret_mand_flds.push(mand_flds[i].excl_interim_field)\r\n    }\r\n    return ret_mand_flds\r\n}\r\nfunction deleteOldResources(){\r\n    results = []\r\n    allResources = Resources.ListResources()\r\n    if (allResources?.error == \"\"){\r\n        current_date = new Date()\r\n        for (i = 0; i \u003c allResources.result.length; i++){\r\n            res = allResources.result[i]\r\n            res_date = res.CreatedTime.toString().split(\" \")[0]\r\n            \r\n            if (CralUtil.Date.Add(res_date.substring(0,23), \"48h00m00s\") \u003c current_date.toISOString() \r\n                \u0026\u0026 ['Reports', 'PDF'].includes(res.Category)){  //To check the Category for Only E-Invoice PDFs.\r\n                result = Resources.DeleteResource(res.ID)\r\n                results.push({\r\n                    \"ID\": res.ID,\r\n                    \"status\": result?.error\r\n                })\r\n            }\r\n        }\r\n    }\r\n    return results\r\n}\r\n\r\nfunction isExcelTempAvil(){\r\n    if (CralDB.QueryByComp(`select temp_code from {{excl_temp}} where temp_code='${jscall.input.temp_code}'`, jscall.company)?.length != 0){\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n\r\nfunction UploadExcelFields(){\r\n    old_fields = CralDB.QueryByComp(\"DELETE from {{excl_temp}} where temp_code='$1'\", jscall.company, jscall.input.temp_code)\r\n    old_mapping = CralDB.QueryByComp(\"UPDATE {{upld_temp_lines}} SET excl_fld='', excl_fld_val='', check_mapping=false where temp_code='$1'\", jscall.company, jscall.input.temp_code)\r\n    topic = \"excl_temp\" \r\n    var company = jscall.company\r\n    var records = jscall.input.records \r\n    var results = []\r\n    records.forEach(\r\n        function (rec){\r\n           var result  = CralDB.PublishTopic(topic,company,\"Upsert\",rec,jscall.user,false)\r\n           results.push(result)\r\n        }\r\n    )\r\n    return results\r\n}\r\nfunction getCancellationDefaults(){\r\n\r\n    default_seri = CralDB.QueryByComp(\"select * from {{number_defaults}} where data_set = '$1' and comp = $2\",jscall.company,jscall.input.Dataset,jscall.input.Company)\r\n\r\n    seriesList = []\r\n\r\n    switch (jscall.input.SourceType) {\r\n        \r\n        case \"10\":\r\n            series_list = CralDB.QueryByComp(\"select seri,dsca from {{number_grp}} where ngrp='$1'\", jscall.company, default_seri[0].man_inv_ngrp)\r\n            seri_list = []\r\n            ManualSales = []\r\n            ManualSalesList = []\r\n            if(jscall.input.DocumentType == \"01\"){\r\n                        \r\n                series_list.forEach(\r\n                        function(record){\r\n                            ManualSalesList.push({\r\n                                \"Series\": record.seri,\r\n                                \"Description\": record.dsca\r\n                            })\r\n                        }\r\n                    )\r\n\r\n                ManualSales.push(default_seri[0].man_inv_seri)\r\n\r\n                seriesList.push(ManualSales)\r\n                seriesList.push(ManualSalesList)\r\n\r\n                return {\r\n                    seriesList\r\n                }    \r\n\r\n            }else{\r\n               \r\n                series_list.forEach(\r\n                    function(record){\r\n                        ManualSalesList.push({\r\n                            \"Series\": record.seri,\r\n                            \"Description\": record.dsca\r\n                        })\r\n                    }\r\n                )\r\n\r\n                ManualSales.push(default_seri[0].man_inv_seri) \r\n                \r\n                seriesList.push({ManualSales})\r\n                seriesList.push({ManualSalesList})\r\n\r\n                return {\r\n                   \r\n                    seriesList\r\n                } \r\n            }\r\n\r\n            break;\r\n        \r\n        case \"20\":\r\n            \r\n            if(jscall.input.withReceipts.toUpperCase() == \"YES\"){\r\n            \r\n                default_seri.forEach(\r\n                    function(record){\r\n                        seriesList.push({\r\n                            \"SOR_Order_Type\":record.sor_ord_typ,\r\n                            \"SOR_Sales_Office\":record.sls_ofc,\r\n                            \"SOR_Return_Reason\":record.ret_reason,\r\n                            \"SOR_Invoice_Number_Group\":record.man_soinv_ngrp,\r\n                            \"SOR_Invoice_Series\":record.man_soinv_seri\r\n                        })\r\n                    }\r\n                )\r\n                seriesList.push(seriDesc(default_seri,false))\r\n\r\n                return{\r\n                    seriesList\r\n                }\r\n                \r\n            }else{\r\n\r\n                salesOrder = []\r\n                series_list = CralDB.QueryByComp(\"select seri,dsca from {{number_grp}} where ngrp='$1'\", jscall.company, default_seri[0].man_inv_ngrp)\r\n            \r\n                SalesOrderList = []\r\n                series_list.forEach(\r\n                    function(record){\r\n                        SalesOrderList.push({\r\n                            \"Series\": record.seri,\r\n                            \"Description\": record.dsca\r\n                        })\r\n                    }\r\n                )\r\n\r\n                salesOrder.push(default_seri[0].man_inv_seri) \r\n                \r\n                seriesList.push({salesOrder})\r\n                seriesList.push({SalesOrderList})\r\n\r\n                return {\r\n                   \r\n                    seriesList\r\n                }\r\n            }z\r\n\r\n            break;\r\n\r\n        case \"30\":\r\n        case \"50\":\r\n            \r\n            if(jscall.input.withShipments .toUpperCase() == \"YES\"){\r\n\r\n                default_seri.forEach(\r\n                    function(record){\r\n                        seriesList.push({\r\n                            \"Pur_Order_Type\":record.pur_ord_typ,\r\n                            \"Pur_Sales_Office\":record.pur_ofc,\r\n                            \"Pur_Return_Reason\":record.pur_ret_reson,\r\n                            \"Pur_Invoice_Number_Group\":record.pur_inv_ngrp,\r\n                            \"Pur_Invoice_Series\":record.pur_inv_seri\r\n                        })\r\n                    }\r\n                )\r\n                // pur_inv = true\r\n                seriesList.push(seriDesc(default_seri,true))\r\n\r\n            }else{\r\n                Transaction_types = []\r\n                Pur_Tran_Type = []\r\n                tranType = CralDB.QueryByComp(\"select src_tran_type, src_dsca from {{src_tran_types}} where tran_category = '$1'\",jscall.company,\"Purchase Credit Notes\") \r\n                // return tranType\r\n                tranType.forEach(\r\n                    function(record){\r\n                        Transaction_types.push({\r\n                            \"Transaction_Type\":record.src_tran_type,\r\n                            \"Description\":record.src_dsca \r\n                        })\r\n                    }\r\n                )\r\n\r\n                tranType_dsca = CralDB.QueryByComp(\"select src_tran_type, src_dsca from {{src_tran_types}} where src_tran_type = '$1'\",jscall.company,default_seri[0].pur_tran_typ)\r\n                Pur_Tran_Type.push(tranType_dsca[0].src_tran_type,tranType_dsca[0].src_dsca) \r\n                \r\n        \r\n                seriesList.push({Pur_Tran_Type})\r\n                seriesList.push({Transaction_types})\r\n            }\r\n            \r\n            return{\r\n                seriesList\r\n            }\r\n\r\n            break;\r\n\r\n        case \"40\":\r\n            Transaction_types = []\r\n            Sales_Invoice = []\r\n            seri_list = CralDB.QueryByComp(\"select src_tran_type, src_dsca from {{src_tran_types}} where tran_category = '$1'\",jscall.company,\"Sales Credit Notes\")\r\n            seri_list.forEach(\r\n                function(record){\r\n                    // debug(record)\r\n                    Transaction_types.push({ \r\n                        \"Transaction_Type\":record.src_tran_type,\r\n                        \"Description\":record.src_dsca\r\n                    })\r\n                }\r\n            )\r\n\r\n\r\n            Sales_Invoice.push(default_seri[0].sls_tran_typ) \r\n                \r\n        \r\n            seriesList.push({Sales_Invoice})\r\n            seriesList.push({Transaction_types})\r\n\r\n\r\n            // sls_tran_type = default_seri[0].sls_tran_typ\r\n            return {\r\n                // sls_tran_type,\r\n                // Transaction_types\r\n                seriesList\r\n            }\r\n\r\n            break;\r\n\r\n        default:\r\n            jscall_error = \"Invalid Source Type.\"\r\n            return false;\r\n            break;\r\n    }\r\n}\r\nfunction seriDesc(default_seri,pur_inv){\r\n\r\n    // Series_List = []\r\n    // Order_Type = []\r\n    // Sales_Office = [] \r\n    // Return_Reason =[]\r\n    // Invoice_Number_Group =[]\r\n    // PurOrdType = []\r\n    // Pur_sls_offc =[]\r\n\r\n    ordType = CralDB.QueryByComp(\"select ord_typ,dsca from {{ord_type}} where data_set = '$1'\",jscall.company,default_seri[0].data_set) \r\n    slsOfc = CralDB.QueryByComp(\"select sls_ofc,dsca from {{sls_off}} where data_set = '$1'\",jscall.company,default_seri[0].data_set)\r\n    retReason = CralDB.QueryByComp(\"select ret_reason,dsca from {{ret_reason}} where data_set = '$1'\",jscall.company,default_seri[0].data_set)\r\n       // Purchase Sale_Office \u0026 Purchase Order_Type Query\r\n    pur_ordType = CralDB.QueryByComp(\"select pur_ord_type,dsca from {{pur_ord_type}} where data_set = '$1'\",jscall.company,default_seri[0].data_set) \r\n    pur_slsOfc = CralDB.QueryByComp(\"select pur_off,dsca from {{pur_off}} where data_set = '$1'\",jscall.company,default_seri[0].data_set)\r\n\r\n    if(pur_inv == true){\r\n\r\n        numberGroup = CralDB.QueryByComp(\"select ngrp,seri,dsca from {{number_grp}} where data_set = '$1' and ngrp ='$2'\",jscall.company,default_seri[0].data_set,default_seri[0].pur_inv_ngrp)\r\n\r\n        Return_Reason =[]\r\n        Invoice_Number_Group =[]\r\n        PurOrdType = []\r\n        Pur_sls_offc =[]\r\n\r\n        pur_ordType.forEach(\r\n            function(record){\r\n                PurOrdType.push({\r\n                    \"OrderType\":record.pur_ord_type,\r\n                    \"Description\":record.dsca\r\n                })\r\n            }\r\n        );\r\n        \r\n        pur_slsOfc.forEach(\r\n            function(record){\r\n                Pur_sls_offc.push({\r\n                    \"SalesOffice\":record.pur_off,\r\n                    \"Description\":record.dsca\r\n                })\r\n            }\r\n        )\r\n\r\n        retReason.forEach(\r\n            function(record){\r\n                Return_Reason.push({\r\n                    \"ReturnReason\":record.ret_reason,\r\n                    \"Description\":record.dsca\r\n                })\r\n            }\r\n        )\r\n\r\n        numberGroup.forEach(\r\n            function(record){\r\n                Invoice_Number_Group.push({\r\n                    \"InvNumberGroup\":record.ngrp,\r\n                    \"InvNumberSeries\":record.seri,\r\n                    \"Description\":record.dsca\r\n                })\r\n            }\r\n        )\r\n        return {\r\n            PurOrdType,\r\n            Pur_sls_offc,\r\n            Return_Reason,\r\n            Invoice_Number_Group\r\n        }\r\n    }else{\r\n\r\n        numberGroup = CralDB.QueryByComp(\"select ngrp,seri,dsca from {{number_grp}} where data_set = '$1' and ngrp ='$2'\",jscall.company,default_seri[0].data_set,default_seri[0].man_soinv_ngrp)\r\n\r\n        Order_Type = []\r\n        Sales_Office = []\r\n        Return_Reason = []\r\n        Invoice_Number_Group = []\r\n\r\n        ordType.forEach(\r\n            function(record){\r\n                Order_Type.push({\r\n                    \"OrderType\":record.ord_typ,\r\n                    \"Description\":record.dsca\r\n                })\r\n            }\r\n        );\r\n        \r\n        slsOfc.forEach(\r\n            function(record){\r\n                Sales_Office.push({\r\n                    \"SalesOffice\":record.sls_ofc,\r\n                    \"Description\":record.dsca\r\n                })\r\n            }\r\n        )\r\n\r\n        retReason.forEach(\r\n            function(record){\r\n                Return_Reason.push({\r\n                    \"ReturnReason\":record.ret_reason,\r\n                    \"Description\":record.dsca\r\n                })\r\n            }\r\n        )\r\n\r\n        numberGroup.forEach(\r\n            function(record){\r\n                Invoice_Number_Group.push({\r\n                    \"InvNumberGroup\":record.ngrp,\r\n                    \"InvNumberSeries\":record.seri,\r\n                    \"Description\":record.dsca\r\n                })\r\n            }\r\n        )\r\n        return {\r\n            Order_Type,\r\n            Sales_Office,\r\n            Return_Reason,\r\n            Invoice_Number_Group\r\n        }\r\n    }\r\n    // return {\r\n    //     Order_Type,\r\n    //     Sales_Office,\r\n    //     Return_Reason,\r\n    //     Invoice_Number_Group\r\n    // }\r\n}\r\n\r\nfunction getNumberingDefaultValues(){\r\n    return {\r\n        \"SalesOrderType\": CralDB.QueryByComp(`SELECT ord_typ AS \"OrderType\", dsca AS \"Description\" FROM {{ord_type}}`, jscall.company),\r\n        \"SalesOffice\": CralDB.QueryByComp(`SELECT sls_ofc AS \"SalesOffice\", dsca AS \"Description\" FROM {{sls_off}}`, jscall.company),\r\n        \"ReturnReason\": CralDB.QueryByComp(`SELECT ret_reason AS \"ReturnReason\", dsca AS \"Description\" from {{ret_reason}}`, jscall.company),\r\n        \"SOR_NumberGroup\": CralDB.QueryByComp(`SELECT ngrp AS \"InvNumberGroup\" from {{number_grp}}`, jscall.company),\r\n        \"SOR_Series\": CralDB.QueryByComp(`SELECT ngrp AS \"InvNumberGroup\", seri AS \"InvNumberSeries\", dsca AS \"Description\" from {{number_grp}}`, jscall.company),\r\n        \"PurchaseTransactionType\": CralDB.QueryByComp(`SELECT src_tran_type AS \"TransactionType\", src_dsca AS \"Description\" FROM {{src_tran_types}} WHERE tran_category = 'Purchase Credit Notes'`, jscall.company) ,\r\n        \"PurchaseOrderType\": CralDB.QueryByComp(`SELECT pur_ord_type AS \"PurOrderType\", dsca AS \"Description\" FROM {{pur_ord_type}}`, jscall.company),\r\n        \"PurchaseOffice\": CralDB.QueryByComp(`SELECT pur_off AS \"PurchaseOffice\", dsca AS \"Description\" FROM {{pur_off}}`, jscall.company)\r\n    }\r\n}"},{"Bizobj":{"ObjectName":"conso_checking","Description":"Consolidation Checking","external":false,"input_struct":"","out_success":"","out_fail":""},"Script":"//**** Business Object conso_checking Created by malai on 06-Dec-2024 16:25:23 ****//\r\n\r\nfunction checkConsoInvoice(input_data){\r\n    consoCriteria = CralDB.QueryByComp(`SELECT DISTINCT criteria from {{conso_parameter}}`, jscall.company).map(data =\u003e data.criteria)\r\n    if (consoCriteria?.length){\r\n        for (let i = 0; i \u003c consoCriteria.length; i++){\r\n            if (isConso(consoCriteria[i], input_data)){\r\n                return true;\r\n            };\r\n        };\r\n    };\r\n    return false;\r\n}\r\nexports.checkConsoInvoice = checkConsoInvoice\r\n\r\nfunction isConso(criteria, data){\r\n    let result = false\r\n    let conso_result = false\r\n    let ds = data.dataset ? data.dataset : data.data_set\r\n    let conditions = CralDB.QueryByComp(`SELECT * from {{conso_parameter}} where criteria=${criteria}`, jscall.company)\r\n    conditions.forEach(condition =\u003e {\r\n        if (condition.is_buyer){\r\n            let buyer_query = ` SELECT buy_code FROM {{buyer_companies}}\r\n                                WHERE data_set='${ds}' \r\n                                AND buy_code='${data.inv_bp}'\r\n                                AND conso_buyer=true`;\r\n            result = (CralDB.QueryByComp(buyer_query, jscall.company)?.length) ? true : false;\r\n        } else if (condition.by_range){\r\n            result = (  data[condition.field_name] \u003e= condition.from_range \u0026\u0026 \r\n                        data[condition.field_name] \u003c= condition.to_range) ? true : false;\r\n        } else {\r\n            result = checkByCondition( data[condition.field_name],\r\n                                            condition.condition)\r\n        }\r\n        conso_result = condition.joiner.toUpperCase() == 'AND' ? \r\n                            conso_result \u0026\u0026 result : conso_result || result\r\n    })\r\n    return conso_result\r\n}\r\n\r\nfunction checkByCondition(value, expression){\r\n    switch(expression.slice(0, 2)){\r\n        case '==':\r\n            return (value == expression.slice(2).trim()) ? true : false;\r\n        case '!=':\r\n            return (value != expression.slice(2).trim()) ? true : false;\r\n        case '\u003e=':\r\n            return (value \u003e= expression.slice(2).trim()) ? true : false;\r\n        case '\u003c=':\r\n            return (value \u003c= expression.slice(2).trim()) ? true : false;\r\n        case '\u003e\u003e':\r\n            return (value \u003e expression.slice(2).trim()) ? true : false;\r\n        case '\u003c\u003c':\r\n            return (value \u003c expression.slice(2).trim()) ? true : false;\r\n        default:\r\n            return false\r\n    }\r\n}"},{"Bizobj":{"ObjectName":"consolidation","Description":"Create Consolidation E-Invoice","external":true,"input_struct":"","out_success":"","out_fail":""},"Script":"//**** Business Object consolidation Created by Saravanan on 08-Jun-2024 09:44:11 ****//\r\n\r\nvar einvois = require(\"./scripts/Business_Objects/createEinvoice\")\r\nfunction checkConsolidationImp() {\r\n    // Query the consolidation field from the einv_implementation table\r\n    var conso_val = CralDB.QueryByComp(\"select consolidation from {{einv_implementation}} limit 1\", jscall.company);\r\n    \r\n    // Query multiple fields from the conso_filing table\r\n    var sls_ord = CralDB.QueryByComp(\"select conso_sls, conso_man_sls, conso_acr from {{conso_filing}} limit 1\", jscall.company);\r\n    \r\n    // Initialize the result object\r\n    var result = {};\r\n\r\n    // Process consolidation field\r\n    result.Consolidation = conso_val \u0026\u0026 conso_val.length \u003e 0 ? conso_val[0].consolidation : null;\r\n\r\n    // Process fields from sls_ord if available\r\n    if (sls_ord \u0026\u0026 sls_ord.length \u003e 0) {\r\n        var sls_record = sls_ord[0];\r\n        result.SalesOrder = CralUtil.GetListDesc(\"conso_sls_list\", sls_record.conso_sls);\r\n        result.ManualSales = CralUtil.GetListDesc(\"conso_man_sls_list\", sls_record.conso_man_sls);\r\n        result.FinanceACR = CralUtil.GetListDesc(\"conso_acr_list\", sls_record.conso_acr);\r\n    } else {\r\n        // Assign null values if sls_ord is empty\r\n        result.FinanceACR = result.ManualSales = result.SalesOrder = null;\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\n// function getTodayDate(){\r\n//     return (new Date()).getDate();\r\n// }\r\n\r\nfunction createConsoEINV(){\r\n    isConsoImp = CralDB.QueryByComp(\"select consolidation from {{einv_implementation}}\", jscall.company)\r\n    if (!isConsoImp[0].consolidation){\r\n        return \"Consolidation is Not Implemented.\"\r\n    }\r\n    // if ((new Date()).getDate() != 2){\r\n    //     return false\r\n    // }\r\n    conso_results = []\r\n    var [year, month] = getPreviousMonthDetails()\r\n    month += 1\r\n    data_sets = CralDB.QueryByComp(`select data_set from {{data_set}}`, jscall.company)\r\n    for (var d = 0; d \u003c data_sets.length; d++){\r\n        conso_inv_data = []\r\n        all_inv = CralDB.QueryByComp(\"select * from {{conso_header}} where conso_inv='' and data_set='$1'\", jscall.company, data_sets[d].data_set)\r\n        debug(data_sets[d].data_set)\r\n        debug(all_inv.length)\r\n        if (all_inv.length != 0){\r\n            all_inv.forEach(inv =\u003e {\r\n                if ( (inv.inv_date.toString()).slice(0, 4) == year \u0026\u0026 (inv.inv_date.toString()).slice(5, 7) == month){\r\n                    conso_inv_data.push(inv)\r\n                }\r\n            })\r\n        }\r\n        if (conso_inv_data?.length == 0){\r\n            continue\r\n        }\r\n        conso_invoices = getSplitInvoices(conso_inv_data)\r\n        for(var i = 0; i \u003c conso_invoices.length; i++){\r\n            conso_code = `01_${year.toString().slice(-2)}${month.toString().padStart(2, \"0\")}`\r\n            conso_number = \"01\" + year.toString().slice(-2) + month.toString().padStart(2, \"0\")\r\n            conso_iter_num = (CralDB.QueryByComp(`select count(idoc) from {{einv_header}} where e_inv_no LIKE '${conso_code}%'`, jscall.company)[0].count + 1).toString().padStart(2, \"0\")\r\n            conso_code = conso_code + \"_\" + conso_iter_num\r\n            conso_number = conso_number + conso_iter_num\r\n            ce_inv = getConsoEinvoice(conso_invoices[i], \"01\", conso_code, conso_number) // \"01\" - Document Type.\r\n            if (typeof ce_inv == \"string\"){\r\n                conso_results.push({\r\n                    \"Error\": ce_inv,\r\n                    \"DataSet\": data_sets[d].data_set,\r\n                    \"Invoices\": conso_invoices[i].map(einv =\u003e einv.idoc)\r\n                })\r\n            }\r\n            for (var j=0; j\u003cconso_invoices[i].length; j++){\r\n                payload = conso_invoices[i][j]\r\n                payload.conso_inv = ce_inv.Message.e_inv_no\r\n                payload.cein = true\r\n                CralDB.PublishTopic(\"conso_header\", jscall.company, \"Update\", payload, jscall.user)\r\n            }\r\n            conso_result = {\r\n                \"ConsolidatedInvoiceNumber\": ce_inv.Message.e_inv_no,\r\n                \"Invoices\": conso_invoices[i].map(einv =\u003e einv.idoc),\r\n                \"Result\": ce_inv\r\n            }\r\n            CralUtil.LogInfo(\"New Consolidated Invoice\", \"Consolidation\", conso_result)\r\n            conso_results.push(conso_result)\r\n        }\r\n    }\r\n    return conso_results\r\n}\r\n\r\nfunction getSplitInvoices(input_data){\r\n    output_data = []\r\n    for (var k = 0; k \u003c input_data.length; k += 250) {\r\n        output_data.push(input_data.slice(k, k + 250));\r\n    }\r\n    return output_data\r\n}\r\n\r\nfunction getConsoEinvoice(inv_data, invType, invCode, invNumber){\r\n    conso_einv_lines = []\r\n    total_ex_tax = 0\r\n    total_in_tax = 0\r\n    total_tax = 0\r\n    total_net_amnt = 0\r\n    total_disc = 0\r\n    total_fees = 0\r\n    ttaxable_amnt = 0\r\n    ttax_amnt = 0\r\n    total_pay_amnt = 0\r\n    total_inv = 0\r\n    for (var i=0;i\u003cinv_data.length;i++){\r\n        // if ( (inv_data[i].inv_date.toString()).slice(0, 4) == year \u0026\u0026 (inv_data[i].inv_date.toString()).slice(5, 7) == month){\r\n            total_inv += 1\r\n            line_tpat = inv_data[i].tott / inv_data[i].tote * 100\r\n            conso_einv_lines.push({\r\n                \"line\": i+1,\r\n                \"cuni\": \"\",\r\n                \"ccty\": \"\",\r\n                \"clas_grp\": getClassificationGroup(),\r\n                \"clas\": \"004\",\r\n                \"item\": \"\",\r\n                // \"item_desc\": inv_data[i].tran + inv_data[i].idoc,\r\n                \"item_desc\": inv_data[i].inv_no ? inv_data[i].inv_no : inv_data[i].tran + inv_data[i].idoc,\r\n                \"pric\": inv_data[i].tote,\r\n                \"pvat\": (!line_tpat)?0:line_tpat,\r\n                \"txai\": inv_data[i].tott,\r\n                \"tex_cer_no\": \"\",\r\n                \"amtt\": 0,\r\n                \"stot\": inv_data[i].tote,\r\n                \"amti\": inv_data[i].tote,\r\n                \"dqua\": 1,\r\n                \"disc\": 0,\r\n                \"ldai\": inv_data[i].tdis,\r\n                \"ccde\": \"\",\r\n                \"feea\": 0,\r\n                \"feer\": 0,\r\n                \"disc_reason\": \"\",\r\n                \"fee_reason\": \"\",\r\n                \"err_msg\": \"\",\r\n                \"lsta\": \"10\",\r\n                \"modi_lsta\": \"\",\r\n                \"cvat\": inv_data[i].cvat,\r\n                \"reference0\": \"\",\r\n                \"reference1\": \"\",\r\n                \"reference2\": \"\",\r\n                \"reference3\": \"\",\r\n                \"reference4\": \"\",\r\n                \"reference5\": \"\",\r\n                \"reference6\": \"\",\r\n                \"reference7\": \"\",\r\n                \"reference8\": \"\",\r\n                \"reference9\": \"\",\r\n                \"reference10\": \"\",\r\n                \"reference11\": \"\",\r\n                \"reference12\": \"\",\r\n                \"reference13\": \"\",\r\n                \"reference14\": \"\",\r\n                \"reference15\": \"\",\r\n                \"reference16\": \"\",\r\n                \"reference17\": \"\",\r\n                \"reference18\": \"\",\r\n                \"reference19\": \"\",\r\n                \"reference20\": \"\"\r\n            })\r\n            total_ex_tax += inv_data[i].tote\r\n            total_in_tax += inv_data[i].toti\r\n            total_tax += inv_data[i].tott\r\n            total_net_amnt += inv_data[i].tnat\r\n            total_disc += inv_data[i].tdis\r\n            total_fees += inv_data[i].tfee\r\n            ttaxable_amnt += inv_data[i].ttax\r\n            ttax_amnt += inv_data[i].ttat\r\n            total_pay_amnt += inv_data[i].tpat\r\n        // }\r\n    }\r\n    debug(JSON.stringify(conso_einv_lines))\r\n    supplier_data = CralDB.QueryByComp(\"select * from {{supplier_companies}} where sup_company=$1\", jscall.company, inv_data[0].comp)\r\n    supplier_adrs = (supplier_data.length != 0)?CralDB.QueryByComp(`select * from {{address_master}} where data_set='${inv_data[0].data_set}' and adrs_code='${supplier_data[0].sup_adrs}'`, jscall.company):[]\r\n    buyer_data = CralDB.QueryByComp(\"select * from {{conso_filing}} where comp=$1\", jscall.company, jscall.company)\r\n    \r\n    // Add Data Set\r\n    buyer_adrs = (buyer_data.length != 0)?CralDB.QueryByComp(\"select * from {{address_master}} where adrs_code='$1'\", jscall.company, buyer_data[0].con_buyer_adrs):[]\r\n    let [sup_ccty, sup_cste] = einvois.get_country_state((supplier_adrs.length != 0)?supplier_adrs[0].adrs_country:\"\", (supplier_adrs.length != 0)?supplier_adrs[0].adrs_state:\"\", inv_data[0].data_set)\r\n\r\n    einv_input = {\r\n        \"e_inv_no\": invCode,\r\n        \"comp\": inv_data[0].comp,\r\n        \"tran\": \"\",\r\n        \"idoc\": 0,\r\n        \"doct\": invType,\r\n        \"ccur\": \"MYR\",\r\n        \"paym\": \"\",\r\n        \"cvat\": inv_data[0].cvat,\r\n        \"sctg\": \"10\",\r\n        \"dataset\": inv_data[0].data_set,\r\n        \"line_cnt\": 0,\r\n        \"s_line_cnt\": total_inv,\r\n        \"sup_name\":         (supplier_data.length != 0)?supplier_data[0].sup_name:\"\",\r\n        \"sup_cont_num\":     (supplier_data.length != 0)?supplier_data[0].sup_cont_num:\"\",\r\n        \"sup_email\":        (supplier_data.length != 0)?supplier_data[0].sup_email:\"\",\r\n        \"sup_sst_reg\":      (supplier_data.length != 0)?supplier_data[0].sup_sst_reg:\"\",\r\n        \"sup_ttx_no\":       (supplier_data.length != 0)?supplier_data[0].sup_ttx_no:\"\",\r\n        \"sup_tin\":          (supplier_data.length != 0)?supplier_data[0].sup_tin:\"\",\r\n        \"sup_reg_brn\":      (supplier_data.length != 0)?supplier_data[0].sup_reg_brn:\"\",\r\n        \"sup_reg_nric\":     (supplier_data.length != 0)?supplier_data[0].sup_reg_nric:\"\",\r\n        \"sup_reg_passport\": (supplier_data.length != 0)?supplier_data[0].sup_reg_passport:\"\",\r\n        \"sup_reg_army\":     (supplier_data.length != 0)?supplier_data[0].sup_reg_army:\"\",\r\n        \"sup_badsca\":       (supplier_data.length != 0)?supplier_data[0].sup_badsca:\"\",\r\n        \"sup_bank_acc\":     (supplier_data.length != 0)?supplier_data[0].sup_bank_acc:\"\",\r\n        \"sup_msic\":         (supplier_data.length != 0)?supplier_data[0].sup_msic:\"\",\r\n        \"sup_adrs\":         (supplier_data.length != 0)?supplier_data[0].sup_adrs:\"\",\r\n        \"sup_city\":         (supplier_adrs.length != 0)?supplier_adrs[0].adrs_city:\"\",\r\n        \"sup_postal_zone\":  (supplier_adrs.length != 0)?supplier_adrs[0].postal_zone:\"\",\r\n        \"sup_adrs_line0\":   (supplier_adrs.length != 0)?supplier_adrs[0].adrs_line0:\"\",\r\n        \"sup_adrs_line1\":   (supplier_adrs.length != 0)?supplier_adrs[0].adrs_line1:\"\",\r\n        \"sup_adrs_line2\":   (supplier_adrs.length != 0)?supplier_adrs[0].adrs_line2:\"\",\r\n        \"sup_country\":      sup_ccty,\r\n        \"sup_cste\":         sup_cste,\r\n        \"inv_bp\": \"\",\r\n        \"buy_name\": (buyer_data.length != 0)?buyer_data[0].con_buyer_name:\"NA\",\r\n        \"buy_cont_num\": (buyer_data.length != 0)?buyer_data[0].con_buyer_cont_num:\"NA\",\r\n        \"buy_email\": \"\",\r\n        \"buy_sst_reg\": (buyer_data.length != 0)?buyer_data[0].con_buyer_sst_reg:\"NA\",\r\n        \"buy_tin\": (buyer_data.length != 0)?buyer_data[0].con_buyer_tin:\"NA\",\r\n        \"buy_reg_brn\": (buyer_data.length != 0)?buyer_data[0].con_buyer_reg_brn:\"NA\",\r\n        \"buy_reg_nric\": (buyer_data.length != 0)?buyer_data[0].con_buyer_reg_nric:\"NA\",\r\n        \"buy_reg_passport\": (buyer_data.length != 0)?buyer_data[0].con_buyer_reg_passport:\"NA\",\r\n        \"buy_reg_army\": (buyer_data.length != 0)?buyer_data[0].con_buyer_reg_army:\"NA\",\r\n        \"buy_adrs\": (buyer_data.length != 0)?buyer_data[0].con_buyer_adrs:\"\",\r\n        \"buy_city\": (buyer_adrs.length != 0)?buyer_adrs[0].adrs_city:\"NA\",\r\n        \"buy_postal_zone\": (buyer_adrs.length != 0)?buyer_adrs[0].postal_zone:\"NA\",\r\n        \"buy_adrs_line0\": (buyer_adrs.length != 0)?buyer_adrs[0].adrs_line0:\"NA\",\r\n        \"buy_adrs_line1\": (buyer_adrs.length != 0)?buyer_adrs[0].adrs_line1:\"NA\",\r\n        \"buy_adrs_line2\": (buyer_adrs.length != 0)?buyer_adrs[0].adrs_line2:\"NA\",\r\n        \"buy_country\": \"MYS\",\r\n        \"buy_cste\": \"17\",\r\n        \"dtrm\": \"\",\r\n        \"ship_bp\": \"\",\r\n        \"ship_name\": \"\",\r\n        \"ship_tin\": \"\",\r\n        \"ship_reg_brn\": \"\",\r\n        \"ship_reg_nric\": \"\",\r\n        \"ship_reg_passport\": \"\",\r\n        \"ship_reg_army\": \"\",\r\n        \"ship_adrs\": \"\",\r\n        \"ship_city\": \"\",\r\n        \"ship_postal_zone\": \"\",\r\n        \"ship_adrs_line0\": \"\",\r\n        \"ship_adrs_line1\": \"\",\r\n        \"ship_adrs_line2\": \"\",\r\n        \"ship_country\": \"\",\r\n        \"ship_cste\": \"\",\r\n        \"frm1\": \"\",\r\n        \"frm2\": \"\",\r\n        \"rate\": 1,\r\n        \"tote\": total_ex_tax,\r\n        \"toti\": total_in_tax,\r\n        \"tott\": total_tax,\r\n        \"pamt\": 0,\r\n        // \"pydt\": \"YYYY-MM-DD\",\r\n        // \"pytm\": \"YYYY-MM-DD HH:MM\",\r\n        \"pref\": \"\",\r\n        // \"tpat\": 0,\r\n        \"tpat\": total_pay_amnt,\r\n        \"tnat\": total_net_amnt,\r\n        \"tdis\": total_disc,\r\n        \"tfee\": total_fees,\r\n        \"ramt\": 0,\r\n        \"ttax\": ttaxable_amnt,\r\n        \"ttat\": ttax_amnt,\r\n        \"adis\": 0,\r\n        \"adis_reason\": \"\",\r\n        \"afee\": 0,\r\n        \"afee_reason\": \"\",\r\n        \"fbil\": \"\",\r\n        \"org_e_inv_no\": \"\",\r\n        \"term\": \"\",\r\n        \"bref\": \"\",\r\n        \"ftrd\": \"\",\r\n        \"anum\": \"\",\r\n        \"ochg\": false,\r\n        \"ochg_amnt\": 0,\r\n        \"ochg_reason\": \"\",\r\n        \"det_tax\": \"\",\r\n        // \"bsdt\": \"YYYY-MM-DD\",\r\n        // \"bedt\": \"YYYY-MM-DD\",\r\n        \"amnt_ex\": 0,\r\n        \"dshp\": false,\r\n        \"submission_uid\": \"\",\r\n        \"doc_uuid\": \"\",\r\n        \"esta\": \"10\",\r\n        \"err_msg\": \"\",\r\n        // \"e_invdt\": \"YYYY-MM-DD HH:MM\",\r\n        \"einv_stat\": \"10\",\r\n        // \"etim\": \"YYYY-MM-DD HH:MM\",\r\n        \"modi_stat\": \"\",\r\n        \"src_type\": \"\",\r\n        \"inv_pdf\": \"\",\r\n        \"sup_code\": inv_data[0].comp,\r\n        \"reference0\": \"\",\r\n        \"reference1\": \"\",\r\n        \"reference2\": \"\",\r\n        \"reference3\": \"\",\r\n        \"reference4\": \"\",\r\n        \"reference5\": \"\",\r\n        \"reference6\": \"\",\r\n        \"reference7\": \"\",\r\n        \"reference8\": \"\",\r\n        \"reference9\": \"\",\r\n        \"qr_code\": \"\",\r\n        \"org_doc_uuid\":\"\"\r\n    }\r\n    if (conso_einv_lines.length != 0){\r\n        debug(einv_input)\r\n        result = CreateEinvois(einv_input, conso_einv_lines)\r\n        if (result?.Message?.e_inv_no){\r\n            SubmitConsoEInvoice(result.Message.e_inv_no)\r\n        } else {\r\n            CralUtil.LogInfo(\"Unable to Create Consolidation.\", \"consolidation\", [result, einv_input])\r\n            return \"Unable to Create Consolidation.\"\r\n        }\r\n        return result\r\n    }\r\n    return \"No Line is Ready to Consolidation\"\r\n}\r\n\r\n// function ConsoMissingLines(){\r\n    \r\n// }\r\n\r\nfunction SubmitConsoEInvoice(einvCode){\r\n    if (einvois.check_validations(einvCode) == true){\r\n        var doc_json = einvois.BuildJSONFormat(einvCode)\r\n        println(\"After Doc\")\r\n        if (typeof doc_json == \"string\"){\r\n            println(\"Error Doc\")\r\n            einvois.CreatePortalValidation(einvCode, 0, doc_json, \"\")\r\n            return result\r\n        } else {\r\n            // Convert JSON to XML and hash the doc to string.\r\n            println(\"Success Doc\")\r\n            submission_ret = einvois.SubmitTOLHDN(doc_json.document, doc_json.InvoiceCodeNumber)\r\n            if (submission_ret == false){\r\n                return result\r\n            } else {\r\n                sub_data = einvois.SubmissionUpdate(submission_ret)\r\n                return result\r\n            }\r\n        }\r\n    }\r\n    return \"Validation Fails\"\r\n}\r\n\r\nfunction CreateEinvois(header_data, lines_data){\r\n    header_result = CralDB.PublishTopic(\"einv_header\", jscall.company, \"Insert\", header_data, jscall.user)\r\n    if (typeof header_result == \"string\"){\r\n        return {\r\n            \"Success\": false,\r\n            \"Message\": header_result\r\n        }\r\n    } else {\r\n        if (header_result.Success == false){\r\n            return header_result\r\n        } else {\r\n            result = insert_lines(lines_data, header_result.Message.e_inv_no)\r\n            header_result.Lines = result\r\n            return header_result\r\n        }\r\n    }\r\n}\r\n\r\nfunction insert_lines(lines, invCode){\r\n    lines_result = []\r\n    for (var i_line = 0; i_line\u003clines.length; i_line++){\r\n        lines[i_line].e_inv_no = invCode\r\n        lines_result.push(CralDB.PublishTopic(\"einv_lines\", jscall.company, \"Insert\", lines[i_line], jscall.user))\r\n    }\r\n    return lines_result\r\n}\r\n\r\nfunction getPreviousMonthDetails() {\r\n    const currentDate = new Date();\r\n    let currentMonth = currentDate.getMonth();\r\n    let currentYear = currentDate.getFullYear();\r\n    // If the current month is January (0), go to December of the previous year\r\n    if (currentMonth === 0) {\r\n        currentMonth = 12;\r\n        currentYear -= 1;\r\n    }\r\n    return [currentYear, currentMonth]\r\n}\r\n\r\n// function isConso(fullDate, year, month) {\r\n//     // Create a Date object from the full date input\r\n//     // inputDate = (new Date(fullDate.replace(\" +0000 UTC\", \"\") + \"Z\")).toISOString();\r\n//     // const date = new Date(inputDate);\r\n//     const date_ = new Date(fullDate)\r\n//     // debug(\"AA\", date_)\r\n//     return (date_.getFullYear() === year \u0026\u0026 date_.getMonth() + 1 === month);\r\n//     // return true\r\n// }\r\n// function convertToISO8601(dateString) {\r\n//     // Remove the \"+0000 UTC\" part of the string\r\n//     debug(dateString)\r\n//     const cleanedDateString = dateString.split(\" +\")[0];\r\n\r\n//     // Create a new Date object using the cleaned date string\r\n//     const date = new Date(cleanedDateString + \"Z\");\r\n\r\n//     // Format the date object to ISO 8601 string\r\n//     const isoString = date.toISOString();\r\n\r\n//     return isoString;\r\n// }\r\n\r\nfunction getClassificationGroup(){\r\n    clas_data = CralDB.QueryByComp(\"select classification from {{supplier_companies}} where sup_company=$1\", 0, jscall.company)\r\n    if (clas_data.length != 0){\r\n        return clas_data[0].classification\r\n    }\r\n    return \"\"\r\n}\r\n\r\nfunction conso_filling(){\r\n    isConsoImp = CralDB.QueryByComp(\"select consolidation from {{einv_implementation}}\", jscall.company)\r\n    if (isConsoImp[0].consolidation == true){\r\n\r\n        // Additional Handling to check conso parameter\r\n        isBuyerBasedFilter = CralDB.QueryByComp(`SELECT criteria FROM {{conso_parameter}} WHERE is_buyer=true limit 1`, jscall.company).length\r\n        if (isBuyerBasedFilter){\r\n            return true\r\n        }\r\n\r\n        \r\n        var conso_fill_val = CralDB.QueryByComp(\"select conso_sls ,conso_man_sls ,conso_acr from {{conso_filing}} limit 1\", jscall.company);\r\n        if (conso_fill_val \u0026\u0026 conso_fill_val.length \u003e 0) {\r\n            if (conso_fill_val[0].conso_sls == \"10\"  || conso_fill_val[0].conso_man_sls == \"10\"  || conso_fill_val[0].conso_acr == \"10\"){\r\n                return true;\r\n            }\r\n        }\r\n    }\r\n    return false\r\n}"},{"Bizobj":{"ObjectName":"docUpload","Description":"Document Upload","external":true,"input_struct":"","out_success":"","out_fail":""},"Script":"//**** Business Object docUpload Created by malai on 24-Jul-2024 22:00:56 ****//\r\n\r\nvar einvois = require(\"./scripts/Business_Objects/createEinvoice\")\r\nvar consoCheck = require(\"./scripts/Business_Objects/conso_checking\")\r\nfunction docUploadExcel(){\r\n    payload_obj = {}\r\n    inv_numbers = []\r\n    comp_miss_match = 0\r\n    message = \"\"\r\n    rejectedRecords = []\r\n    // submittedRecords = []\r\n    file_ret = {}\r\n\r\n    entity_ds = CralDB.QueryByComp(`select skip_master,skip_duplicate_files from {{entity_data_set}} where sup_company=${jscall.company} and data_set='${jscall.input.DataSet}'`, jscall.company)\r\n    if (entity_ds.length == 0){\r\n        message = `Entity Data set is not maintained for ${jscall.company} - ${jscall.input.DataSet}`\r\n        return {\r\n            \"AcceptedInvoices\": inv_numbers, \r\n            \"RejectedInvoices\": rejectedRecords,\r\n            \"Message\": message,\r\n            \"SubmissionResult\": {}\r\n        }\r\n    } else {\r\n        if (entity_ds[0].skip_duplicate_files \u0026\u0026\r\n            CralDB.QueryByComp(`select file_name from {{uploaded_file_details}} where file_name='${jscall.input.FileName}'`, jscall.company)?.length){\r\n            \r\n            return {\r\n                \"AcceptedInvoices\": inv_numbers, \r\n                \"RejectedInvoices\": rejectedRecords,\r\n                \"Message\": \"Filename already used for Upload.\",\r\n                \"SubmissionResult\": {}\r\n            }\r\n        }\r\n    }\r\n    skip_master = entity_ds[0].skip_master\r\n    \r\n    if (skip_master){\r\n        file_details = {\r\n            \"file_name\": jscall.input.FileName??\"\",\r\n            \"upload_user\": jscall.user,\r\n            \"upload_time\": einvois.getCurrentDateTimeUTC()\r\n        }\r\n        file_ret = CralDB.PublishTopic(\"uploaded_file_details\", jscall.company, \"Insert\", file_details, jscall.user)\r\n        if (!file_ret?.Success){\r\n            // message = \"Unable to Upload Excel.\"\r\n            return {\r\n                \"AcceptedInvoices\": inv_numbers, \r\n                \"RejectedInvoices\": rejectedRecords,\r\n                \"Message\": message,\r\n                \"SubmissionResult\": {}\r\n            }\r\n        }\r\n    }\r\n    payload_data = CralDB.QueryByComp(`select excl_einv_field,excl_interim_field,dval from {{fld_parameter}} where excl=true`, jscall.company)\r\n\r\n    // Need to add if Master Data should capture for Supplier Data.\r\n    // supplier_data = CralDB.QueryByComp(`select * from {{supplier_companies}} where sup_company=${jscall.company}`, jscall.company)\r\n    // supplier_adrs = CralDB.QueryByComp(`select * from {{address_master}} where data_set='${jscall.input?.DataSet}' and adrs_code='${supplier_data[0]?.sup_adrs}'`, jscall.company)\r\n    \r\n    \r\n    if (Array.isArray(jscall.input.Records) \u0026\u0026 (jscall.input.Records.length)){\r\n    //    na_fields = [\r\n    //        \"buy_sst_reg\", \"sup_sst_reg\", \r\n    //        \"sup_reg_brn\", \"buy_reg_brn\",\r\n    //     //    \"sup_badsca\", \r\n    //        \"org_e_inv_no\", \"org_doc_uuid\"\r\n    //     ]\r\n        for (i =0; i \u003c jscall.input.Records.length; i++){\r\n             let st = CralUtil.Date.Now()\r\n            payload_obj = {}\r\n            payload_data.forEach(rec =\u003e {\r\n                // if (jscall.input.Records[i][rec.excl_einv_field] \u0026\u0026 jscall.input.Records[i][rec.excl_einv_field] != \"NA\" ){\r\n                if (jscall.input.Records[i][rec.excl_einv_field] ){\r\n                    // \u0026\u0026 (jscall.input.Records[i][rec.excl_einv_field] != \"NA\"    // NA repalce to empty issue fixed 03/12/2024\r\n                    //     || (jscall.input.Records[i][rec.excl_einv_field] == \"NA\" \r\n                    //         \u0026\u0026 na_fields.includes(rec.excl_interim_field))) ){\r\n                    payload_obj[rec.excl_interim_field] = typeof jscall.input.Records[i][rec.excl_einv_field] == \"string\" ? jscall.input.Records[i][rec.excl_einv_field].trim() : jscall.input.Records[i][rec.excl_einv_field];\r\n                } else {\r\n                    if (rec.dval != \"null\"){\r\n                        payload_obj[rec.excl_interim_field] = rec.dval\r\n                    }\r\n                }\r\n                // payload_data[rec.excl_interim_field] = jscall.input.Records[i][rec.excl_einv_field]\r\n            })\r\n            // println(\"Mapping Completed\",CralUtil.Date.Sub(st, CralUtil.Date.Now()))\r\n            println(\"Mapping Completed\", st, CralUtil.Date.Now())\r\n            // println(payload_obj)\r\n            if (payload_obj[\"pytm\"]) {\r\n                payload_obj[\"pytm\"] = payload_obj[\"pydt\"] ? `${payload_obj[\"pydt\"]} ${payload_obj[\"pytm\"]}` : undefined\r\n            }\r\n            if (file_ret?.Message?.upload_id){\r\n                payload_obj[\"upload_id\"] = file_ret.Message.upload_id\r\n            }\r\n            if (payload_obj[\"idoc\"] == null){\r\n                payload_obj[\"idoc\"] = 0\r\n            }\r\n            payload_obj[\"data_set\"] = jscall.input.DataSet\r\n            payload_obj[\"line_cnt\"] = 0\r\n            payload_obj[\"fld_category\"] = \"\"\r\n            payload_obj[\"temp_code\"] = jscall.input.Template\r\n            payload_obj[\"mandatory\"] = []\r\n            payload_obj[\"unmapped\"] = []\r\n            payload_obj[\"sctg\"] = get_sctg(payload_obj[\"sctg\"])\r\n            //  println(\"Before Insert\",CralUtil.Date.Sub(st, CralUtil.Date.Now()))\r\n             println(\"Before Insert\", st, CralUtil.Date.Now())\r\n            if (payload_obj[\"comp\"] == jscall.company){\r\n                inv_creation = CralDB.PublishTopic(\"inv_interim_excl\", jscall.company, \"Upsert\", payload_obj, jscall.user)\r\n                if (inv_creation?.Success == true){\r\n                    CralUtil.LogInfo(\"Successfully Invoice Inserted\", \"ExcelUpload\", inv_creation)\r\n                    if (!inv_numbers.includes(inv_creation?.Message?.inv_no)) {\r\n                        inv_numbers.push(inv_creation?.Message?.inv_no);\r\n                    }\r\n                } else {\r\n                    // if (!submittedRecords.includes(payload_obj[\"inv_no\"]) \u0026\u0026 inv_creation?.Message == \"Invoice Already Submitted\") {\r\n                    //     submittedRecords.push(payload_obj[\"inv_no\"]);\r\n                    // } else {\r\n                        rejectedRecords.push(inv_creation)\r\n                    // }\r\n                    CralUtil.LogInfo(\"Unable to Insert to Interim Table\", \"ExcelUpload\", inv_creation)\r\n                }\r\n            } else {\r\n                comp_miss_match += 1\r\n            }\r\n             println(\"Insert Completed\", st, CralUtil.Date.Now())\r\n        }\r\n    }\r\n    if (comp_miss_match != 0){\r\n        if (comp_miss_match == jscall.input.Records.length){\r\n            message = \"Excel Upload Failed, due to Company miss match.\"\r\n        } else {\r\n            message = \"Company Miss match found in few records.\"\r\n        }\r\n    }\r\n    // if (submittedRecords.length){\r\n    //     message += ` ${submittedRecords.length} Invoices has been Already Submitted.`\r\n    // }\r\n\r\n\r\n\r\n    // Invoice Submission to another API\r\n    // inv_results = excelInvoiceCreation(inv_numbers, skip_master)\r\n\r\n    return {\r\n        \"AcceptedInvoices\": inv_numbers, \r\n        \"RejectedInvoices\": rejectedRecords,\r\n        \"Message\": message.trim(),\r\n        // \"SubmissionResult\": inv_results\r\n        \"SubmissionResult\": [],\r\n        \"SkipMaster\": skip_master\r\n    }\r\n}\r\n\r\nfunction checkAndCreateInvoice(){\r\n    return excelInvoiceCreation(jscall.input.inv_nums, jscall.input.skipMaster)\r\n}\r\n\r\nfunction excelInvoiceCreation(Invois, isMasterUpdate){\r\n    let excl_inv = []\r\n    let error = []\r\n    let conso_inv = []\r\n    if (Array.isArray(Invois) \u0026\u0026 Invois.length \u003e 0){\r\n        for (i2 = 0; i2 \u003c Invois.length; i2++){\r\n            if (CheckForConso(Invois[i2], isMasterUpdate)){\r\n                if (CreateConsoInvoice(Invois[i2], isMasterUpdate)){\r\n                    conso_inv.push(Invois[i2])\r\n                    CralUtil.LogInfo(\"ExcelUpload\", \"DeletingInvoice(Consolidation)\", Invois[i2])\r\n                    del_ret = CralDB.QueryByComp(`DELETE FROM {{inv_interim_excl}} WHERE inv_no='${Invois[i2]}'`, jscall.company)\r\n                }\r\n            } else {\r\n                if (CheckInvois(Invois[i2], isMasterUpdate) == true){\r\n                    if (CreateEinv(Invois[i2], isMasterUpdate) == true){\r\n                        excl_inv.push(Invois[i2])\r\n                        CralUtil.LogInfo(\"ExcelUpload\", \"DeletingInvoice\", Invois[i2])\r\n                        del_ret = CralDB.QueryByComp(`DELETE FROM {{inv_interim_excl}} WHERE inv_no='${Invois[i2]}'`, jscall.company)\r\n                    } else {\r\n                        error.push(`Error While Creation: ${Invois[i2]}`)\r\n                    }\r\n                } else {\r\n                    error.push(`Error While Validating: ${Invois[i2]}`)\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return {\r\n        \"Input\": Invois,\r\n        \"CreatedInvoices\": excl_inv,\r\n        \"ConsolidationInvoices\": conso_inv,\r\n        \"Error\": error\r\n    }\r\n}\r\n\r\nfunction CheckForConso(inv_number, isOriginalValue){\r\n    if (CralDB.QueryByComp(\"select consolidation from {{einv_implementation}}\", jscall.company)[0]?.consolidation){\r\n        let check_data = CralDB.QueryByComp(`SELECT * from {{inv_interim_excl}} where inv_no='${inv_number}' limit 1`, jscall.company)\r\n        let docType = isOriginalValue?einvois.get_doc_type(check_data[0].doct):check_data[0].doct\r\n        if (docType==='01'){\r\n            if (consoCheck.checkConsoInvoice(check_data[0])){\r\n                return true\r\n            }\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\nfunction CreateConsoInvoice(inv_number, isOriginalValue){\r\n    println(\"Creating Consolidation Invoice\")\r\n    create_inv_data = CralDB.QueryByComp(`select * from {{inv_interim_excl}} where inv_no='${inv_number}' ORDER BY line`, jscall.company)\r\n    header_data = {\r\n        \"comp\": create_inv_data[0].comp,\r\n        \"tran\": create_inv_data[0].tran,\r\n        \"idoc\": create_inv_data[0].idoc,\r\n        \"doct\": isOriginalValue ? create_inv_data[0].doct : einvois.get_doc_type(create_inv_data[0].doct),\r\n        \"itbp\": create_inv_data[0].inv_bp,\r\n        \"itoa\": create_inv_data[0].buy_adrs,\r\n        \"ccur\": isOriginalValue ? create_inv_data[0].ccur : einvois.get_ccur(create_inv_data[0].ccur, create_inv_data[0].data_set),\r\n        \"rate\": create_inv_data[0].rate,\r\n        \"paym\": isOriginalValue ? create_inv_data[0].paym : einvois.get_paym(create_inv_data[0].paym, create_inv_data[0].data_set),\r\n        \"term\": create_inv_data[0].term,\r\n        \"tote\": create_inv_data[0].tote,\r\n        \"toti\": create_inv_data[0].toti,\r\n        \"tott\": create_inv_data[0].tott,\r\n        \"cvat\": isOriginalValue ? create_inv_data[0].cvat : einvois.get_cvat(create_inv_data[0].cvat, create_inv_data[0].data_set),\r\n        \"stbp\": create_inv_data[0].ship_bp,\r\n        \"sadr\": create_inv_data[0].ship_adrs,\r\n        \"dtrm\": create_inv_data[0].dtrm,\r\n        \"styp\": create_inv_data[0].sctg,\r\n        \"cein\": false,\r\n        \"disb\": false,\r\n        \"dshp\": false,\r\n        \"sinc\": false,\r\n        \"fbil\": create_inv_data[0].fbil,\r\n        \"pamt\": create_inv_data[0].pamt,\r\n        \"pref\": create_inv_data[0].pref,\r\n        \"bref\": create_inv_data[0].bref,\r\n        \"tpat\": create_inv_data[0].tpat,\r\n        \"tnat\": create_inv_data[0].tnat,\r\n        \"tdis\": create_inv_data[0].tdis,\r\n        \"tfee\": create_inv_data[0].tfee,\r\n        \"ramt\": create_inv_data[0].ramt,\r\n        \"ttax\": create_inv_data[0].ttax,\r\n        \"ttat\": create_inv_data[0].ttat,\r\n        \"adis\": create_inv_data[0].adis,\r\n        \"afee\": create_inv_data[0].afee,\r\n        \"frm1\": create_inv_data[0].frm1,\r\n        \"ftrd\": create_inv_data[0].ftrd,\r\n        \"anum\": create_inv_data[0].anum,\r\n        \"frm2\": create_inv_data[0].frm2,\r\n        \"ochg\": create_inv_data[0].ochg,\r\n        \"ochg_amnt\": create_inv_data[0].ochg_amnt,\r\n        \"ochg_reason\": create_inv_data[0].ochg_reason,\r\n        \"esta\": \"10\",\r\n        \"submission_uid\": \"\",\r\n        \"err_msg\": \"\",\r\n        \"line_cnt\": 0,\r\n        \"trgt\": \"\",\r\n        \"val_err\": \"\",\r\n        \"cncl\": false,\r\n        \"det_tax\": \"\",\r\n        \"amnt_ex\": 0,\r\n        \"e_invdt\": \"\",\r\n        \"src_type\": isOriginalValue ? create_inv_data[0].src_type : einvois.get_src_inv_type(create_inv_data[0].src_type),\r\n        \"adis_reason\": \"\",\r\n        \"afee_reason\": \"\",\r\n        \"par_cncl\": false,\r\n        \"s_line_cnt\": create_inv_data[0].line_cnt,\r\n        \"einv_stat\": \"10\",\r\n        \"conso_inv\": \"\",\r\n        \"inv_date\": einvois.getCurrentDateTimeUTC(),\r\n        \"data_set\": create_inv_data[0].data_set,\r\n        \"inv_no\": create_inv_data[0].inv_no\r\n    }\r\n    headerResult = CralDB.PublishTopic(\"conso_header\", jscall.company, \"Upsert\", header_data, jscall.user)\r\n    if (headerResult?.Success){\r\n        err_line_cnt = 0\r\n        create_inv_data.forEach(lines =\u003e {\r\n            line_data = {\r\n                \"comp\": lines.comp,\r\n                \"tran\": lines.tran,\r\n                \"idoc\": lines.idoc,\r\n                \"line\": lines.line,\r\n                \"item\": lines.item,\r\n                \"item_desc\": lines.item_desc,\r\n                \"pric\": lines.pric,\r\n                \"cvat\": isOriginalValue ? lines.l_cvat : einvois.get_cvat(l_cvat, lines.data_set),\r\n                \"pvat\": lines.pvat,\r\n                \"txai\": lines.txai,\r\n                \"ceno\": lines.tex_cer_no,\r\n                \"amtt\": lines.amtt,\r\n                \"stot\": lines.stot,\r\n                \"amti\": lines.amti,\r\n                \"dqua\": lines.dqua,\r\n                \"cuni\": isOriginalValue ? lines.cuni : einvois.get_cuni(lines.cuni, lines.data_set),\r\n                \"disc\": lines.disc,\r\n                \"ldai\": lines.ldai,\r\n                \"ccde\": lines.ccde,\r\n                \"ccty\": isOriginalValue ? lines.ccty : einvois.get_ccty(lines.ccty, lines.data_set),\r\n                \"clas\": isOriginalValue ? lines.clas : einvois.get_clas(lines.clas, lines.data_set),\r\n                \"feer\": lines.feer,\r\n                \"feea\": lines.feea,\r\n                \"err_msg\": \"\",\r\n                \"lsta\":\"10\",\r\n                \"disc_reason\": \"\",\r\n                \"fee_reason\": \"\"\r\n            }\r\n            lineResult = CralDB.PublishTopic(\"conso_line\", jscall.company, \"Upsert\", line_data, jscall.user)\r\n            if (!lineResult?.Success){\r\n                CralUtil.LogInfo(\"ErrorInsertingLine\", \"ExcelUploadConso\", {\"Payload\": line_data, \"Result\": lineResult});\r\n                err_line_cnt += 1;\r\n            }\r\n        })\r\n        if (!err_line_cnt){\r\n            return true\r\n        }\r\n    } else {\r\n        CralUtil.LogInfo(\"ErrorCreatingConso\", \"ExcelUpload\", {\"Payload\": header_data, \"Result\": headerResult})\r\n        return false\r\n    }\r\n}\r\n\r\nfunction CreateEinv(inv_num, isOriginalValue){\r\n    println(\"Creating Excel Invoice\")\r\n    let header_payload = {};\r\n    err_cnt = 0\r\n    create_inv = CralDB.QueryByComp(\"select * from {{inv_interim_excl}} where inv_no='$1' ORDER BY line\", jscall.company, inv_num)\r\n    // println(\"CreateINV\" + JSON.stringify(create_inv))\r\n    inv_fields = CralDB.QueryByComp(`select topic,fld_name,excl,excl_interim_field,dval from {{fld_parameter}}`, jscall.company)\r\n    if (create_inv?.length != 0){\r\n        inv_fields.forEach(inv_field =\u003e {\r\n            if (inv_field.topic == \"einv_header\"){\r\n                if (inv_field.excl == true || inv_field.excl_interim_field == \"inv_no\"){\r\n                    header_payload[inv_field.fld_name] = create_inv[0][inv_field.excl_interim_field]\r\n                } else {\r\n                    if (inv_field.dval != \"null\"){\r\n                        header_payload[inv_field.fld_name] = inv_field.dval\r\n                    }\r\n                }\r\n            }\r\n        })\r\n        // println(header_payload)\r\n        \r\n        // Map Master Data\r\n        if (!isOriginalValue) {\r\n            header_payload[\"doct\"] = einvois.get_doc_type(header_payload[\"doct\"])\r\n            header_payload[\"ccur\"] = einvois.get_ccur(header_payload[\"ccur\"], create_inv[0].data_set)\r\n            header_payload[\"paym\"] = einvois.get_paym(header_payload[\"paym\"], create_inv[0].data_set)\r\n            header_payload[\"cvat\"] = einvois.get_cvat(header_payload[\"cvat\"], create_inv[0].data_set)\r\n            // header_payload[\"sctg\"] = get_sctg(header_payload[\"sctg\"])\r\n            header_payload[\"sup_cste\"] = einvois.get_state(header_payload[\"sup_country\"], header_payload[\"sup_cste\"], create_inv[0].data_set)\r\n            header_payload[\"buy_cste\"] = einvois.get_state(header_payload[\"buy_country\"], header_payload[\"buy_cste\"], create_inv[0].data_set)\r\n            header_payload[\"ship_cste\"] = einvois.get_state(header_payload[\"ship_country\"], header_payload[\"ship_cste\"], create_inv[0].data_set)\r\n            header_payload[\"sup_country\"] = einvois.get_ccty(header_payload[\"sup_country\"], create_inv[0].data_set)\r\n            header_payload[\"buy_country\"] = einvois.get_ccty(header_payload[\"buy_country\"], create_inv[0].data_set)\r\n            header_payload[\"ship_country\"] = einvois.get_ccty(header_payload[\"ship_country\"], create_inv[0].data_set)\r\n        }\r\n\r\n        // Default Values\r\n        header_payload[\"dataset\"] = create_inv[0].data_set\r\n        header_payload[\"sup_code\"] = create_inv[0].comp\r\n        isInvAvil = (CralDB.QueryByComp(`select e_inv_no from {{einv_header}} where e_inv_no='${header_payload[\"e_inv_no\"]}' and einv_stat='60'`, jscall.company).length != 0)\r\n        if (isInvAvil){\r\n            einv_mode = \"Update\"\r\n            delete header_payload[\"line_cnt\"]\r\n            CralDB.QueryByComp(`DELETE FROM {{einv_validation}} where einv_code='${header_payload[\"e_inv_no\"]}'`, jscall.company)\r\n        } else {\r\n            einv_mode = \"Insert\"\r\n        }\r\n        header_result = CralDB.PublishTopic(\"einv_header\", create_inv[0].comp, einv_mode, header_payload, jscall.user)\r\n        if (header_result?.Success == true){\r\n            line_results = []\r\n            for (j = 0; j\u003ccreate_inv.length; j++){\r\n                line_payload = {}\r\n                inv_fields.forEach(inv_field =\u003e {\r\n                    if (inv_field.topic == \"einv_lines\"){\r\n                        if (inv_field.excl == true){\r\n                            line_payload[inv_field.fld_name] = create_inv[j][inv_field.excl_interim_field]\r\n                        } else {\r\n                            if (inv_field.dval != \"null\"){\r\n                                line_payload[inv_field.fld_name] = inv_field.dval\r\n                            }\r\n                        }\r\n                    }\r\n                })\r\n                // Map Master Data\r\n                if (!isOriginalValue){\r\n                    line_payload[\"cvat\"] = einvois.get_cvat(line_payload[\"cvat\"], create_inv[j].data_set)\r\n                    line_payload[\"clas\"] = einvois.get_clas(line_payload[\"clas\"], create_inv[j].data_set)\r\n                    line_payload[\"cuni\"] = einvois.get_cuni(line_payload[\"cuni\"], create_inv[j].data_set)\r\n                }\r\n\r\n                line_payload[\"e_inv_no\"] = header_result.Message.e_inv_no\r\n                line_result = CralDB.PublishTopic(\"einv_lines\", create_inv[0].comp, einv_mode, line_payload, jscall.user)\r\n                if (line_result?.Success != true){\r\n                    err_cnt += 1\r\n                }\r\n                line_results.push(line_result)\r\n            }\r\n            if (err_cnt == 0){\r\n                if (header_result.Message.sctg == \"20\" || header_result.Message.sctg == \"30\"){\r\n                    CralUtil.LogInfo(\"InvoiceUnderForFiling\", \"ExcelInvoice\", {\"inv\": header_result.Message.e_inv_no, \"Category\": CralUtil.GetListDesc(\"sales_catg\", header_result.Message.sctg)})\r\n                    return true\r\n                }\r\n                inv_submission = einvois.submitEinvoiceToLHDN(header_result.Message.e_inv_no)\r\n                CralUtil.LogInfo(\"InvoiceSubmission\", header_result.Message.e_inv_no, inv_submission)\r\n                return true\r\n            } else {\r\n                CralUtil.LogInfo(\"Excel Upload\", \"einv_lines\", line_results)\r\n            }\r\n        } else {\r\n            CralUtil.LogInfo(\"Excel Upload\", \"einv_header\", [create_inv, isInvAvil, header_result, header_payload])\r\n        }\r\n    }\r\n    return false\r\n}\r\n\r\nfunction get_sctg(src_sctg){\r\n    switch(src_sctg.toUpperCase()){\r\n        case \"LOCAL\":\r\n            sctg = \"10\"\r\n            break\r\n        case \"EXPORT\":\r\n            sctg = \"20\"\r\n            break\r\n        case \"IMPORT\":\r\n            sctg = \"30\"\r\n            break\r\n        default:\r\n            sctg = src_sctg == \"10\" || src_sctg == \"20\" || src_sctg == \"30\" ? src_sctg : \"\"\r\n            break\r\n    }\r\n    return sctg\r\n}\r\n\r\nfunction CheckInvois(inv_number, check_master){\r\n    check_inv_result = []\r\n    map_check = []\r\n    err_lines_count = 0\r\n    // update_payload = {}\r\n    line_check = false\r\n    check_inv = CralDB.QueryByComp(\"select * from {{inv_interim_excl}} where inv_no='$1' ORDER BY line\", jscall.company, inv_number)\r\n    for(i1 = 0; i1 \u003c check_inv.length; i1++){\r\n        update_payload = {}\r\n        if (!check_master){\r\n            map_check = mapCheck(check_inv[i1])\r\n        }\r\n        core_fields = core_fields_valid(check_inv[i1])\r\n\r\n        update_payload[\"inv_no\"] = check_inv[i1].inv_no\r\n        update_payload[\"line\"] = check_inv[i1].line\r\n        \r\n        if (core_fields?.length != 0){\r\n            update_payload[\"fld_category\"] = \"10\"\r\n            update_payload[\"mandatory\"] = core_fields\r\n            update_payload[\"err_msg\"] = getSupplierErrorMessage(core_fields)\r\n            debug(update_payload)\r\n        }\r\n        if (map_check?.length != 0){\r\n            update_payload[\"fld_category\"] = \"100\"\r\n            update_payload[\"unmapped\"] = map_check\r\n            debug(update_payload)\r\n        }\r\n\r\n        if (!check_master){ // Check the Document Type only when Skip Master is Enabled.\r\n            if (!(CralDB.QueryDSByComp(\"getref\", jscall.company, \"code\", \"einv_doc_types\", \"code\", check_inv[i1].doct)).length){\r\n                update_payload[\"err_msg\"] = update_payload[\"err_msg\"] ? update_payload[\"err_msg\"] + \" Invalid Invoice Type.\" : \"Invalid Invoice Type.\"\r\n            }\r\n        }\r\n\r\n        // To check Other Chagres Details. (If Other Charges is true then Other Charges amount and Reason is mandatory.)\r\n        if (check_inv[i1].ochg){\r\n            if (!check_inv[i1].ochg_amnt){\r\n                CralUtil.LogInfo(\"ExcelUploadError\", inv_number, [check_inv[i1].ochg ,\"Other Charges Amount is Mandatory\"], update_payload[\"err_msg\"])\r\n                update_payload[\"err_msg\"] = update_payload[\"err_msg\"] ? update_payload[\"err_msg\"] + \" Other Charges Amount is Mandatory.\" : \"Other Charges Amount is Mandatory.\"\r\n            }\r\n            if (!check_inv[i1].ochg_reason){\r\n                CralUtil.LogInfo(\"ExcelUploadError\", inv_number, [check_inv[i1].ochg ,\"Other Charges Reason is Mandatory\"], update_payload[\"err_msg\"])\r\n                update_payload[\"err_msg\"] = update_payload[\"err_msg\"] ? update_payload[\"err_msg\"] + \" Other Charges Reason is Mandatory.\" : \"Other Charges Reason is Mandatory.\"\r\n            }\r\n        }\r\n\r\n        debug(\"final\", update_payload)\r\n        // debug(CralDB.PublishTopic(\"inv_interim_excl\", jscall.company, \"Update\", update_payload, jscall.user))\r\n        check_inv_result.push(CralDB.PublishTopic(\"inv_interim_excl\", jscall.company, \"Update\", update_payload, jscall.user))\r\n        if (core_fields?.length != 0 || map_check?.length != 0 || update_payload[\"err_msg\"]){\r\n            CralUtil.LogInfo(inv_number, \"Error in Line\", [core_fields, map_check, update_payload[\"err_msg\"]])\r\n            err_lines_count += 1\r\n        }\r\n    }\r\n    debug(check_inv.length)\r\n    // println(check_inv[0].s_line_cnt)\r\n    if (check_inv.length == check_inv[0].s_line_cnt){\r\n        if (err_lines_count == 0){\r\n            return true\r\n        } else {\r\n            // CralDB.QueryByComp(`UPDATE {{inv_interim_excl}} SET err_msg='${update_payload[\"err_msg\"] ? update_payload[\"err_msg\"] : \"\"} No. of Lines with error: ${err_lines_count}' where inv_no='${inv_number}'`, jscall.company)\r\n            CralDB.QueryByComp(`UPDATE {{inv_interim_excl}} SET err_msg = CONCAT(err_msg, ' No. of Lines with error: ', ${err_lines_count}) WHERE inv_no = '${inv_number}'`, jscall.company)\r\n            CralUtil.LogInfo(\"ErrorInLineLevel\", \"ExcelUpload\", `No. of Lines with error: ${err_lines_count}`)\r\n            return false\r\n        }\r\n    } else {\r\n        // CralDB.QueryByComp(`UPDATE {{inv_interim_excl}} SET err_msg='${update_payload[\"err_msg\"] ? update_payload[\"err_msg\"] : \"\"} Line Count Miss Match. Source Line Count ${check_inv[0].s_line_cnt}. No. of Lines Available ${check_inv.length}' where inv_no='${inv_number}'`, jscall.company)\r\n        CralDB.QueryByComp(`UPDATE {{inv_interim_excl}} SET err_msg = CONCAT(err_msg, ' Line Count Miss Match. Source Line Count ', ${check_inv[0].s_line_cnt}, '. No. of Lines Available ', ${check_inv.length}) WHERE inv_no = '${inv_number}'`, jscall.company)\r\n        CralUtil.LogInfo(\"LineCountMissMatch\", \"ExcelUpload\", `Line Count Miss Match. Source Line Count ${check_inv[0].s_line_cnt}. No. of Lines Available ${check_inv.length}`)\r\n        return false\r\n    }\r\n}\r\n\r\n// function checkCodeField(invoice_data){\r\n//     codeValidation = []\r\n//     if (invoice_data.doct){\r\n//         if (!(CralDB.QueryDSByComp(\"getref\", jscall.company, \"code\", \"einv_doc_types\", \"code\", invoice_data.doct)).length){\r\n//             codeValidation.push(\"doct\")\r\n//         }\r\n//     }\r\n//     return codeValidation\r\n// }\r\n\r\nfunction getSupplierErrorMessage(fields){\r\n    ret_message = \"\"\r\n    fields.forEach(field =\u003e {\r\n        if (field.includes(\"sup\")){\r\n            ret_message += `${CralDB.QueryByComp(`select excl_einv_field from {{fld_parameter}} where excl_interim_field='${field}'`, jscall.company)[0].excl_einv_field} is Mandatory. `\r\n        }\r\n    })\r\n    return ret_message\r\n}\r\nfunction mapCheck(invois){\r\n    unmap = []\r\n    if (einvois.get_cvat(invois.cvat, invois.data_set) == \"\"){\r\n        unmap.push(\"cvat\")\r\n    }\r\n    if (einvois.get_ccur(invois.ccur, invois.data_set) == \"\"){\r\n        unmap.push(\"ccur\")\r\n    }\r\n    if (einvois.get_clas(invois.clas, invois.data_set) == \"\"){\r\n        unmap.push(\"clas\")\r\n    }\r\n    if (einvois.get_doc_type(invois.doct) == \"\"){\r\n        unmap.push(\"doct\")\r\n    }\r\n    if (einvois.get_ccty(invois.sup_country, invois.data_set) == \"\"){\r\n        unmap.push(\"sup_country\")\r\n    }\r\n    if (einvois.get_ccty(invois.buy_country, invois.data_set) == \"\"){\r\n        unmap.push(\"buy_country\")\r\n    }\r\n    // if (invois.ship_country){\r\n    //     if (einvois.get_ccty(invois.ship_country) == \"\"){\r\n    //         unmap.push(\"ship_country\")\r\n    //     }\r\n    // }\r\n    if (einvois.get_state(invois.sup_country, invois.sup_cste, invois.data_set) == \"\"){\r\n        unmap.push(\"sup_cste\")\r\n    }\r\n    if (einvois.get_state(invois.buy_country, invois.buy_cste, invois.data_set) == \"\"){\r\n        unmap.push(\"buy_cste\")\r\n    }\r\n    // if (invois.ship_cste){\r\n    //     if (einvois.get_state(invois.ship_country, invois.ship_cste) == \"\"){\r\n    //         unmap.push(\"ship_cste\")\r\n    //     }\r\n    // }\r\n    return unmap\r\n}\r\n\r\nfunction core_fields_valid(invois){\r\n    core_flds = []\r\n    // Invoice Data\r\n    if (invois.doct == \"\"){\r\n        core_flds.push(\"dcot\")\r\n    }\r\n    if (invois.ccur == \"\"){\r\n        core_flds.push(\"ccur\")\r\n    }\r\n    if (invois.tote == 0){\r\n        core_flds.push(\"tote\")\r\n    }\r\n    if (invois.toti == 0){\r\n        core_flds.push(\"toti\")\r\n    }\r\n    if (invois.tpat == 0){\r\n        core_flds.push(\"tpat\")\r\n    }\r\n    \r\n    if (invois?.cvat == \"\"){\r\n        core_flds.push(\"cvat\")\r\n    } //else {\r\n    //     // Total Tax amount per tax type\r\n    //     if (doc_header[0]?.tott == 0){\r\n    //         if (doc_header[0]?.cvat != \"06\" \u0026\u0026 doc_header[0]?.cvat != \"E\"){\r\n    //         }\r\n    //     }\r\n    // }\r\n\r\n    // Invoice Line\r\n    if (invois.clas == \"\"){\r\n        core_flds.push(\"clas\")\r\n    }\r\n    if (invois.item_desc == \"\"){\r\n        core_flds.push(\"item_desc\")\r\n    }\r\n\r\n    // Not Mandatory for Free of Cost Item or Service\r\n    // if (invois.pric == 0){\r\n    //     core_flds.push(\"pric\")\r\n    // }\r\n    // if (invois.stot == 0){\r\n    //     core_flds.push(\"stot\")\r\n    // }\r\n    // if (invois.amti == 0){\r\n    //     core_flds.push(\"amti\")\r\n    // }\r\n    \r\n    \r\n    if (invois?.l_cvat == \"\"){\r\n        core_flds.push(\"l_cvat\")\r\n        // tax Type\r\n    }\r\n    // if (doc_line[i].cvat != \"E\" \u0026\u0026 doc_line[i].cvat != \"\" \u0026\u0026 doc_line[i].txai == 0){\r\n    //     //Tax Amount\r\n    // }\r\n\r\n    // Supplier Data\r\n    if (invois.sup_name == \"\"){\r\n        core_flds.push(\"sup_name\")\r\n    }\r\n    if (invois.sup_tin == \"\"){\r\n        core_flds.push(\"sup_tin\")\r\n    }\r\n    if (invois.sup_reg_nric == \"\" \u0026\u0026 invois.sup_reg_brn == \"\" \u0026\u0026 invois.sup_reg_passport == \"\" \u0026\u0026 invois.sup_reg_army == \"\"){\r\n        core_flds.push(\"sup_reg_nric\", \"sup_reg_brn\", \"sup_reg_passport\", \"sup_reg_army\")\r\n    }\r\n    if (invois.sup_msic == \"\"){\r\n        core_flds.push(\"sup_msic\")\r\n    }\r\n    if (invois.sup_badsca == \"\"){\r\n        core_flds.push(\"sup_badsca\")\r\n    }\r\n    // if (invois.sup_adrs == \"\"){\r\n    //     core_flds.push(\"sup_adrs\")\r\n    // }\r\n    if (invois.sup_cont_num == \"\"){\r\n        core_flds.push(\"sup_cont_num\")\r\n    }\r\n    if (invois.sup_adrs_line0 == \"\" \u0026\u0026 invois.sup_adrs_line1 == \"\" \u0026\u0026 invois.sup_adrs_line2 == \"\"){\r\n        core_flds.push(\"sup_adrs_line0\")\r\n    }\r\n    if (invois.sup_city == \"\"){\r\n        core_flds.push(\"sup_city\")\r\n    }\r\n    if (invois.sup_cste == \"\"){\r\n        core_flds.push(\"sup_cste\")\r\n    }\r\n    if (invois.sup_country == \"\"){\r\n        core_flds.push(\"sup_country\")\r\n    }\r\n\r\n    // Buyer Data\r\n    if(invois.buy_name == \"\"){\r\n        core_flds.push(\"buy_name\")\r\n    }\r\n    if(invois.buy_tin == \"\"){\r\n        core_flds.push(\"buy_tin\")\r\n    }\r\n    if(invois.buy_reg_nric == \"\" \u0026\u0026 invois.buy_reg_brn == \"\" \u0026\u0026 invois.buy_reg_passport == \"\" \u0026\u0026 invois.buy_reg_army == \"\"){\r\n        core_flds.push(\"buy_reg_nric\", \"buy_reg_brn\", \"buy_reg_passport\", \"buy_reg_army\")\r\n    }\r\n    // if(doc_header[0].buy_sst == true \u0026\u0026 doc_buy[0].buy_sst_reg == \"\"){\r\n    //     CreatePortalValidation(doc_header[0].e_inv_no, 0, \"Buyer SST is Mandatory.\", \"Buyer\")\r\n    // }\r\n    if(invois.buy_adrs == \"\"){\r\n        // CreatePortalValidation(doc_header[0].e_inv_no, 0, \"Buyer Address is Mandatory.\", \"Buyer\")\r\n    }\r\n    if(invois.buy_cont_num == \"\"){\r\n        core_flds.push(\"buy_cont_num\")\r\n    }\r\n    if(invois.buy_adrs_line0 == \"\" \u0026\u0026 invois.buy_adrs_line1 == \"\" \u0026\u0026 invois.buy_adrs_line2 == \"\"){\r\n        core_flds.push(\"buy_adrs_line0\")\r\n    }\r\n    if(invois.buy_city == \"\"){\r\n        core_flds.push(\"buy_city\")\r\n    }\r\n    if(invois.buy_cste == \"\"){\r\n        core_flds.push(\"buy_cste\")\r\n    }\r\n    if(invois.buy_country == \"\"){\r\n        core_flds.push(\"buy_country\")\r\n    }\r\n    return core_flds\r\n}\r\n\r\nfunction check_validations(EInvoiceCodeNumber){\r\n    debug(\"Checking...\")\r\n\r\n    eih_data = CralDB.QueryByComp(\"select * from {{einv_header}} where e_inv_no='$1'\", jscall.company, EInvoiceCodeNumber)\r\n    if (eih_data.length == 0){\r\n        jscall_error = \"Record not found\"\r\n        return false\r\n    } else {\r\n         let [sup_id_val, sup_id_type] = get_reg_num_type(eih_data[0].sup_reg_brn, eih_data[0].sup_reg_nric, eih_data[0].sup_reg_army, eih_data[0].sup_reg_passport)\r\n        debug(eih_data[0].sup_tin, sup_id_type, sup_id_val)\r\n        if( validate_tin(eih_data[0].sup_tin, sup_id_type, sup_id_val) != true){\r\n            CreatePortalValidation(eih_data[0].e_inv_no, 0, \"Supplier TIN Validation Failed\", \"Supplier\")\r\n        }\r\n        let [buy_id_val, buy_id_type] = get_reg_num_type(eih_data[0].buy_reg_brn, eih_data[0].buy_reg_nric, eih_data[0].buy_reg_army, eih_data[0].buy_reg_passport)\r\n        if (eih_data[0].inv_bp != \"\" \u0026\u0026 eih_data[0].inv_bp != null \u0026\u0026 eih_data[0].inv_bp != undefined){\r\n            if( validate_tin(eih_data[0].buy_tin, buy_id_type, buy_id_val) != true){\r\n                CreatePortalValidation(eih_data[0].e_inv_no, 0, \"Buyer TIN Validation Failed\", \"Buyer\")\r\n            }\r\n        }\r\n        if (CralDB.QueryByComp(\"select einv_code from {{einv_validation}} where einv_code='$1'\", jscall.company, eih_data[0].e_inv_no)?.length == 0){\r\n            if (eih_data[0].err_msg != \"\" || eih_data[0].einv_stat != \"10\"){\r\n                resolved_update = {\r\n                    \"e_inv_no\": eih_data[0].e_inv_no,\r\n                    \"err_msg\": \"\",\r\n                    \"einv_stat\": \"10\"\r\n                }\r\n                CralDB.PublishTopic(\"einv_header\", jscall.company, \"Update\", resolved_update, jscall.user)\r\n            };\r\n            return true\r\n        }\r\n    }\r\n    return false\r\n}\r\n\r\nfunction validate_tin(tin, idType, idVal){\r\n    \r\n    lhdn = NewLHDN()\r\n    token = get_lhdn_token()\r\n    if (token == false){\r\n        return false;   \r\n    } else {\r\n        lhdn_response = lhdn.ValidateTaxPayerTIN(token, tin, idType, idVal)\r\n        switch(lhdn_response.Result.Status){\r\n            case 200:\r\n                return lhdn_response.Result.Response\r\n                break;\r\n            default:\r\n                // jscall_error = lhdn_response.Result.Status + \" - \" + JSON.stringify(lhdn_response.Result.Response)\r\n                return false;\r\n                break\r\n        }\r\n    }\r\n    return false\r\n}\r\n\r\nfunction test_DataUpsert(){\r\n    return DataUpsert(jscall.input.temp_code, jscall.input.records)\r\n}\r\nfunction DataUpsert(temp_code, input_data){\r\n    // temp_code = \"EX_TP0001\"\r\n    update_data = []\r\n    old_data = CralDB.QueryByComp(`SELECT * FROM {{inv_interim_excl}} WHERE temp_code='${temp_code}'`, jscall.company)\r\n    // return old_data\r\n    update_data = input_data.filter(old_rec =\u003e {\r\n        return !old_data.some(new_rec =\u003e {\r\n            return Object.keys(new_rec).every(keys =\u003e new_rec[keys] === old_rec[keys])\r\n        });\r\n    });\r\n    // const update_data = input_data.filter(obj1 =\u003e {\r\n    //     return !old_data.some(obj2 =\u003e {\r\n    //         return Object.keys(obj1).every(key =\u003e obj1[key] === obj2[key]);\r\n    //     });\r\n    // });\r\n    // const update_data = input_data.filter(obj2 =\u003e {\r\n    //     return !old_data.some(obj1 =\u003e {\r\n    //         return Object.keys(obj1).every(key =\u003e obj1[key] === obj2[key]);\r\n    //     });\r\n    // });\r\n    return update_data\r\n}\r\n\r\nfunction getMasterData(){\r\n    data_update = []\r\n    \r\n    inv_data = CralDB.QueryByComp(`SELECT * FROM {{inv_interim_excl}} WHERE temp_code='${jscall.input.temp_code}'`, jscall.company)\r\n    inv_data.forEach(inv =\u003e {\r\n        if (!CralDB.QueryByComp(`select skip_master from {{entity_data_set}} where sup_company=${inv.comp} and data_set='${inv.data_set}'`, jscall.company)[0]?.skip_master){\r\n            payload = {}\r\n            payload[\"inv_no\"] = inv.inv_no\r\n            payload[\"line\"] = inv.line\r\n            payload[\"inv_bp\"] = inv.inv_bp\r\n            payload[\"ship_bp\"] = inv.ship_bp\r\n            payload[\"sup_adrs\"] = inv.sup_adrs\r\n            payload[\"buy_adrs\"] = inv.buy_adrs\r\n            payload[\"ship_adrs\"] = inv.ship_adrs\r\n            buyer_data = CralDB.QueryByComp(`select * from {{buyer_companies}} where data_set='${inv.data_set}' and buy_code='${inv.inv_bp}'`, jscall.company)\r\n            if (buyer_data.length != 0){\r\n                payload[\"buy_name\"] = buyer_data[0].buy_name\r\n                payload[\"buy_cont_num\"] = buyer_data[0].buy_cont_num\r\n                payload[\"buy_email\"] = buyer_data[0].buy_email\r\n                payload[\"buy_sst_reg\"] = buyer_data[0].buy_sst_reg\r\n                payload[\"buy_tin\"] = buyer_data[0].buy_tin\r\n                payload[\"buy_reg_brn\"] = buyer_data[0].buy_reg_brn\r\n                payload[\"buy_reg_nric\"] = buyer_data[0].buy_reg_nric\r\n                payload[\"buy_reg_passport\"] = buyer_data[0].buy_reg_passport\r\n                payload[\"buy_reg_army\"] = buyer_data[0].buy_reg_army\r\n                if (!inv.buy_adrs){\r\n                    payload[\"buy_adrs\"] = buyer_data[0].buy_adrs\r\n                }\r\n            }\r\n            ship_data = CralDB.QueryByComp(`select * from {{buyer_companies}} where data_set='${inv.data_set}' and buy_code='${inv.ship_bp}'`, jscall.company)\r\n            if (ship_data.length != 0){\r\n                payload[\"ship_name\"] = ship_data[0].buy_name\r\n                payload[\"ship_tin\"] = ship_data[0].buy_tin\r\n                payload[\"ship_reg_brn\"] = ship_data[0].buy_reg_brn\r\n                payload[\"ship_reg_nric\"] = ship_data[0].buy_reg_nric\r\n                payload[\"ship_reg_passport\"] = ship_data[0].buy_reg_passport\r\n                payload[\"ship_reg_army\"] = ship_data[0].buy_reg_army\r\n                if (!inv.ship_adrs){\r\n                    payload[\"ship_adrs\"] = ship_data[0].buy_adrs\r\n                }\r\n            }\r\n            sup_address = CralDB.QueryByComp(`select * from {{address_master}} where data_set='${inv.data_set}' and adrs_code='${inv.sup_adrs}'`, jscall.company)\r\n            if (sup_address.length != 0){\r\n                payload[\"sup_city\"] = sup_address[0].adrs_city\r\n                payload[\"sup_postal_zone\"] = sup_address[0].postal_zone\r\n                payload[\"sup_adrs_line0\"] = sup_address[0].adrs_line0\r\n                payload[\"sup_adrs_line1\"] = sup_address[0].adrs_line1\r\n                payload[\"sup_adrs_line2\"] = sup_address[0].adrs_line2\r\n                payload[\"sup_country\"] = sup_address[0].adrs_country\r\n                payload[\"sup_cste\"] = sup_address[0].adrs_state\r\n            }\r\n            buy_address = CralDB.QueryByComp(`select * from {{address_master}} where data_set='${inv.data_set}' and adrs_code='${inv.buy_adrs}'`, jscall.company)\r\n            if (buy_address.length != 0){\r\n                payload[\"buy_city\"] = buy_address[0].adrs_city\r\n                payload[\"buy_postal_zone\"] = buy_address[0].postal_zone\r\n                payload[\"buy_adrs_line0\"] = buy_address[0].adrs_line0\r\n                payload[\"buy_adrs_line1\"] = buy_address[0].adrs_line1\r\n                payload[\"buy_adrs_line2\"] = buy_address[0].adrs_line2\r\n                payload[\"buy_country\"] = buy_address[0].adrs_country\r\n                payload[\"buy_cste\"] = buy_address[0].adrs_state\r\n            }\r\n            ship_address = CralDB.QueryByComp(`select * from {{address_master}} where data_set='${inv.data_set}' and adrs_code='${inv.ship_adrs}'`, jscall.company)\r\n            if (ship_address.length != 0){\r\n                payload[\"ship_city\"] = ship_address[0].adrs_city\r\n                payload[\"ship_postal_zone\"] = ship_address[0].postal_zone\r\n                payload[\"ship_adrs_line0\"] = ship_address[0].adrs_line0\r\n                payload[\"ship_adrs_line1\"] = ship_address[0].adrs_line1\r\n                payload[\"ship_adrs_line2\"] = ship_address[0].adrs_line2\r\n                payload[\"ship_country\"] = ship_address[0].adrs_country\r\n                payload[\"ship_cste\"] = ship_address[0].adrs_state\r\n            }\r\n            data_update.push({\r\n                \"input\": payload,\r\n                \"result\" : CralDB.PublishTopic(\"inv_interim_excl\", jscall.company, \"Update\", payload, jscall.user)\r\n            })\r\n        }\r\n    })\r\n    return data_update\r\n}"},{"Bizobj":{"ObjectName":"excel_data","Description":"Excel Data","external":true,"input_struct":"","out_success":"","out_fail":""},"Script":"//**** Business Object excel_data Created by parthi on 13-Dec-2024 11:20:48 ****//\r\nvar query = require(\"./scripts/Business_Objects/initializeUserGroup\")\r\nfunction getReviewData(){\r\n    // return \"select * from {{inv_interim_excl}} where temp_code = '$1' \"+(query.userAccessBuildQuery()).replaceAll('dataset', 'data_set')\r\n    reviewData = CralDB.QueryByComp(\r\n        \"select * from {{inv_interim_excl}} where temp_code = '$1' \"+(query.userAccessBuildQuery()).replaceAll('dataset', 'data_set'),\r\n        jscall.company,\r\n        jscall.input.layout_code\r\n    )\r\n\r\n    return reviewData\r\n}\r\n\r\nfunction getSubmissionUUID(){\r\n    // return query.data_set()\r\n    \r\n    return CralDB.QueryDSByComp(\"getSubmissionUUID\",jscall.company, jscall.input.from_date, jscall.input.to_date, query.userAccessBuildQuery())\r\n\r\n}\r\n\r\nfunction getValidation(){\r\n\r\n    return CralDB.QueryDSByComp(\"getValidation\",jscall.company, jscall.input.from_date, jscall.input.to_date, query.userAccessBuildQuery())\r\n\r\n}\r\n\r\nfunction getUploadedFile(){\r\n\r\n    return CralDB.QueryDSByComp(\"getUploadedFile\",jscall.company, jscall.input.from_date, jscall.input.to_date, query.userAccessBuildQuery())\r\n\r\n}"},{"Bizobj":{"ObjectName":"generate_report","Description":"Generate Report","external":true,"input_struct":"","out_success":"","out_fail":""},"Script":"//**** Business Object generate_report Created by malai on 26-Sep-2024 13:05:38 ****//\r\n\r\nlet rpt_def = {\r\n    header: CralDB.QueryByComp(`select * from {{rep_layouts_header}} where layout_code='${jscall.input.layout_code}'`, jscall.company)[0],\r\n    lines: CralDB.QueryByComp(`select * from {{rep_layouts_line}} where layout_code='${jscall.input.layout_code}' and print=true order by grp_typ, seq`, jscall.company)\r\n}\r\n\r\nlet amountFields = [\"tpat\", \"toti\", \"tott\", \"tote\", \"tote + tdis\", \"amti + txai\", \"txai\", \"stot\", \"pric\", \"tdis\"]\r\nlet printCurrency = rpt_def.lines.filter(obj =\u003e obj.grp_typ == \"Detail\" \u0026\u0026 obj.field_value == \"ccur\").length ? true : false;\r\n\r\nfunction saveAndCompile(){\r\n\r\n    let headerBg = rpt_def.header.back_clr_head\r\n    let detailBg = rpt_def.header.back_clr_table\r\n    let footerBg = rpt_def.header.back_clr_footer\r\n    let glFont = rpt_def.header.font == \"arial\" ? \"Arial\" : \"Arial\"\r\n    let hdrContentAlign = rpt_def.header.cont_align_head == \"right\" ? \"R\" : rpt_def.header.cont_align_head == \"center\" ? \"C\" : \"L\"\r\n    let footerContentAlign = rpt_def.header.cont_align_footer == \"right\" ? \"R\" : rpt_def.header.cont_align_footer == \"center\" ? \"C\" : \"L\"\r\n    let repeatHeader = rpt_def.header.r_rep_head\r\n    let repeatFooter = rpt_def.header.r_footer\r\n    \r\n    let leftMargin = 6\r\n    let rightMargin = 203\r\n    let topMargin = 5\r\n    let bottomMargin = 295\r\n    let footerHeight = calculateLayoutHeight(\"Report Footer\", 5, 1, 0)\r\n    let pageNumHeight = 5\r\n\r\n    let reportWidth = rightMargin - leftMargin\r\n    let titleConstraint = getLogoConstraint(rpt_def.header.logo_const, leftMargin, rightMargin, topMargin)\r\n    let infoConstraint = getInfoLayoutConstrains(leftMargin, rightMargin)\r\n    // let qr_code = {\r\n    //     type: \"QRCODE\",\r\n    //     x: infoConstraint.qr.x,\r\n    //     y: 0,\r\n    //     h: infoConstraint.qr.w,\r\n    //     w: infoConstraint.qr.w,\r\n    //     content: `qr_url + \"/\" + doc_uuid + \"/share/\" + qr_code`\r\n    // }\r\n    let detailConstraint = getDetailLayoutXPosition(reportWidth, \r\n                                                    rpt_def.lines\r\n                                                    .filter(obj =\u003e obj.grp_typ === \"Detail\")\r\n                                                    .map(obj =\u003e obj.field_value))\r\n    let title_height = calculateLayoutHeight(\"Title\", 4, 1, 2 + (titleConstraint.content.y + 8))\r\n    let inv_info_height = calculateLayoutHeight(\"Report Header\", 4, 0, 8)\r\n\r\n    let inv_info = getTextChild(\r\n        infoConstraint.inv.x, 1, infoConstraint.inv.w, 5, glFont, 9,\r\n        '#666666', true, false, false, false, 'L', 'Invoice Info'\r\n    )\r\n    let inv_conso_info = getTextChild(\r\n        infoConstraint.bp.x, 1, infoConstraint.bp.w + infoConstraint.inv.w,\r\n        5, glFont, 9, '#666666', true, false, false, false, 'L', 'Invoice Info'\r\n    )\r\n    let sup_info = getTextChild(\r\n        infoConstraint.bp.x, 1, infoConstraint.bp.w, 5, glFont, 9,\r\n        '#666666', true, false, false, false, 'L', 'Supplier Info'\r\n    )\r\n    let buy_info = getTextChild(\r\n        infoConstraint.bp.x, 1, infoConstraint.bp.w, 5, glFont, 9,\r\n        '#666666', true, false, false, false, 'L', 'Buyer Info'\r\n    )\r\n\r\n    let layouts = {\r\n        title: {\r\n            id: \"ReportTitle\",\r\n            type: \"header\",\r\n            x: leftMargin,\r\n            y: topMargin,\r\n            // h: 2 + (titleConstraint.content.y + 8) + (rpt_def.lines.filter(obj =\u003e obj.grp_typ === \"Title\").length - 1) * 4,\r\n            h: title_height,\r\n            w: reportWidth,\r\n            bg: headerBg,\r\n            bw: 0.25,\r\n            bs: \"B\",\r\n            ce: `(doct==\"01\" || doct==\"02\" || doct==\"03\" || doct==\"04\")`,\r\n            childern: [\r\n                {\r\n                    id: \"Logo\",\r\n                    type: \"Image\",\r\n                    path: rpt_def.header.logo,\r\n                    x: titleConstraint.x,\r\n                    y: titleConstraint.y,\r\n                    h: titleConstraint.h,\r\n                    w: titleConstraint.w,\r\n                    mar: true\r\n                },\r\n                getTextChild(\r\n                    titleConstraint.documentType.x,\r\n                    (title_height / 2) - (titleConstraint.documentType.h / 2),\r\n                    titleConstraint.documentType.w,\r\n                    titleConstraint.documentType.h,\r\n                    glFont, 10, '#808080', true, false, false, true, 'C',\r\n                    `doc_dsca.toUpperCase()`\r\n                ),\r\n                {\r\n                    type: \"rect\",\r\n                    x: titleConstraint.documentType.x,\r\n                    y: topMargin + 3,\r\n                    w: titleConstraint.documentType.w,\r\n                    h: title_height - 6,\r\n                    bs: \"D\",\r\n                    bw: 0.4,\r\n                    bc: \"#777777\"\r\n                }\r\n            ]\r\n        },\r\n        title2: {\r\n            id: \"ReportTitle2\",\r\n            type: \"header\",\r\n            x: leftMargin,\r\n            y: topMargin,\r\n            // h: 2 + (titleConstraint.content.y + 8) + (rpt_def.lines.filter(obj =\u003e obj.grp_typ === \"Title\").length - 1) * 4,\r\n            h: title_height,\r\n            w: reportWidth,\r\n            bg: headerBg,\r\n            bw: 0.25,\r\n            bs: \"B\",\r\n            ce: `(doct!=\"01\" \u0026\u0026 doct!=\"02\" \u0026\u0026 doct!=\"03\" \u0026\u0026 doct!=\"04\")`,\r\n            childern: [\r\n                {\r\n                    id: \"Logo\",\r\n                    type: \"Image\",\r\n                    path: rpt_def.header.logo,\r\n                    x: titleConstraint.x,\r\n                    y: titleConstraint.y,\r\n                    h: titleConstraint.h,\r\n                    w: titleConstraint.w,\r\n                    mar: true\r\n                },\r\n                getTextChild(\r\n                    titleConstraint.documentType.x,\r\n                    (title_height / 2) - titleConstraint.documentType.h,\r\n                    titleConstraint.documentType.w,\r\n                    titleConstraint.documentType.h,\r\n                    glFont, 10, '#808080', true, false, false, true, 'C',\r\n                    `doc_dsca.toUpperCase()`\r\n                ),\r\n                {\r\n                    type: \"rect\",\r\n                    x: titleConstraint.documentType.x,\r\n                    y: topMargin + 3,\r\n                    w: titleConstraint.documentType.w,\r\n                    h: title_height - 6,\r\n                    bs: \"D\",\r\n                    bw: 0.4,\r\n                    bc: \"#777777\"\r\n                }\r\n            ]\r\n        },\r\n        rpt_header : { childern: [inv_info] },\r\n        rpt_header2 : { childern: [inv_info] },\r\n        rpt_header_conso: {\r\n            id: \"ConsoHeader\",\r\n            type: \"header\",\r\n            x: leftMargin,\r\n            y: 0,\r\n            h: inv_info_height,\r\n            w: reportWidth,\r\n            ce: `(buy_tin === 'EI00000000010' \u0026\u0026 (doct!='01' \u0026\u0026 doct!='11'))`,\r\n            childern: [inv_conso_info]\r\n        },\r\n        rpt_header_conso2: {\r\n            id: \"ConsoHeader2\",\r\n            type: \"header\",\r\n            x: leftMargin,\r\n            y: 0,\r\n            h: inv_info_height,\r\n            w: reportWidth,\r\n            ce: `(buy_tin === 'EI00000000010' \u0026\u0026 (doct=='01' || doct=='11'))`,\r\n            childern: [inv_conso_info]\r\n        },\r\n        grp_supplier: {\r\n            id: \"SupplierInfo\",\r\n            type: \"header\",\r\n            x: leftMargin,\r\n            y: 0,\r\n            h: calculateLayoutHeight(\"Group Supplier\", 4, 0, 8),\r\n            w: reportWidth,\r\n            ce: `(doct==\"11\" \u0026\u0026 buy_tin !== 'EI00000000010')`,\r\n            childern: [sup_info]\r\n        },\r\n        grp_supplier2: {\r\n            id: \"SupplierInfo2\",\r\n            type: \"header\",\r\n            x: leftMargin,\r\n            y: 0,\r\n            h: calculateLayoutHeight(\"Group Supplier\", 4, 0, 8),\r\n            w: reportWidth,\r\n            ce: `((doct==\"12\" || doct==\"13\" || doct==\"14\") \u0026\u0026 buy_tin !== 'EI00000000010')`,\r\n            childern: [sup_info]\r\n        },\r\n        grp_buyer: {\r\n            id: \"BuyerInfo\",\r\n            type: \"header\",\r\n            x: leftMargin,\r\n            y: 0,\r\n            h: calculateLayoutHeight(\"Group Buyer\", 4, 0, 8),\r\n            w: reportWidth,\r\n            ce: `(doct==\"01\" \u0026\u0026 buy_tin !== 'EI00000000010')`,\r\n            childern: [buy_info]\r\n        },\r\n        grp_buyer2: {\r\n            id: \"BuyerInfo2\",\r\n            type: \"header\",\r\n            x: leftMargin,\r\n            y: 0,\r\n            h: calculateLayoutHeight(\"Group Buyer\", 4, 0, 8),\r\n            w: reportWidth,\r\n            ce: `((doct==\"02\" || doct==\"03\" || doct==\"04\") \u0026\u0026 buy_tin !== 'EI00000000010')`,\r\n            childern: [buy_info]\r\n        },\r\n        detail1: {\r\n            id: \"detail1\",\r\n            type: \"Detail\",\r\n            x: leftMargin,\r\n            y: 0,\r\n            w: rightMargin -leftMargin,\r\n            h: 7,\r\n            bg: detailBg,\r\n            bw: 0.25,\r\n            childern: []\r\n        },\r\n        detail2: {\r\n            id: \"detail2\",\r\n            type: \"Detail\",\r\n            x: leftMargin,\r\n            y: 0,\r\n            h: 7,\r\n            w: reportWidth,\r\n            re: \"e_inv_no\",\r\n            rc: 1,\r\n            bw: 0.25,\r\n            bs: \"LR\",\r\n            childern: []\r\n        },\r\n        detailLine: {\r\n            id: \"detailLine\",\r\n            type: \"Detail\",\r\n            x: leftMargin,\r\n            y: 0,\r\n            w: reportWidth,\r\n            h: 0,\r\n            bw: 0.25,\r\n            bs: \"B\",\r\n            childern: []\r\n        },\r\n        detail_footer: {\r\n            id: \"subTotal\",\r\n            type: \"Detail\",\r\n            x: leftMargin,\r\n            y: 0,\r\n            h: calculateLayoutHeight(\"Detail Footer\", 8, 0, 0),\r\n            w: reportWidth,\r\n            bw: 0.25,\r\n            bs: \"LRB\",\r\n            soc: true,\r\n            ce: `(tott != 0 \u0026\u0026 tdis != 0)`,\r\n            childern: []\r\n        },\r\n        detail_footer2: {\r\n            id: \"subTotal2\",\r\n            type: \"Detail\",\r\n            x: leftMargin,\r\n            y: 0,\r\n            h: calculateLayoutHeight(\"Detail Footer\", 8, 2, 0),\r\n            w: reportWidth,\r\n            bw: 0.25,\r\n            bs: \"LRB\",\r\n            soc: true,\r\n            ce: `(tott == 0 \u0026\u0026 tdis == 0)`,\r\n            childern: []\r\n        },\r\n        detail_footer3: {\r\n            id: \"subTotal3\",\r\n            type: \"Detail\",\r\n            x: leftMargin,\r\n            y: 0,\r\n            h: calculateLayoutHeight(\"Detail Footer\", 8, 1, 0),\r\n            w: reportWidth,\r\n            bw: 0.25,\r\n            bs: \"LRB\",\r\n            soc: true,\r\n            ce: `(tott != 0 \u0026\u0026 tdis == 0)`,\r\n            childern: []\r\n        },\r\n        detail_footer4: {\r\n            id: \"subTotal4\",\r\n            type: \"Detail\",\r\n            x: leftMargin,\r\n            y: 0,\r\n            h: calculateLayoutHeight(\"Detail Footer\", 8, 1, 0),\r\n            w: reportWidth,\r\n            bw: 0.25,\r\n            bs: \"LRB\",\r\n            soc: true,\r\n            ce: `(tott == 0 \u0026\u0026 tdis != 0)`,\r\n            childern: []\r\n        },\r\n        grp_footer: {},\r\n        report_footer: {\r\n            id: \"Footer\",\r\n            type: \"Header\",\r\n            x: leftMargin,\r\n            y: bottomMargin - (footerHeight + pageNumHeight),\r\n            h: footerHeight,\r\n            w: reportWidth,\r\n            bw: 0.25,\r\n            bs: \"DB\",\r\n            bg: footerBg,\r\n            soc: repeatFooter ? false : true,\r\n            childern: []\r\n        },\r\n        pageNum: {\r\n            id: \"pageNumber\",\r\n            type: \"Footer\",\r\n            x: leftMargin,\r\n            y: bottomMargin - pageNumHeight,\r\n            h: pageNumHeight,\r\n            w: reportWidth,\r\n            childern: []\r\n        }\r\n    }\r\n    let titleEndYPos = layouts.title.y + layouts.title.h;\r\n    \r\n    [\r\n        \"rpt_header_conso\", \"rpt_header_conso2\", \"grp_supplier\",\r\n        \"grp_supplier2\", \"grp_buyer\", \"grp_buyer2\"\r\n    ].forEach(group =\u003e {\r\n        // Repeat Header Handling\r\n        if (!repeatHeader){\r\n            layouts[group].ce += ` \u0026\u0026 (e_inv_no != tracker.Prev.e_inv_no)`\r\n        }\r\n        // Set Y Position and Adjust Height\r\n        layouts[group].y = titleEndYPos\r\n        layouts[group].h = Math.max(layouts[group].h, inv_info_height, infoConstraint.qr.w + 4)\r\n    });\r\n    let detailEndMargin = bottomMargin - (footerHeight + pageNumHeight + layouts.detail_footer.h)\r\n    let detailStartMargin = Math.max(layouts.grp_buyer.h, layouts.grp_supplier.h, layouts.grp_buyer2.h, layouts.grp_supplier2.h) + titleEndYPos\r\n    layouts.detail2.rc = parseInt((detailEndMargin - detailStartMargin) / layouts.detail2.h) - 1\r\n\r\n    rpt_def.lines.forEach(element =\u003e {\r\n        date_fields = [\"e_invdt\", \"etim\"]\r\n        if (date_fields.includes(element.field_value)){\r\n            element.field_value = `new Date(${element.field_value}.toString().slice(0,21).replace(' ', 'T').replace(' +', 'Z')).toLocaleString().replace(\",\", \"\").replaceAll(\"/\", \"-\").replace(/(\\\\d{2})-(\\\\d{2})-(\\\\d{4})/, \"$2-$1-$3\");`\r\n        }\r\n        elementStyle = getFieldStyle(element.style, \r\n                                     element.grp_typ === \"Title\" ? hdrContentAlign : \r\n                                     element.grp_typ === \"Report Footer\" ? footerContentAlign : \"\")\r\n        switch(element.grp_typ){\r\n            case \"Title\":\r\n                const isCompName = element.field_name === \"comp_name\";\r\n                const yPositionTitle = isCompName ? titleConstraint.content.y : getNextFieldPosition(layouts.title, \"y\");\r\n                const yPositionTitle2 = isCompName ? titleConstraint.content.y : getNextFieldPosition(layouts.title2, \"y\");\r\n                const fontSize = isCompName ? 14 : 8;\r\n                const textHeight = isCompName ? 8 : 4;\r\n                const color = isCompName ? '#222222' : '#444444';\r\n\r\n                const textContent = isCompName\r\n                    ? `${element.field_value}${elementStyle.textCase}`\r\n                    : element.field_name === \"comp_address\" || element.field_name === \"comp_cont_details\"\r\n                        ? `${element.field_value}${elementStyle.textCase}`\r\n                        : `fPrint(\"${element.print_label ? element.print_label : element.field_label}: \", ${element.field_value}${elementStyle.textCase})`;\r\n\r\n                layouts.title.childern.push(\r\n                    getTextChild(\r\n                        titleConstraint.content.x, yPositionTitle,\r\n                        titleConstraint.content.w, textHeight,\r\n                        glFont, fontSize, color, elementStyle.fb, elementStyle.fi, elementStyle.fu,\r\n                        false, elementStyle.al, textContent\r\n                    )\r\n                );\r\n\r\n                layouts.title2.childern.push(\r\n                    getTextChild(\r\n                        titleConstraint.content.x, yPositionTitle2,\r\n                        titleConstraint.content.w, textHeight,\r\n                        glFont, fontSize, color, elementStyle.fb, elementStyle.fi, elementStyle.fu,\r\n                        false, elementStyle.al, textContent\r\n                    )\r\n                );\r\n            break;\r\n\r\n            case \"Report Header\":\r\n                const rep_layouts = [\r\n                    { layout: layouts.rpt_header, exclude: [] , includeBPWidth: false},\r\n                    { layout: layouts.rpt_header2, exclude: [\"org_e_inv_no\"], includeBPWidth: false },\r\n                    { layout: layouts.rpt_header_conso, exclude: [] , includeBPWidth: true},\r\n                    { layout: layouts.rpt_header_conso2, exclude: [\"org_e_inv_no\"], includeBPWidth: true }\r\n                ];\r\n\r\n                rep_layouts.forEach(({ layout, exclude , includeBPWidth}) =\u003e {\r\n                    if (!exclude.includes(element.field_value)) {\r\n                        y_value = getNextFieldPosition(layout, \"y\");\r\n                        x_value = includeBPWidth ? infoConstraint.bp.x : infoConstraint.inv.x\r\n                        labelWidth = includeBPWidth ? infoConstraint.inv.label_width + (infoConstraint.bp.label_width / 2) : infoConstraint.inv.label_width\r\n                        contentWidth = includeBPWidth ? infoConstraint.inv.content_width + (infoConstraint.bp.label_width / 2) + infoConstraint.bp.content_width : infoConstraint.inv.content_width\r\n                        layout.childern.push(\r\n                            getTextChild(\r\n                                x_value, y_value, labelWidth, 4,\r\n                                glFont, 7, \"\", true, false, false, false, \"L\",\r\n                                `fPrint(\"${(element.print_label) ? element.print_label : element.field_label}\")`\r\n                            ),\r\n                            getTextChild(\r\n                                x_value + labelWidth, y_value,\r\n                                contentWidth, 4, glFont, 7,\r\n                                '#545454', elementStyle.fb, elementStyle.fi, elementStyle.fu,\r\n                                true, elementStyle.al, `${element.field_value}${elementStyle.textCase}`\r\n                            )\r\n                        );\r\n                    }\r\n                });\r\n            break;\r\n            case \"Group Supplier\":\r\n                const sup_layouts = [\r\n                    { layout: layouts.grp_supplier, exclude: [] },\r\n                    { layout: layouts.grp_supplier2, exclude: [] }\r\n                ];\r\n\r\n                sup_layouts.forEach(({ layout, exclude }) =\u003e {\r\n                    if (!exclude.includes(element.field_value)) {\r\n                        y_value = getNextFieldPosition(layout, \"y\");\r\n                        layout.childern.push(\r\n                            getTextChild(\r\n                                infoConstraint.bp.x, y_value, infoConstraint.bp.label_width, 4,\r\n                                glFont, 7, '', true, false, false, false, \"L\", \r\n                                `fPrint(\"${(element.print_label) ? element.print_label : element.field_label}\")`\r\n                            ),\r\n                            getTextChild(\r\n                                infoConstraint.bp.x + infoConstraint.bp.label_width, y_value,\r\n                                infoConstraint.bp.content_width, 4,\r\n                                glFont, 7, '#545454', elementStyle.fb, elementStyle.fi,\r\n                                elementStyle.fu, true, elementStyle.al,\r\n                                `${element.field_value}${elementStyle.textCase}`\r\n                            )\r\n                        );\r\n                    }\r\n                });\r\n            break;\r\n            case \"Group Buyer\":\r\n                const buy_layouts = [\r\n                    { layout: layouts.grp_buyer, exclude: [] },\r\n                    { layout: layouts.grp_buyer2, exclude: [] }\r\n                ];\r\n\r\n                buy_layouts.forEach(({ layout, exclude }) =\u003e {\r\n                    if (!exclude.includes(element.field_value)) {\r\n                        y_value = getNextFieldPosition(layout, \"y\");\r\n                        layout.childern.push(\r\n                            getTextChild(\r\n                                infoConstraint.bp.x, y_value, infoConstraint.bp.label_width, 4,\r\n                                glFont, 7, '', true, false, false, false, 'L', \r\n                                `fPrint(\"${(element.print_label) ? element.print_label : element.field_label}\")`\r\n                            ),\r\n                            getTextChild(\r\n                                infoConstraint.bp.x + infoConstraint.bp.label_width, y_value,\r\n                                infoConstraint.bp.content_width, 4, glFont, 7, '#545454',\r\n                                elementStyle.fb, elementStyle.fi, elementStyle.fu, true,\r\n                                elementStyle.al, `${element.field_value}${elementStyle.textCase}`\r\n                            )\r\n                        );\r\n                    }\r\n                });\r\n            break;\r\n            case \"Detail\":\r\n                if (element.field_value !== \"ccur\"){\r\n                    x_value = getNextFieldPosition(layouts.detail1, \"x\")\r\n                    layouts.detail1.childern.push(\r\n                        getTextChild(\r\n                            x_value ? x_value : leftMargin, 0,\r\n                            detailConstraint[element.field_value], 7,\r\n                            glFont, 10, '#FFFFFF', true, false, false, false, 'C',\r\n                            `fPrint(\"${(element.print_label) ? element.print_label : element.field_label}\")`\r\n                        )\r\n                    )\r\n                    layouts.detail2.childern.push(\r\n                        getTextChild(\r\n                            x_value ? x_value : leftMargin, 0, \r\n                            detailConstraint[element.field_value], 7, \r\n                            glFont, 8, '#414141', elementStyle.fb, elementStyle.fi, elementStyle.fu,\r\n                            false, elementStyle.al,\r\n                            getAmountFormatValue(element.field_value, elementStyle.textCase)\r\n                            // (amountFields.includes(element.field_value)) ? \r\n                            //     printCurrency ? \r\n                            //         `(${element.field_value}) ? fPrint(ccur, \" \", (toNum(${element.field_value})).toFixed(2).replace(/\\\\B(?=(\\\\d{3})+(?!\\\\d))/g, \",\")) : (toNum(${element.field_value})).toFixed(2).replace(/\\\\B(?=(\\\\d{3})+(?!\\\\d))/g, \",\")` : \r\n                            //         `(toNum(${element.field_value})).toFixed(2).replace(/\\\\B(?=(\\\\d{3})+(?!\\\\d))/g, \",\")` : \r\n                            //     `${element.field_value}${elementStyle.textCase}`\r\n                        )\r\n                    )\r\n                }\r\n            break;\r\n            case \"Detail Footer\":\r\n                const detailFooters = [\r\n                    { layout: layouts.detail_footer, exclude: [] },\r\n                    { layout: layouts.detail_footer2, exclude: [\"tott\", \"tdis\"] },\r\n                    { layout: layouts.detail_footer3, exclude: [\"tdis\"] },\r\n                    { layout: layouts.detail_footer4, exclude: [\"tott\"] }\r\n                ];\r\n\r\n                detailFooters.forEach(({ layout, exclude }) =\u003e {\r\n                    if (!exclude.includes(element.field_value)) {\r\n                        y_value = getNextFieldPosition(layout, \"y\");\r\n\r\n                        layout.childern.push(\r\n                            getTextChild(\r\n                                rightMargin - 60, y_value, 22, 8, glFont, 10, '#444444',\r\n                                true, false, false, false, \"R\",\r\n                                `fPrint(\"${(element.print_label) ? element.print_label : element.field_label}\")`\r\n                            ),\r\n                            getTextChild(\r\n                                rightMargin - 38, y_value, 38, 8, glFont, 10, '#444444',\r\n                                elementStyle.fb, elementStyle.fi, elementStyle.fu, false,\r\n                                elementStyle.al, \r\n                                getAmountFormatValue(element.field_value, elementStyle.textCase)\r\n                                // (amountFields.includes(element.field_value)) ? \r\n                                //     printCurrency ? \r\n                                //         `(${element.field_value}) ? fPrint(ccur, \" \", (toNum(${element.field_value})).toFixed(2).replace(/\\\\B(?=(\\\\d{3})+(?!\\\\d))/g, \",\")) : (toNum(${element.field_value})).toFixed(2).replace(/\\\\B(?=(\\\\d{3})+(?!\\\\d))/g, \",\")` : \r\n                                //         `(toNum(${element.field_value})).toFixed(2).replace(/\\\\B(?=(\\\\d{3})+(?!\\\\d))/g, \",\")` : \r\n                                //     `${element.field_value}${elementStyle.textCase}`\r\n                            )\r\n                        );\r\n                    }\r\n                });\r\n            break;\r\n            case \"Report Footer\":\r\n                if (element.field_value != \"tracker.Page\"){\r\n                    y_value = getNextFieldPosition(layouts.report_footer, \"y\")\r\n                    layouts.report_footer.childern.push(\r\n                        getTextChild(\r\n                            leftMargin, y_value, 22, 5, glFont, 8, '#444444',\r\n                            true, false, false, false, 'L',\r\n                            `fPrint(\"${(element.print_label) ? element.print_label : element.field_label}\")`\r\n                        ),\r\n                        getTextChild(\r\n                            leftMargin + 32, y_value, 32, 5, glFont, 8, '#444444',\r\n                            elementStyle.fb, elementStyle.fi, elementStyle.fu, false,\r\n                            elementStyle.al, `${element.field_value}${elementStyle.textCase}`\r\n                        )\r\n                    )\r\n                } else {\r\n                    layouts.pageNum.childern.push(\r\n                        {\r\n                            type: \"expr\",\r\n                            expression: `tPages=Math.ceil(s_line_cnt / ${layouts.detail2.rc});`\r\n                        },\r\n                        getTextChild(\r\n                            leftMargin, 0, reportWidth, pageNumHeight,\r\n                            glFont, 7, '#444444', elementStyle.fb, elementStyle.fi,\r\n                            elementStyle.fu, false, elementStyle.al,\r\n                            `fPrint(\"Page \", tracker.Page, \" of \", tPages)`\r\n                        )\r\n                    )\r\n                }\r\n            break;\r\n        }\r\n    });\r\n\r\n    // To Add QR in Layout\r\n\r\n    [\r\n        {group: \"rpt_header_conso\", invInfoChilds: []},\r\n        {group: \"rpt_header_conso2\", invInfoChilds: []},\r\n        {group: \"grp_supplier\", invInfoChilds: layouts.rpt_header2.childern},\r\n        {group: \"grp_supplier2\", invInfoChilds: layouts.rpt_header.childern},\r\n        {group: \"grp_buyer\", invInfoChilds: layouts.rpt_header2.childern},\r\n        {group: \"grp_buyer2\", invInfoChilds: layouts.rpt_header.childern}\r\n    ].forEach(({group, invInfoChilds}) =\u003e {\r\n        // qr_code.y = (layouts[group].h - infoConstraint.qr.w) / 2\r\n        qrYPosition = (layouts[group].h - infoConstraint.qr.w) / 2\r\n        layouts[group].childern = [...layouts[group].childern, ...invInfoChilds,\r\n            {\r\n                type: \"QRCODE\",\r\n                x: infoConstraint.qr.x,\r\n                y: qrYPosition \u003c 1 ? 2 : qrYPosition,\r\n                h: infoConstraint.qr.w,\r\n                w: infoConstraint.qr.w,\r\n                content: `qr_url + \"/\" + doc_uuid + \"/share/\" + qr_code`\r\n            }\r\n        ];\r\n    });\r\n\r\n    // To Draw Line in Sub Total\r\n    [\r\n        layouts.detail_footer, layouts.detail_footer2, \r\n        layouts.detail_footer3, layouts.detail_footer4\r\n    ].forEach(layout =\u003e {\r\n        layout.childern.push({\r\n            type: \"line\",\r\n            x: leftMargin,\r\n            x2: rightMargin,\r\n            y: layout.h - 8,\r\n            y2: layout.h - 8,\r\n            bw: 0.25\r\n        })\r\n    });\r\n\r\n    // To Add the line \"This is a computer generated invoice\"\r\n    layouts.report_footer.childern.push(\r\n        getTextChild(\r\n            rightMargin - 50, 0, 50, 5, glFont, 8, '#444444', false, true, false,\r\n            false, 'R', 'This is a computer generated invoice'\r\n        )\r\n    );\r\n    \r\n\r\n    return update_report(jscall.input.layout_code, getReportCode(layouts));\r\n}\r\n\r\nfunction getTextChild(x, y, w, h, fn, fs, fc, fb, fi, fu, mul, al, content){\r\n    return {\r\n        type: \"text\",\r\n        x, y, w, h,\r\n        fn, fs, fc,\r\n        fb, fi, fu,\r\n        mul, al,\r\n        content\r\n    }\r\n}\r\n\r\nfunction getAmountFormatValue(fld_val, txt_format){\r\n    let defaultFormat = `(toNum(${fld_val})).toFixed(2).replace(/\\\\B(?=(\\\\d{3})+(?!\\\\d))/g, \",\")`\r\n    return amountFields.includes(fld_val) ? printCurrency ? \r\n        `(${fld_val}) ? fPrint(ccur, \" \", ${defaultFormat}) : ${defaultFormat}` : \r\n        defaultFormat : \r\n    `${fld_val}${txt_format}`\r\n}\r\n\r\nfunction update_report(rpt_code, rpt_str){\r\n    rpt = Reports.GetReport(rpt_code)\r\n    if (rpt.ReportID){\r\n        rpt[\"DesignFile\"] = rpt_str\r\n        result = Reports.UpdateReport(rpt)\r\n    } else {\r\n        result = Reports.CreateReport({\r\n            \"CreatedAt\": CralUtil.Date.Now(),\r\n            \"CreatedBy\": jscall.user,\r\n            \"Description\": rpt_def.header.layout_desc,\r\n            \"DesignFile\": rpt_str,\r\n            \"ObjectFile\": null,\r\n            \"ParamDefault\": \"\",\r\n            \"Params\": \"e_inv_no\",\r\n            \"ReportID\": rpt_code,\r\n            \"SourceDSID\": \"einv_data\",\r\n            \"SourceQuery\": \"\",\r\n            \"SourceType\": \"Dataset\",\r\n            \"UpdatedAt\": null,\r\n            \"UpdatedBy\": \"\"\r\n        })\r\n    }\r\n    if (!result){\r\n        if (!Reports.CompileReport(rpt_code)){\r\n            return true\r\n        } else {\r\n            return false\r\n        }\r\n    } else {\r\n        return false\r\n    }\r\n}\r\n\r\n\r\nfunction getReportCode(input_layouts){\r\n\r\n    let report_code = `#PDF -P A4 -O p -M mm -ML 10 -MR 10 -MT 0 -MB 5`;\r\n\r\n    [\r\n        \"title\", \"title2\", \"rpt_header_conso\", \"rpt_header_conso2\", \"grp_buyer\", \"grp_buyer2\", \"grp_supplier\", \"grp_supplier2\",\r\n        \"detail1\", \"detail2\", \"detailLine\", \"detail_footer\", \"detail_footer2\",\r\n        \"detail_footer3\", \"detail_footer4\", \"report_footer\", \"pageNum\"\r\n    ].forEach(layout =\u003e {\r\n        report_code += getLayout(input_layouts[layout])\r\n    });\r\n\r\n    report_code += `\\n#PDFEND -N 'sample.pdf'`\r\n    return report_code\r\n}\r\n\r\nfunction getLayout(js_layout) {\r\n    let layout_str = `\\n\\n#LAYOUT`;\r\n\r\n    if (js_layout.id) layout_str += ` -ID \"${js_layout.id}\"`;\r\n    if (js_layout.type === \"Detail\") layout_str += ` -T Detail`;\r\n\r\n    layout_str += addAttributes(\r\n        ['x', 'y', 'w', 'h', 'bg', 'bw', 'bs', 'bc', 'ce', 're', 'rc', 'soc'], \r\n        {}, {x: 0, y: 0, w: 0, h: 0}, js_layout, ['soc']\r\n    )\r\n    \r\n    layout_str += `\\n${getChilderns(js_layout.childern)}`;\r\n    layout_str += `\\n#LAYOUTEND`;\r\n\r\n    return layout_str;\r\n}\r\n\r\n\r\nfunction getChilderns(js_child) {\r\n    let child_data = ``;\r\n\r\n    js_child.forEach(child =\u003e {\r\n        if (!child.type) return;\r\n\r\n        child_data += `\\n#${child.type.toUpperCase()} `;\r\n        \r\n        if (child.expression \u0026\u0026 child.type.toUpperCase() === \"EXPR\") {\r\n            child_data += ` ${child.expression}`\r\n            return\r\n        }\r\n        \r\n        default_attr = (child.type.toUpperCase() === \"TEXT\") ? \r\n                                {x: 0, y: 0, w: 0, h: 0, fn: 'Arial'} : \r\n                                {x: 0, y: 0, w: 0, h: 0};\r\n\r\n        child_data += addAttributes(\r\n            ['id', 'path', 'x', 'y', 'w', 'h', 'x2', 'y2',\r\n            'mar', 'al', 'fn', 'fs', 'fc', 'fb', 'fi', 'fu', 'mul',\r\n            'bw', 'bs', 'bc', 'content'],\r\n            {'path': 'P', 'content': 'C'}, default_attr, child, \r\n            ['mar', 'fb', 'fi', 'fu', 'mul']\r\n        )\r\n    });\r\n\r\n    return child_data;\r\n}\r\n\r\nfunction addAttributes(attributes, alternativeKeys, default_value, content_value, noValue){\r\n    let result = '';\r\n    attributes.forEach(key =\u003e {\r\n        isBlankAttr = noValue.includes(key)\r\n        if (content_value[key] || Object.keys(default_value).includes(key)){\r\n            let attr = alternativeKeys[key] ? alternativeKeys[key] : key\r\n            let value = content_value[key] ? content_value[key] : (default_value[key])\r\n            result += (isBlankAttr) ? ` -${attr.toUpperCase()}` : ` -${attr.toUpperCase()} ${value}`\r\n        }\r\n    })\r\n    return result\r\n}\r\nfunction getLogoConstraint(styles, lm, rm, tm){\r\n    let constraint = styles.split(\",\")\r\n    \r\n    let yPos = parseFloat(constraint[1]??0)\r\n    let img_width = parseFloat(constraint[2]??10)\r\n    let docType_width = 30\r\n    switch (constraint[0]){\r\n        case \"R\":\r\n            return {\r\n                x: rm - img_width,\r\n                y: yPos,\r\n                w: img_width,\r\n                h: img_width,\r\n                content: {\r\n                    x: lm + docType_width,\r\n                    y: 0 ,\r\n                    w: rm - (lm + img_width + docType_width)\r\n                },\r\n                documentType: {\r\n                    x: lm, y:yPos, w:docType_width, h:6\r\n                }\r\n            }\r\n        break;\r\n        case \"C\":\r\n            return {\r\n                x: ( (lm + rm) / 2 ) - (img_width / 2),\r\n                y: 0,\r\n                w: img_width,\r\n                h: img_width,\r\n                content: {\r\n                    x: lm + docType_width,\r\n                    y: yPos,\r\n                    w: rm - ((docType_width * 2) + lm) \r\n                },\r\n                documentType: {\r\n                    x: rm - docType_width, y:0 , w:docType_width , h:6 \r\n                }\r\n            }\r\n        break;\r\n        default:\r\n            return {\r\n                x: lm,\r\n                y: yPos,\r\n                w: img_width,\r\n                h: img_width,\r\n                content: {\r\n                    x: lm + img_width,\r\n                    y: 0,\r\n                    w: rm - (lm + img_width + docType_width)\r\n                },\r\n                documentType: {\r\n                    x: rm - docType_width, y:yPos , w:docType_width , h:6\r\n                }\r\n            }\r\n        break;\r\n    }\r\n}\r\n\r\nfunction getInfoLayoutConstrains(lm, rm) {\r\n    // const [qr_layout_width, qr_width] = rpt_def.header.qr_code.split(\",\");\r\n    const [qr_layout_width, qr_width] = [40,30]\r\n\r\n    const availableWidth = rm - lm - qr_layout_width;\r\n    const halfWidth = availableWidth / 2;\r\n    const labelWidth = halfWidth / 3.5;\r\n    const contentWidth = halfWidth - labelWidth;\r\n\r\n    return {\r\n        bp: {\r\n            x: lm,\r\n            w: halfWidth,\r\n            label_width: labelWidth,\r\n            content_width: contentWidth,\r\n        },\r\n        inv: {\r\n            x: lm + halfWidth,\r\n            w: halfWidth,\r\n            label_width: labelWidth,\r\n            content_width: contentWidth,\r\n        },\r\n        qr: {\r\n            x: rm - qr_layout_width + ((qr_layout_width - qr_width) / 2),\r\n            w: qr_width\r\n        },\r\n    };\r\n}\r\n\r\n// function calculateLayoutHeight(layout, height, omited_fields_count, additionalHeight){\r\n//     let totalFields = rpt_def.lines.filter(obj =\u003e obj.grp_typ === layout).length\r\n//     return ((totalFields - omited_fields_count) * height) + additionalHeight\r\n// }\r\n\r\nfunction calculateLayoutHeight(layout, height, omited_fields_count, additionalHeight){\r\n    let totalFields = rpt_def.lines.filter(obj =\u003e obj.grp_typ === layout).length\r\n    if (layout == \"Group Supplier\"){\r\n        rpt_def.lines.forEach(line =\u003e {\r\n            // if ([\"supplier_address\", \"sup_badsca\"].includes(line.field_value)){\r\n            if ([\"supplier_address\"].includes(line.field_value)){\r\n                additionalHeight += 8\r\n            }\r\n        })\r\n    }\r\n    if (layout == \"Group Buyer\"){\r\n        rpt_def.lines.forEach(line =\u003e {\r\n            if ([\"buyer_address\"].includes(line.field_value)){\r\n                additionalHeight += 8\r\n            }\r\n        })\r\n    }\r\n    return ((totalFields - omited_fields_count) * height) + additionalHeight\r\n}\r\n\r\n\r\nfunction getNextFieldPosition(layout, axis){\r\n    let addHeight = 0\r\n    if (layout.childern.length){\r\n        let last_child = layout.childern[layout.childern.length - 1]\r\n        if (axis == \"x\"){\r\n            return last_child.x + last_child.w\r\n        } else {\r\n            // if (last_child.content.includes(\"supplier_address\") || last_child.content.includes(\"buyer_address\") || last_child.content.includes(\"sup_badsca\")){\r\n            if (last_child.content.includes(\"supplier_address\") || last_child.content.includes(\"buyer_address\")){\r\n                addHeight = 8\r\n            }\r\n            return last_child.y + last_child.h + addHeight\r\n        }\r\n    } else {\r\n        return 0\r\n    }\r\n}\r\n\r\nfunction getDetailLayoutXPosition(total_width, fields) {\r\n    let min_length = {\r\n        \"line\": 8,\r\n        \"clas\": 12,\r\n        \"item\": 25,\r\n        \"item_desc\": 25,\r\n        \"dqua\": 8,\r\n        \"cuni\": 10,\r\n        \"pric\": 20,\r\n        \"disc\": 12,\r\n        \"ccur\": 0,\r\n        \"stot\": 20,\r\n        \"txai\": 20,\r\n        \"amti + txai\": 25\r\n    };\r\n\r\n    let max_length = {\r\n        \"line\": 10,\r\n        \"clas\": 12,\r\n        \"dqua\": 10,\r\n        \"cuni\": 10,\r\n        \"disc\": 12,\r\n        \"item\": 50,\r\n        \"item_desc\": 50,\r\n        \"amti + txai\": 35\r\n    };\r\n\r\n    // Calculate the initial sum of the lengths excluding 'ccur'\r\n    let total_sum = fields.filter(field =\u003e field !== \"ccur\").reduce((sum, field) =\u003e sum + min_length[field], 0);\r\n    \r\n    // The difference that we need to adjust\r\n    let diff = total_width - total_sum;\r\n\r\n    // Adjust \"item\" and \"item_desc\" based on the difference\r\n    if (diff !== 0) {\r\n        if (fields.includes(\"item\") \u0026\u0026 fields.includes(\"item_desc\")) {\r\n            let adjust = diff / 2;\r\n            min_length[\"item\"] = Math.min(max_length[\"item\"], Math.max(1, min_length[\"item\"] + adjust));\r\n            min_length[\"item_desc\"] = Math.min(max_length[\"item_desc\"], Math.max(1, min_length[\"item_desc\"] + adjust));\r\n        } else if (fields.includes(\"item\") \u0026\u0026 !fields.includes(\"item_desc\")) {\r\n            min_length[\"item\"] = Math.min(max_length[\"item\"], Math.max(1, min_length[\"item\"] + diff));\r\n        } else if (!fields.includes(\"item\") \u0026\u0026 fields.includes(\"item_desc\")) {\r\n            min_length[\"item_desc\"] = Math.min(max_length[\"item_desc\"], Math.max(1, min_length[\"item_desc\"] + diff));\r\n        } else if (!fields.includes(\"item\") \u0026\u0026 !fields.includes(\"item_desc\")) {\r\n            min_length[\"amti + txai\"] = Math.min(max_length[\"amti + txai\"], Math.max(1, min_length[\"amti + txai\"] + diff));\r\n        }\r\n    }\r\n\r\n    // Recalculate the total sum after the initial adjustment\r\n    total_sum = fields.filter(field =\u003e field !== \"ccur\").reduce((sum, field) =\u003e sum + min_length[field], 0);\r\n    diff = total_width - total_sum;\r\n\r\n    // Redistribute remaining diff to other fields while respecting max_length or total_width\r\n    let adjustFields = (diff) =\u003e {\r\n        let adjustableFields = fields.filter(field =\u003e min_length[field] \u003c (max_length[field] || total_width));\r\n        let totalAdjustable = adjustableFields.length;\r\n\r\n        if (totalAdjustable === 0) return; // No fields can be adjusted anymore\r\n\r\n        let adjustPerField = diff / totalAdjustable;\r\n\r\n        adjustableFields.forEach(field =\u003e {\r\n            let fieldMax = max_length[field] || total_width;  // Use total_width as max if max_length is undefined\r\n            let newValue = min_length[field] + adjustPerField;\r\n\r\n            // Apply adjustment but respect the max_length or total_width limit\r\n            if (newValue \u003e fieldMax) {\r\n                diff -= (fieldMax - min_length[field]);  // Subtract the amount that can actually be added\r\n                min_length[field] = fieldMax;  // Set to max_length or total_width\r\n            } else {\r\n                min_length[field] = newValue;  // Apply the adjustment\r\n            }\r\n        });\r\n\r\n        // Recalculate the remaining difference after adjustment\r\n        total_sum = fields.filter(field =\u003e field !== \"ccur\").reduce((sum, field) =\u003e sum + min_length[field], 0);\r\n        diff = total_width - total_sum;\r\n\r\n        // If there's still a difference, call adjustFields again\r\n        if (Math.abs(diff) \u003e 0.1) {\r\n            adjustFields(diff);\r\n        }\r\n    };\r\n\r\n    // Redistribute the remaining difference\r\n    if (diff !== 0) {\r\n        adjustFields(diff);\r\n    }\r\n\r\n    // Create the return object with only keys from the 'fields' array\r\n    let result = {};\r\n    fields.forEach(field =\u003e {\r\n        result[field] = min_length[field];\r\n    });\r\n\r\n    return result;\r\n}\r\n\r\nfunction getFieldStyle(style, defaultAlignment) {\r\n    const [fontStyles, fontCase, alignmentCode] = style.split(\",\");\r\n\r\n    // Text case\r\n    const textCase = {\r\n        C: `.toUpperCase()`,\r\n        L: `.toLowerCase()`,\r\n        T: `.split(' ').map(word =\u003e word.charAt(0).toUpperCase() + word.slice(1).toLowerCase()).join(' ')`\r\n    }[fontCase] || \"\";\r\n\r\n    // Alignment\r\n    const alignment = {\r\n        AC: \"C\",\r\n        AR: \"R\",\r\n        AL: \"L\"\r\n    }[alignmentCode] || ([\"R\", \"C\"].includes(defaultAlignment) ? defaultAlignment : \"L\");\r\n\r\n    return {\r\n        al: alignment,\r\n        fb: fontStyles.includes(\"B\"),\r\n        fi: fontStyles.includes(\"I\"),\r\n        fu: fontStyles.includes(\"U\"),\r\n        textCase: textCase\r\n    };\r\n}"},{"Bizobj":{"ObjectName":"getInvDocs","Description":"Get All Documents Based on Document Types","external":true,"input_struct":"","out_success":"","out_fail":""},"Script":"//**** Business Object getInvDocs Created by parthi on 01-May-2024 10:32:44 ****//\r\nfunction getSubmitted(){\r\n\r\n    var types = checkDocumentType(jscall.input.DocumentType)\r\n    let additionalQuery = getQueryForSubmittedScreen() // To check for the cancellation Availability on submitted screen.\r\n   var result = CralDB.QueryByComp(\r\n       `SELECT * \r\n        FROM {{einv_header}} \r\n        WHERE ${additionalQuery}\r\n        AND doct IN ('$1', '$2')\r\n        ORDER BY idoc, e_inv_no;`, \r\n       jscall.company, \r\n       types[0],\r\n       types[1]\r\n   )\r\n\r\n    errValidation(jscall.input.DocumentType)\r\n\r\n    // To make the Invoice Visible for 72 hrs from Validation.\r\n    // result = result.filter(data =\u003e {\r\n    //     return checkInvoiceDate(data.einv_stat, data.etim, data.e_invdt)\r\n    // })\r\n\r\n    return result\r\n   // return types\r\n\r\n}\r\n\r\n// function checkInvoiceDate(einv_stat, etim, inv_dt){\r\n   \r\n//    const date_check = function(date_val) {\r\n//        date_val = date_val.toString().replace(/(\\d{4}-\\d{2}-\\d{2}) (\\d{2}:\\d{2}:\\d{2}) .*/, \"$1T$2.000\");\r\n//        let current_date = new Date().toISOString()\r\n//        return (CralUtil.Date.Add(date_val, \"72h00m00s\") \u003c current_date)\r\n//    }\r\n\r\n//    switch(einv_stat){\r\n//        case '20':\r\n//            return true;\r\n//        case '30':\r\n//            return !(date_check(etim))\r\n//        case '50':\r\n//            if (etim){\r\n//                return !(date_check(etim))\r\n//            } else {\r\n//                return !(date_check(inv_dt))\r\n//            }\r\n//        default:\r\n//            return !(date_check(inv_dt))\r\n//    }\r\n\r\n// }\r\n\r\nfunction getForSubmission(){\r\n\r\n    var types = checkDocumentType(jscall.input.DocumentType)\r\n\r\n    var result = CralDB.QueryByComp(\"select * from {{einv_header}} where einv_stat='10' and (doct='$1' or doct ='$2') order by idoc, e_inv_no\", jscall.company, types[0],types[1])\r\n\r\n    errValidation(jscall.input.DocumentType)\r\n\r\n    return result \r\n}\r\n\r\nfunction getValidation(){\r\n   if (errValidation(jscall.input.DocumentType) == false){\r\n       return false\r\n   }\r\n   PortalValidation = []\r\n   LHDNValidation = []\r\n   var types = checkDocumentType(jscall.input.DocumentType)\r\n   records = CralDB.QueryByComp(\"select * from {{einv_header}} where (doct='$1'or doct='$2') and einv_stat='60' order by idoc,tran, e_inv_no\", jscall.company, types[0], types[1])\r\n   for (i = 0; i\u003c records.length ; i++){\r\n       switch(getRecordValidation(records[i].e_inv_no)){\r\n           case \"10\":\r\n               PortalValidation.push(records[i])\r\n               break\r\n           case \"20\":\r\n               LHDNValidation.push(records[i])\r\n               break\r\n           default:\r\n               break;\r\n       }\r\n   }\r\n   return {\r\n       \"PortalValidation\": PortalValidation,\r\n       \"LHDNValidation\":LHDNValidation\r\n   }\r\n}\r\n\r\nfunction getRecordValidation(invoice_number){\r\n   result =  CralDB.QueryByComp(\"select val_catg from {{einv_validation}} where einv_code='$1' limit 1\", jscall.company, invoice_number)\r\n   if (result.length != 0){\r\n       return result[0].val_catg\r\n   }\r\n   return \"\"\r\n}\r\n// function getValidation(){\r\n\r\n//      var types = checkDocumentType(jscall.input.DocumentType)\r\n   \r\n//      var result = CralDB.QueryByComp(\"select * from {{einv_header}} where einv_stat='60' and (doct='$1' or doct ='$2') order by idoc\", jscall.company, types[0],types[1])\r\n\r\n//      errValidation(jscall.input.DocumentType)\r\n\r\n//      return result \r\n// }\r\n\r\nfunction getCancelled(){\r\n\r\n    var types = checkDocumentType(jscall.input.DocumentType)\r\n   \r\n    var result = CralDB.QueryByComp(\"select * from {{cancel_header}} where (doct='$1'or doct ='$2') order by idoc\", jscall.company, types[0],types[1])\r\n\r\n    errValidation(jscall.input.DocumentType)\r\n\r\n    return result\r\n}\r\n\r\nfunction checkDocumentType(doctype){\r\n   \r\n    types =[]\r\n    \r\n    if (doctype.trim().toUpperCase() == 'INVOICES'){\r\n         types = ['01','03'];\r\n    }else if(doctype.trim().toUpperCase() == 'SELFBILLEDINVOICE'){\r\n         types = ['11','13'];\r\n    }else if(doctype.trim().toUpperCase() == 'CREDITNOTE'){\r\n         types = ['02','04'];\r\n    }else if(doctype.trim().toUpperCase() == 'SELFBILLEDCREDITNOTE'){\r\n         types = ['12','14'];\r\n     }\r\n    return types\r\n}\r\n\r\nfunction errValidation(doctype){\r\n\r\n    if (doctype.trim().toUpperCase() != 'INVOICES' \u0026\u0026 doctype.trim().toUpperCase() != 'SELFBILLEDINVOICE' \u0026\u0026 doctype.trim().toUpperCase() != 'CREDITNOTE' \u0026\u0026 doctype.trim().toUpperCase() != 'SELFBILLEDCREDITNOTE'\u0026\u0026 doctype.trim().toUpperCase() != 'SELFBILLEDDEBITNOTE'\u0026\u0026 doctype.trim().toUpperCase() != 'DEBITNOTE'\u0026\u0026 doctype.trim().toUpperCase() != 'REFUNDNOTE'\u0026\u0026 doctype.trim().toUpperCase() != 'SELFBILLEDREFUNDNOTE'){\r\n         jscall_error = \"Invalid Document Type\";\r\n         return false;\r\n    }\r\n\r\n}\r\n\r\nfunction getDocCounts(){\r\n   //  var types = checkDocumentType(jscall.input.DocumentType)\r\n    switch(jscall.input.Screen.trim().toUpperCase()){\r\n        case 'SUBMITTED':\r\n        // Query Changed for Submitted Screen Count - Cancellation\r\n        //    query_condition = \"(einv_stat='20' or einv_stat='50')\"\r\n            \r\n            query_condition = getQueryForSubmittedScreen() // To check cancellation \r\n           break;\r\n        case 'FORSUBMISSION':\r\n           query_condition = \"einv_stat='10'\"\r\n           break;\r\n        case 'FORVALIDATION':\r\n           query_condition = \"einv_stat='60'\"\r\n           break;\r\n        case 'PORTALVALIDATION':\r\n           return {\r\n               \"InvoiceCount\": getCountNumber(CralDB.QueryByComp(\"select e_inv_no from {{einv_header}} where (doct='01' or doct ='03') and einv_stat='60'\", jscall.company), \"10\"),\r\n               \"SelfBilledCount\": getCountNumber(CralDB.QueryByComp(\"select e_inv_no from {{einv_header}} where (doct='11' or doct ='13') and einv_stat='60'\", jscall.company), \"10\"),\r\n               \"CreditNoteCount\": getCountNumber(CralDB.QueryByComp(\"select e_inv_no from {{einv_header}} where (doct='02' or doct = '04') and einv_stat='60'\", jscall.company), \"10\"),\r\n               \"SelfBilledCNCount\": getCountNumber(CralDB.QueryByComp(\"select e_inv_no from {{einv_header}} where (doct='12' or doct = '14') and einv_stat='60'\", jscall.company), \"10\")\r\n           }\r\n           // query_condition = \"einv_stat='60' and val_err='10'\"\r\n           break;\r\n        case 'LHDNVALIDATION':\r\n           return {\r\n               \"InvoiceCount\": getCountNumber(CralDB.QueryByComp(\"select e_inv_no from {{einv_header}} where (doct='01' or doct ='03') and einv_stat='60'\", jscall.company), \"20\"),\r\n               \"SelfBilledCount\": getCountNumber(CralDB.QueryByComp(\"select e_inv_no from {{einv_header}} where (doct='11' or doct ='13') and einv_stat='60'\", jscall.company), \"20\"),\r\n               \"CreditNoteCount\": getCountNumber(CralDB.QueryByComp(\"select e_inv_no from {{einv_header}} where (doct='02' or doct ='04') and einv_stat='60'\", jscall.company), \"20\"),\r\n               \"SelfBilledCNCount\": getCountNumber(CralDB.QueryByComp(\"select e_inv_no from {{einv_header}} where (doct='12' or doct ='14') and einv_stat='60'\", jscall.company), \"20\")\r\n           }\r\n           // query_condition = \"einv_stat='60' and val_err='20'\"\r\n           break;\r\n        case 'CONSOLIDATION':\r\n           return {\r\n               \"InvoiceCount\": CralDB.QueryByComp(\"select count(idoc) from {{conso_header}} where (doct='01' or doct = '03') and TRIM(conso_inv) = ''\", jscall.company)[0].count\r\n           }\r\n       case 'CANCELLED':\r\n           return {\r\n               \"InvoiceCount\": CralDB.QueryByComp(\"select count(idoc) from {{cancel_header}} where (doct='01' or doct ='03')\", jscall.company)[0].count,\r\n               \"SelfBilledCount\": CralDB.QueryByComp(\"select count(idoc) from {{cancel_header}} where (doct='11' or doct ='13')\", jscall.company)[0].count,\r\n               \"CreditNoteCount\": CralDB.QueryByComp(\"select count(idoc) from {{cancel_header}} where (doct='02' or doct ='04')\", jscall.company)[0].count,\r\n               \"SelfBilledCNCount\": CralDB.QueryByComp(\"select count(idoc) from {{cancel_header}} where (doct='12' or doct ='14')\", jscall.company)[0].count\r\n           }\r\n           break;\r\n       default:\r\n           jscall_error = \"Invalid Screen Type\"\r\n           return false\r\n           break;\r\n    }\r\n    return {\r\n         \"InvoiceCount\": CralDB.QueryByComp(\"select count(idoc) from {{einv_header}} where \" + query_condition +\" and (doct='01' or doct ='03')\", jscall.company)[0].count,\r\n         \"SelfBilledCount\": CralDB.QueryByComp(\"select count(idoc) from {{einv_header}} where \" + query_condition +\" and (doct='11' or doct ='13')\", jscall.company)[0].count,\r\n         \"CreditNoteCount\": CralDB.QueryByComp(\"select count(idoc) from {{einv_header}} where \" + query_condition +\" and (doct='02' or doct ='04')\", jscall.company)[0].count,\r\n         \"SelfBilledCNCount\": CralDB.QueryByComp(\"select count(idoc) from {{einv_header}} where \" + query_condition +\" and (doct='12' or doct ='14')\", jscall.company)[0].count\r\n    }\r\n}\r\n\r\nfunction getSumDocCounts(){\r\n   let conso_count = 0\r\n   let cncl_count = 0\r\n\r\n        // Query Changed for Submitted Screen Count - Cancellation\r\n    einv_submit = CralDB.QueryByComp(`  SELECT e_inv_no FROM {{einv_header}} \r\n                                        WHERE ${getQueryForSubmittedScreen()}\r\n                                        AND doct!=''`, \r\n                                    jscall.company)\r\n   \r\n    einv_forfilling = CralDB.QueryByComp(\"select comp,tran,idoc from {{einv_header}} where einv_stat='10' and doct!=''\", jscall.company)\r\n    einv_error = CralDB.QueryByComp(\"select comp,tran,idoc from {{einv_header}} where einv_stat='60' and doct!=''\", jscall.company)\r\n   //  einv_cancel = CralDB.QueryByComp(\"select comp,tran,idoc from {{cancel_header}}\", jscall.company)\r\n   //  einv_consolidation = CralDB.QueryByComp(\"select comp,tran,idoc from {{conso_header}} where doct='01' and TRIM(conso_inv) = ''\", jscall.company)\r\n    isImplemented = CralDB.QueryByComp(\"select consolidation,cancellation from {{einv_implementation}} limit 1\")\r\n    if (isImplemented[0]?.consolidation == true){\r\n        conso_count = CralDB.QueryByComp(\"select comp,tran,idoc from {{conso_header}} where doct='01' and TRIM(conso_inv) = ''\", jscall.company).length\r\n    }\r\n    if (isImplemented[0]?.cancellation == true){\r\n        cncl_count = CralDB.QueryByComp(\"select comp,tran,idoc from {{cancel_header}}\", jscall.company).length\r\n    }\r\n    return {\r\n         \"SubmittedCount\": einv_submit.length,\r\n         \"ForFilingCount\": einv_forfilling.length,\r\n         \"ForValidationCount\": einv_error.length,\r\n         \"CancelledCount\": cncl_count,\r\n         \"ConsolidationCount\": conso_count\r\n\r\n    }\r\n}\r\n\r\nfunction getConsolidation(){\r\n   if (jscall.input.DocumentType.trim().toUpperCase() == \"INVOICES\"){\r\n      return( CralDB.QueryByComp(\"select * from {{conso_header}} where TRIM(conso_inv) = '' order by idoc,tran\", jscall.company))\r\n   }\r\n   else{\r\n       return \"Invalid Document Type\"\r\n   }\r\n  }\r\n\r\nfunction getCountNumber(einvCode, catg){\r\n   docCount = 0\r\n   debug(einvCode)\r\n   for (i = 0; i \u003c einvCode.length; i++){\r\n       if (CralDB.QueryByComp(\"select einv_code from {{einv_validation}} where einv_code='$1' and val_catg='$2' limit 1\", jscall.company, einvCode[i].e_inv_no, catg).length != 0){\r\n           docCount += 1\r\n       }\r\n   }\r\n   return docCount\r\n}\r\n\r\nfunction getForFiling()\r\n{\r\n   var types = checkDocumentType(jscall.input.DocumentType)\r\n\r\n   forFiling = CralDB.QueryByComp(`select * from {{einv_header}} where einv_stat ='10' and (doct ='$1' or doct = '$2')  order by idoc,tran, e_inv_no`,jscall.company,types[0],types[1])\r\n\r\n    errValidation(jscall.input.DocumentType)\r\n\r\n    return forFiling\r\n}\r\n\r\n// Additional Function to get cancellation availability on submitted screen\r\nfunction getQueryForSubmittedScreen(){\r\n    if (CralDB.QueryByComp(`SELECT cancellation from {{einv_implementation}}`, jscall.company)[0]?.cancellation){\r\n        return `einv_stat IN ('20', '30', '50') \r\n                            AND ( einv_stat NOT IN ('30', '50') OR e_invdt \u003e CURRENT_TIMESTAMP AT TIME ZONE 'UTC' - INTERVAL '72 hours')`\r\n    } else {\r\n        return `einv_stat='20'`\r\n    }\r\n}"},{"Bizobj":{"ObjectName":"initializeUserGroup","Description":"Initialize User by Group","external":false,"input_struct":"","out_success":"","out_fail":""},"Script":"//**** Business Object initializeUserGroup Created by parthi on 05-Dec-2024 11:56:10 ****//\r\nfunction initializeUserGroup() {\r\n    userDetails = []; // Array to hold user details\r\n\r\n    // Step 1: Query the user_access_control from the entity_data_set\r\n    userAccess = CralDB.QueryByComp(\r\n        \"SELECT user_access_control FROM {{entity_data_set}} WHERE sup_company = 1102 and user_access_control = 'true'\",\r\n        jscall.company\r\n    );\r\n\r\n    // Proceed only if userAccess is not null or undefined\r\n    if (userAccess.length \u003e 0) {\r\n        // Step 2: Query details of users where by_group is true\r\n        details = CralDB.QueryByComp(\r\n            \"SELECT * FROM {{user_access_control}} WHERE by_group = true and user_name = '$1'\",\r\n            jscall.company,\r\n            jscall.user\r\n        );\r\n\r\n        if (details \u0026\u0026 details.length \u003e 0) {\r\n            // Step 3: Process each user and group combination\r\n            for (i = 0; i \u003c details.length; i++) {\r\n                userName = details[i].user_name;\r\n                groupName = details[i].group;\r\n\r\n                // debug(`Processing User: ${userName}, Group: ${groupName}`); // Purpose of find the response  \r\n\r\n                // Query to get users under the same group\r\n                grpName = CralDB.QueryByComp(\r\n                    `SELECT user_name FROM {{user_access_control}} WHERE \"group\" = '$1'`,\r\n                    jscall.company,\r\n                    groupName\r\n                );\r\n                \r\n                // debug(grpName.length)\r\n\r\n                if (grpName \u0026\u0026 grpName.length \u003e 0) {\r\n                    // Push user names to the userDetails array\r\n                    grpName.forEach(record =\u003e {\r\n                        userDetails.push(record.user_name);\r\n                    });\r\n\r\n                    // Step 4: Set the global variable for the user-group combination\r\n                    variableName = `${userName}_${groupName}`;\r\n                    CralUtil.SetLocal(variableName, userDetails);\r\n\r\n                    debug(`Global Variable '${variableName}' set with value:`, userDetails);// Purpose of find the response\r\n\r\n                    \r\n                } else {\r\n                    debug(`No users found in group: ${groupName} for user: ${userName}`);// Purpose of find the response\r\n                }\r\n\r\n\r\n                // return userDetails\r\n                // Clear userDetails for the next iteration\r\n                userDetails = [];\r\n            }\r\n        } else {\r\n            debug(\"No users found with by_group enabled.\");// Purpose of find the response\r\n        }\r\n    } else {\r\n        debug(\"No user access control found for the given company.\");// Purpose of find the response\r\n    }\r\n\r\n    debug(\"initializeUserGroup process completed.\");// Purpose of find the response\r\n}\r\n\r\n\r\n// function buildQuery(){\r\n\r\n//     allGroupUsers = []\r\n\r\n//     const entityDataSet = CralDB.QueryByComp(\r\n//         \"SELECT user_access_control FROM {{entity_data_set}} WHERE sup_company = $1\",\r\n//         jscall.company,\r\n//         jscall.company\r\n//     );\r\n\r\n//     // return entityDataSet\r\n//     if (entityDataSet != \"\") {\r\n//         debug(\"Entity Data Set user_access_control is enabled.\");\r\n\r\n//         // Step 2: Get all user access configurations\r\n//         userAccessConfig = CralDB.QueryByComp(\r\n//             \"SELECT * FROM {{user_access_control}} WHERE user_name = '$1'\",\r\n//             jscall.company,\r\n//             jscall.user\r\n            \r\n//         );\r\n        \r\n//     }else{\r\n//         return \"\"\r\n//     }\r\n\r\n//     // userAccessConfig.forEach(record =\u003e {\r\n//     //     existingQuery_fld = ` AND ${record.field}${record.condition}`;\r\n//     // });\r\n\r\n//     userAccessConfig.forEach(record =\u003e {\r\n//         if (record.by_group == true) {\r\n//             const groupName = record.group;\r\n//             const variableName = `${jscall.user}_${groupName}`;\r\n//             let groupUsers = CralUtil.GetLocal(variableName);\r\n\r\n//             if (!groupUsers) {\r\n//                 debug(`Global variable ${variableName} is undefined. Initializing...`);\r\n//                 initializeUserGroup(); // Call the BO function to initialize the variable\r\n//                 groupUsers = CralUtil.GetLocal(variableName);\r\n//             }\r\n\r\n//             if (groupUsers \u0026\u0026 Array.isArray(groupUsers)) {\r\n//                 debug(`Found users for group ${groupName}:`, groupUsers);\r\n\r\n//                 // Step 6: Filter records by created_user in the group array\r\n//                 // existingQuery = ` AND created_user IN (${groupUsers.map(user =\u003e `'${user}'`).join(\", \")})`;\r\n//                 allGroupUsers = [...allGroupUsers, ...groupUsers];\r\n//             } else {\r\n//                 debug(`No users found for group ${groupName}. Skipping group filtering.`);\r\n//             }\r\n//         }else{\r\n//             existingQuery = ` AND ${record.field}${record.condition}`;\r\n//         }\r\n//     });\r\n    \r\n//      // Filter the records using allGroupUsers if any\r\n//     if (allGroupUsers.length \u003e 0) {\r\n//         // Remove duplicates from the array\r\n//         allGroupUsers = [...new Set(allGroupUsers)];\r\n//         existingQuery = ` AND created_user IN (${allGroupUsers.map(user =\u003e `'${user}'`).join(\", \")})`;\r\n//     }\r\n\r\n//     return `${existingQuery}`\r\n\r\n// }\r\n\r\n\r\n\r\n// function buildQuery() {\r\n//     let allQueries = []; // Initialize an array to store all dataset-specific queries\r\n\r\n//     // Query to fetch user access control and dataset information\r\n//     const userAccess = CralDB.QueryByComp(\r\n//         \"SELECT user_access_control, data_set FROM {{entity_data_set}} WHERE sup_company = 1102\",\r\n//         jscall.company\r\n//     );\r\n\r\n//     if (!userAccess || userAccess.length === 0) {\r\n//         debug(\"No records found for the specified company.\");\r\n//         return allQueries; // Return an empty array if no records are found\r\n//     }\r\n\r\n//     // Iterate through each record\r\n//     userAccess.forEach(record =\u003e {\r\n//         let query = \"\"; // Initialize the query for the current dataset\r\n\r\n//         if (record.user_access_control) {\r\n//             debug(`Building query for dataset: ${record.data_set} with user access control enabled.`);\r\n            \r\n//             // Call buildQuery to create additional query conditions\r\n//             const extraConditions = baseQuery();\r\n//             return extraConditions\r\n//             // Base query for datasets with user access control\r\n//             query =`(data_set='${record.data_set}' ${extraConditions})`;\r\n//         } else {\r\n//             debug(`Building base query for dataset: ${record.data_set} without user access control.`);\r\n            \r\n//             // Base query for datasets without user access control\r\n//             query = `(data_set='${record.data_set}')`;\r\n//         }\r\n\r\n//         // Add the query to the list of all queries\r\n//         allQueries.push(query);\r\n//     });\r\n\r\n\r\n//     // mergedQuery =  `AND (${allQueries.map(q =\u003e `${q}`).join(\" OR \")})`;\r\n//     mergedQuery = `AND ( ${allQueries.join(\" OR \")} )`\r\n\r\n//     // debug(\"Final merged query:\", mergedQuery);\r\n//     return mergedQuery; // Return the merged query\r\n  \r\n// }\r\n\r\n\r\n// function baseQuery(){\r\n\r\n//     allGroupUsers = []\r\n//     existingQuery = \"\"\r\n\r\n//     const entityDataSet = CralDB.QueryByComp(\r\n//         \"SELECT user_access_control FROM {{entity_data_set}} WHERE sup_company = $1\",\r\n//         jscall.company,\r\n//         jscall.company\r\n//     );\r\n\r\n//     // return entityDataSet\r\n//     if (entityDataSet != \"\") {\r\n//         debug(\"Entity Data Set user_access_control is enabled.\");\r\n\r\n//         // Step 2: Get all user access configurations\r\n//         userAccessConfig = CralDB.QueryByComp(\r\n//             \"SELECT * FROM {{user_access_control}} WHERE user_name = '$1'\",\r\n//             jscall.company,\r\n//             jscall.user\r\n            \r\n//         );\r\n        \r\n//     }else{\r\n//         return \"\"\r\n//     }\r\n   \r\n\r\n//     userAccessConfig.forEach(record =\u003e {\r\n//         if (record.by_group == true) {\r\n//             const groupName = record.group;\r\n//             const variableName = `${jscall.user}_${groupName}`;\r\n//             let groupUsers = CralUtil.GetLocal(variableName);\r\n\r\n//             if (!groupUsers) {\r\n//                 debug(`Global variable ${variableName} is undefined. Initializing...`);\r\n//                 initializeUserGroup(); // Call the BO function to initialize the variable\r\n//                 groupUsers = CralUtil.GetLocal(variableName);\r\n//             }\r\n\r\n//             if (groupUsers \u0026\u0026 Array.isArray(groupUsers)) {\r\n//                 debug(`Found users for group ${groupName}:`, groupUsers);\r\n\r\n//                 // Step 6: Filter records by created_user in the group array\r\n//                 // existingQuery = ` AND created_user IN (${groupUsers.map(user =\u003e `'${user}'`).join(\", \")})`;\r\n//                 allGroupUsers = [...allGroupUsers, ...groupUsers]; // Merge the array\r\n//             } else {\r\n//                 debug(`No users found for group ${groupName}. Skipping group filtering.`);\r\n//             }\r\n//         }else{\r\n//             existingQuery += `AND (${record.field}${record.condition.replaceAll('or', `or ${record.field_name} `).replaceAll('and', `and ${record.field_name} `)})`;\r\n//         }\r\n//     });\r\n    \r\n//      // Filter the records using allGroupUsers if any\r\n//     if (allGroupUsers.length \u003e 0) {\r\n//         // Remove duplicates from the array\r\n//         allGroupUsers = [...new Set(allGroupUsers)];\r\n//         existingQuery += ` AND created_user IN (${allGroupUsers.map(user =\u003e `'${user}'`).join(\", \")})`;\r\n//     }\r\n\r\n//     return `${existingQuery}`\r\n\r\n// }\r\n\r\n\r\nfunction userAccessBuildQuery() {\r\n    let allQueries = []; // Initialize an array to store all dataset-specific queries\r\n\r\n    // Query to fetch user access control and dataset information\r\n    const userAccess = CralDB.QueryByComp(\r\n        \"SELECT user_access_control, data_set FROM {{entity_data_set}} WHERE sup_company = 1102\",\r\n        jscall.company\r\n    );\r\n\r\n    if (!userAccess || userAccess.length === 0) {\r\n        debug(\"No records found for the specified company.\");\r\n        return allQueries; // Return an empty array if no records are found\r\n    }\r\n\r\n    // Iterate through each record\r\n    userAccess.forEach(record =\u003e {\r\n        let query = \"\"; // Initialize the query for the current dataset\r\n\r\n        if (record.user_access_control) {\r\n            debug(`Building query for dataset: ${record.data_set} with user access control enabled.`);\r\n            \r\n            // Call buildQuery to create additional query conditions\r\n            const extraConditions = buildQuery();\r\n\r\n            // Base query for datasets with user access control\r\n            query =`(dataset='${record.data_set}' ${extraConditions})`;\r\n        } else {\r\n            debug(`Building base query for dataset: ${record.dataset} without user access control.`);\r\n            \r\n            // Base query for datasets without user access control\r\n            query = `(dataset='${record.data_set}')`;\r\n        }\r\n\r\n        // Add the query to the list of all queries\r\n        allQueries.push(query);\r\n    });\r\n\r\n\r\n    // mergedQuery =  `AND (${allQueries.map(q =\u003e `${q}`).join(\" OR \")})`;\r\n    mergedQuery = `AND ( ${allQueries.join(\" OR \")} )`\r\n\r\n    // debug(\"Final merged query:\", mergedQuery);\r\n    return mergedQuery; // Return the merged query\r\n  \r\n}\r\n\r\n\r\nfunction buildQuery(){\r\n\r\n    allGroupUsers = []\r\n    existingQuery = \"\"\r\n\r\n    const entityDataSet = CralDB.QueryByComp(\r\n        \"SELECT user_access_control FROM {{entity_data_set}} WHERE sup_company = $1\",\r\n        jscall.company,\r\n        jscall.company\r\n    );\r\n\r\n    // return entityDataSet\r\n    if (entityDataSet != \"\") {\r\n        debug(\"Entity Data Set user_access_control is enabled.\");\r\n\r\n        // Step 2: Get all user access configurations\r\n        userAccessConfig = CralDB.QueryByComp(\r\n            \"SELECT * FROM {{user_access_control}} WHERE user_name = '$1'\",\r\n            jscall.company,\r\n            jscall.user\r\n            \r\n        );\r\n        \r\n    }else{\r\n        return \"\"\r\n    }\r\n   \r\n\r\n    userAccessConfig.forEach(record =\u003e {\r\n        if (record.by_group == true) {\r\n            const groupName = record.group;\r\n            const variableName = `${jscall.user}_${groupName}`;\r\n            let groupUsers = CralUtil.GetLocal(variableName);\r\n\r\n            if (!groupUsers) {\r\n                debug(`Global variable ${variableName} is undefined. Initializing...`);\r\n                initializeUserGroup(); // Call the BO function to initialize the variable\r\n                groupUsers = CralUtil.GetLocal(variableName);\r\n            }\r\n\r\n            if (groupUsers \u0026\u0026 Array.isArray(groupUsers)) {\r\n                debug(`Found users for group ${groupName}:`, groupUsers);\r\n\r\n                // Step 6: Filter records by created_user in the group array\r\n                // existingQuery = ` AND created_user IN (${groupUsers.map(user =\u003e `'${user}'`).join(\", \")})`;\r\n                allGroupUsers = [...allGroupUsers, ...groupUsers]; // Merge the array\r\n            } else {\r\n                debug(`No users found for group ${groupName}. Skipping group filtering.`);\r\n            }\r\n        }else{\r\n            existingQuery += `AND (${record.field}${record.condition.replaceAll('or', `or ${record.field_name} `).replaceAll('and', `and ${record.field_name} `)})`;\r\n        }\r\n    });\r\n    \r\n     // Filter the records using allGroupUsers if any\r\n    if (allGroupUsers.length \u003e 0) {\r\n        // Remove duplicates from the array\r\n        allGroupUsers = [...new Set(allGroupUsers)];\r\n        existingQuery += ` AND created_user IN (${allGroupUsers.map(user =\u003e `'${user}'`).join(\", \")})`;\r\n    }\r\n\r\n    return `${existingQuery}`\r\n\r\n}\r\n\r\nexports.userAccessBuildQuery = userAccessBuildQuery"},{"Bizobj":{"ObjectName":"printReport","Description":"printReportLayout","external":false,"input_struct":"","out_success":"","out_fail":""},"Script":"//**** Business Object printReport Created by parthi on 27-Jun-2024 19:25:25 ****//\r\n\r\nlet vld_date;\r\nfunction printReportLayout(e_inv_no, qr_link, lhdn_vld){\r\n    vld_date = lhdn_vld\r\n   \r\n    headerArray =[]\r\n    einv_header = CralDB.QueryByComp(\"select * from {{einv_header}} where e_inv_no='$1'\",jscall.company,e_inv_no)\r\n   \r\n    if(einv_header.length != 0){\r\n        supcomp = CralDB.QueryByComp(\"select sup_name, sup_email, sup_cont_num, sup_adrs,def_type, free_trade from {{supplier_companies}} where sup_company = '$1'\",jscall.company,einv_header[0].comp)\r\n       \r\n        if(einv_header[0].sctg == \"20\"){\r\n            \r\n            if(supcomp[0].free_trade == \"\"){\r\n                salectg = supcomp[0].def_type\r\n            }else{\r\n                salectg = supcomp[0].free_trade\r\n            }\r\n        }else{\r\n            salectg = supcomp[0].def_type\r\n        }\r\n\r\n        if (!salectg){\r\n            return {\r\n                \"error\": \"Default Layout Type is not Maintained.\",\r\n                \"result\": \"\"\r\n            }\r\n        }\r\n        // Check for Custom Report and Print it.\r\n        let customReportDetails = getCustomReport(e_inv_no)\r\n        if (customReportDetails.rpt_id){\r\n            if (Reports.GetReport(customReportDetails.rpt_id).ReportID){\r\n                pdf_result = Reports.GenerateReportWithCustomVars(customReportDetails.rpt_id, jscall.company, customReportDetails.cus_var, e_inv_no)\r\n                if (!pdf_result?.Error \u0026\u0026 pdf_result?.ResourceID){\r\n                    Resources.UpdateResource(pdf_result.ResourceID, `${e_inv_no}.pdf`)\r\n                    return {\r\n                        \"error\": \"\",\r\n                        \"result\": pdf_result.ResourceID\r\n                    }\r\n                } else {\r\n                    return {\r\n                        \"error\": pdf_result?.Error,\r\n                        \"result\": pdf_result?.ResourceID\r\n                    }\r\n                }\r\n            } else {\r\n                return {\r\n                    \"error\": `Custom Report ${customReportDetails.rpt_id} Not Found.`,\r\n                    \"result\": \"\"\r\n                }\r\n            }\r\n        } \r\n\r\n        // Checking validation print report layout\r\n        \r\n        var reportHeader = CralDB.QueryByComp(\"select * from {{rep_layouts_header}} where layout_code='$1'\", jscall.company, salectg)\r\n        if (reportHeader[0].is_report == true){\r\n            \r\n            pdf_result = Reports.GenerateReport(reportHeader[0].report_name ? reportHeader[0].report_name : salectg, jscall.company, e_inv_no)\r\n            if (!pdf_result?.Error \u0026\u0026 pdf_result?.ResourceID){\r\n                Resources.UpdateResource(pdf_result.ResourceID, `${e_inv_no}.pdf`)\r\n                return {\r\n                    \"error\": \"\",\r\n                    \"result\": pdf_result.ResourceID\r\n                }\r\n            } else {\r\n                return {\r\n                    \"error\": pdf_result?.Error,\r\n                    \"result\": pdf_result?.ResourceID\r\n                }\r\n            }\r\n        }\r\n        if(reportHeader.length != 0){\r\n        \r\n            var LayoutValidation= {\r\n                    \"repeatreportheader\": reportHeader[0].r_rep_head,\r\n                    \"repeatgroupheader\": reportHeader[0].r_grp_head,\r\n                    \"repeatreportfooter\": reportHeader[0].r_footer,\r\n                    \"pagenumber\": reportHeader[0].page_no,\r\n                    \"orientation\": reportHeader[0].rep_format,\r\n                    \"uniqueid\": e_inv_no,\r\n                    \"font\": reportHeader[0].font\r\n                }\r\n       \r\n            reportLine = returnObjValues(reportHeader, e_inv_no,supcomp, qr_link,salectg);\r\n        //  return reportLine\r\n        }else{\r\n            jscall_error = \"Given Report layout not maintain supplier company table\"\r\n            return false\r\n        }\r\n        response = {\r\n            LayoutValidation,\r\n            ReportHeader,\r\n            GroupHeaderLeft,\r\n            GroupHeaderRight,\r\n            Details,\r\n            DetailFooter,\r\n            Taxdetails,\r\n            ReportFooter,\r\n            QRData,\r\n            LogoPath\r\n        }\r\n        \r\n        var pdfObj = PrintPDF.PrintPDFMain(JSON.stringify(response))\r\n\r\n        if(pdfObj == \"\"){\r\n\r\n            var result = Resources.CreateResource(\"PDF\",\"./PrintPDF/PDFs/\"+e_inv_no+\".pdf\")\r\n            return result\r\n            \r\n        }else{\r\n            return {\r\n                \"error\": pdfObj,\r\n                \"result\": \"\"\r\n            }  \r\n        }\r\n    }else{\r\n        jscall_error = \"No Data Found\"\r\n    }\r\n   \r\n}\r\n\r\nexports.printReportLayout = printReportLayout\r\n\r\nfunction getCustomReport(einv_number){\r\n    custom_rpts = CralDB.QueryByComp(`select DISTINCT report_id,criteria from {{rpt_parameter}} order by report_id,criteria`, jscall.company)\r\n    if (custom_rpts.length){\r\n        for (let i=0; i\u003ccustom_rpts.length; i++){\r\n            rpt_criteria = CralDB.QueryByComp(`select * from {{rpt_parameter}} where report_id='${custom_rpts[i].report_id}' and criteria=${custom_rpts[i].criteria}`, jscall.company)\r\n            // return rpt_criteria\r\n            // return checkCustomReportCode(rpt_criteria, einv_number)\r\n            customReport = checkCustomReportCode(rpt_criteria, einv_number)\r\n            if (customReport){\r\n                return {\r\n                    \"rpt_id\": custom_rpts[i].report_id, \r\n                    \"cus_var\": getCustomVariables(rpt_criteria, einv_number)\r\n                }\r\n            } else {\r\n                continue\r\n            }\r\n        }\r\n    } //else {\r\n    //     return {\r\n    //         \"rpt_id\": \"\", \r\n    //         \"cus_var\": {}\r\n    //     }\r\n    // }\r\n    return {\r\n        \"rpt_id\": \"\", \r\n        \"cus_var\": {}\r\n    }\r\n}\r\nexports.getCustomReport = getCustomReport\r\n\r\nfunction checkCustomReportCode(criteria, einv_number){\r\n    let query = `select e_inv_no from {{einv_header}} where e_inv_no='${einv_number}'`\r\n    criteria.forEach(data =\u003e {\r\n        if (!data.is_cus_var){\r\n            query += ` and (${data.field_name} ${data.condition.replaceAll('or', `or ${data.field_name} `).replaceAll('and', `and ${data.field_name} `)})`\r\n        }\r\n    })\r\n    debug(query)\r\n    if (CralDB.QueryByComp(query, jscall.company).length){\r\n        return true\r\n    } else {\r\n        return false\r\n    }\r\n}\r\n\r\nfunction getCustomVariables(criteria, einv_number){\r\n    let results = {}\r\n    criteria.forEach(data =\u003e {\r\n        if (data.is_cus_var){\r\n            check_query = `select e_inv_no from {{einv_header}} where e_inv_no='${einv_number}' and ${data.field_name} ${data.condition.replace('or', `or ${data.field_name} `).replace('and', `and ${data.field_name} `)}`\r\n            if (CralDB.QueryByComp(check_query, jscall.company).length) {\r\n                results[data.cus_var_key] = data.cus_var_value\r\n            }\r\n        }\r\n    })\r\n    return results\r\n}\r\n\r\nfunction returnObjValues(reportHeader, e_inv_no,supcomp, qr_link,salectg) {\r\n    // return einv_header[0].tote\r\n    if(reportHeader[0].back_clr_head == \"\"){\r\n        RH = 255\r\n        GH = 255\r\n        BH = 255\r\n        AH = 1\r\n    }else{\r\n\r\n        if(reportHeader[0].back_clr_head.length \u003c 10){ //*  Report Header Background Color (hex to RGB)\r\n\r\n            var colorVal_Header = hexToRGB(reportHeader[0].back_clr_head);\r\n            \r\n            if(colorVal_Header.a == \"null\"){\r\n                \r\n                RH = colorVal_Header.r \r\n                GH = colorVal_Header.g\r\n                BH = colorVal_Header.b\r\n                AH = 1\r\n            \r\n            }else{\r\n                RH = colorVal_Header.r \r\n                GH = colorVal_Header.g\r\n                BH = colorVal_Header.b\r\n                AH = colorVal_Header.a\r\n                \r\n            }\r\n            \r\n        }else{\r\n            var colorVal_Header = rgbaToRgb(reportHeader[0].back_clr_head) //* (RGBA to RGB)\r\n\r\n            RH = colorVal_Header.r \r\n            GH = colorVal_Header.g\r\n            BH = colorVal_Header.b\r\n            AH = colorVal_Header.a\r\n        }\r\n    }\r\n    if(reportHeader[0].back_clr_footer == \"\"){\r\n        RL = 255\r\n        GL = 255\r\n        BL = 255\r\n        AL = 1\r\n    }else{\r\n        if(reportHeader[0].back_clr_footer.length \u003c 10){ //* Report Footer Background color (hex to RGB)\r\n\r\n            var colorVal_Line = hexToRGB(reportHeader[0].back_clr_footer);\r\n\r\n            if(colorVal_Line.a == \"null\" ){\r\n                \r\n                RL = colorVal_Line.r \r\n                GL = colorVal_Line.g\r\n                BL = colorVal_Line.b\r\n                AL = 1\r\n                \r\n            }else{\r\n                RL = colorVal_Line.r \r\n                GL = colorVal_Line.g\r\n                BL = colorVal_Line.b\r\n                AL = colorVal_Line.a\r\n                \r\n            }\r\n        \r\n        }else{\r\n            var colorVal_Line = rgbaToRgb(reportHeader[0].back_clr_footer) //* (RGBA to RGB)\r\n\r\n            RL = colorVal_Line.r \r\n            GL = colorVal_Line.g\r\n            BL = colorVal_Line.b\r\n            AL = colorVal_Line.a\r\n        }\r\n    }\r\n    if(reportHeader[0].back_clr_table == \"\"){\r\n        RT = 236\r\n        GT = 236\r\n        BT = 236\r\n        AT = 1\r\n    }else{\r\n\r\n        if(reportHeader[0].back_clr_table.length \u003c 10){ //* Report Table Header Color (Hex to RGB)\r\n\r\n            var colorVal_TblHeader = hexToRGB(reportHeader[0].back_clr_table);\r\n\r\n            if(colorVal_TblHeader.a == \"null\" ){\r\n                \r\n                RT = colorVal_TblHeader.r \r\n                GT = colorVal_TblHeader.g\r\n                BT = colorVal_TblHeader.b\r\n                AT = 1\r\n                \r\n            }else{\r\n                RT = colorVal_TblHeader.r \r\n                GT = colorVal_TblHeader.g\r\n                BT = colorVal_TblHeader.b\r\n                AT = colorVal_TblHeader.a\r\n                \r\n            }\r\n        }else{\r\n            var colorVal_TblHeader = rgbaToRgb(reportHeader[0].back_clr_table)//* (RGBA to RGB)\r\n                \r\n            RT = colorVal_TblHeader.r \r\n            GT = colorVal_TblHeader.g\r\n            BT = colorVal_TblHeader.b\r\n            AT = colorVal_TblHeader.a\r\n                \r\n        }\r\n    }\r\n    // stateCode = CralDB.QueryByComp(\"select src_dsca from {{map_state_codes}} where data_set='$1' and src_cste ='$2' and src_ccty ='$3'\",jscall.company,einv_header[0].dataset,einv_header[0].sup_cste,einv_header[0].sup_country)\r\n    stateCode = CralDB.QueryByComp(\"select dsca from {{state_codes}} where code ='$1'\",jscall.company,einv_header[0].sup_cste)\r\n    countryCodesup = CralDB.QueryByComp(\"select dsca from {{country}} where ccty ='$1'\",jscall.company,einv_header[0].sup_country)\r\n\r\n    sup_adrLine = []\r\n\r\n    if (einv_header[0].sup_adrs_line0)sup_adrLine.push(` ${einv_header[0].sup_adrs_line0}`);\r\n    if (einv_header[0].sup_adrs_line1)sup_adrLine.push(` ${einv_header[0].sup_adrs_line1}`);\r\n    if (einv_header[0].sup_adrs_line2)sup_adrLine.push(` ${einv_header[0].sup_adrs_line2}`);\r\n    if (einv_header[0].sup_postal_zone)sup_adrLine.push(` ${einv_header[0].sup_postal_zone}`);\r\n    if (einv_header[0].sup_city)sup_adrLine.push(` ${einv_header[0].sup_city}`);\r\n    if (stateCode.length != 0){\r\n        sup_adrLine.push(` ${stateCode[0].dsca}`);\r\n    }\r\n    if (countryCodesup.length != 0){\r\n        sup_adrLine.push(  `${\" \"+countryCodesup[0].dsca}`)\r\n    }\r\n    suplierAddress = sup_adrLine.join(',') //* Get Supplier Address if any empty space tirm the that space condition\r\n\r\n    stateCodebuy = CralDB.QueryByComp(\"select dsca from {{state_codes}} where code ='$1'\",jscall.company,einv_header[0].buy_cste)\r\n    countryCodebuy = CralDB.QueryByComp(\"select dsca from {{country}} where ccty ='$1'\",jscall.company,einv_header[0].buy_country)\r\n    addressLines = [];\r\n    // return countryCodebuy\r\n    // Check each field and add it to the array if it's not empty\r\n    if (einv_header[0].buy_adrs_line0)  addressLines.push(` ${einv_header[0].buy_adrs_line0}`);\r\n    if (einv_header[0].buy_adrs_line1)  addressLines.push(` ${einv_header[0].buy_adrs_line1}`);\r\n    if (einv_header[0].buy_adrs_line2)  addressLines.push(` ${einv_header[0].buy_adrs_line2}`);\r\n    if (einv_header[0].buy_postal_zone) addressLines.push(` ${einv_header[0].buy_postal_zone}`);\r\n    if (einv_header[0].buy_city)        addressLines.push(` ${einv_header[0].buy_city}`);\r\n\r\n    if (stateCodebuy.length != 0){\r\n        // if (stateCode[0].src_dsca)sup_adrLine.push(` ${stateCode[0].src_dsca}`);\r\n        addressLines.push(` ${stateCodebuy[0].dsca}`); //* Get Buyer Address if any empty space tirm the that space condition\r\n    }\r\n    if (countryCodebuy.length != 0) {\r\n        addressLines.push(` ${countryCodebuy[0].dsca}`)\r\n    }\r\n    // Join the non-empty lines into a single string separated by newline characters\r\n    addressString = addressLines.join(',')\r\n    // return addressString\r\n\r\n    einv_line = CralDB.QueryByComp(\"select * from {{einv_lines}} where e_inv_no='$1' order by line\",jscall.company,e_inv_no)\r\n    einv_line_tax = CralDB.QueryByComp(\"select sum(amti),cvat,pvat from {{einv_lines}} where e_inv_no='$1' group by cvat,pvat \",jscall.company,e_inv_no)\r\n    \r\n    rep_line_detail = CralDB.QueryByComp(\"select field_name,seq from {{rep_layouts_line}} where layout_code ='$1' and print = true and grp_typ ='Detail' order by seq\", jscall.company, salectg);\r\n    rep_line_detail_footer = CralDB.QueryByComp(\"select field_name,seq from {{rep_layouts_line}} where layout_code ='$1' and print = true and grp_typ = 'Detail Footer' order by seq\", jscall.company, salectg);\r\n    rep_line_footer = CralDB.QueryByComp(\"select field_name,seq from {{rep_layouts_line}} where layout_code ='$1' and print = true and grp_typ = 'Footer' order by seq\", jscall.company, salectg);\r\n    rep_line_group_header = CralDB.QueryByComp(\"select field_name,seq from {{rep_layouts_line}} where layout_code ='$1' and print = true and grp_typ = 'Group Header' order by seq\", jscall.company, salectg);\r\n    rep_line_report_header = CralDB.QueryByComp(\"select field_name,seq from {{rep_layouts_line}} where layout_code ='$1' and print = true and grp_typ = 'Report Header' order by seq\", jscall.company, salectg);\r\n    // var currentDate = dateValidation()\r\n    \r\n    var Values = []\r\n    var values = []\r\n\r\n    subTotal = 0\r\n   \r\n\r\n    if(einv_line_tax.length != 0){\r\n        \r\n        for(var j = 0; j \u003c einv_line_tax.length; j++){\r\n\r\n             row = []\r\n\r\n            for (var line_t = 0; line_t \u003c rep_line_footer.length; line_t++){\r\n                tot_serv_pric = einv_line_tax[j].sum.toFixed(2)\r\n                switch (rep_line_footer[line_t].field_name){\r\n\r\n                    case \"Total Product / Service Price\":\r\n                        if(tot_serv_pric == \"\"){\r\n                            row.push({ \"value\": \"0.00\"})\r\n                        }else{\r\n                            row.push({ \"value\": tot_serv_pric })\r\n                        }\r\n                        break;\r\n                    case \"Tax Type\":\r\n                        if(einv_line_tax[j].cvat == \"\"){\r\n                            row.push({ \"value\": \"-\" })\r\n                        }else{\r\n                            row.push({ \"value\": einv_line_tax[j].cvat })\r\n                        }\r\n                        break;\r\n                    case \"Tax Rate\":\r\n                        if( einv_line_tax[j].pvat == \"\"){\r\n                            row.push({\"value\": \"0\"})\r\n                        }else{\r\n                            row.push({\"value\": einv_line_tax[j].pvat.toString()})\r\n                        }\r\n                        break;\r\n                    case \"Tax Amount\":\r\n                        if(einv_header[0].tott == \"\"){\r\n                            row.push({\"value\": \"0.00\"})\r\n                        }else{\r\n                            row.push({\"value\": einv_line[j].txai.toFixed(2).toString()})\r\n                            // row.push({\"value\": einv_header[0].tott.toString()})\r\n                        }\r\n                        break;\r\n                \r\n                }\r\n            }\r\n\r\n            values.push({\r\n                \"row\": row  \r\n            })\r\n\r\n            \r\n        }\r\n    }else{\r\n\r\n        jscall_error = \"No data found in E-Invoice table\"\r\n        return false\r\n    }\r\n        \r\n    if (rep_line_report_header.length == 0){\r\n        jscall_error = \"Invalid Report Header Fields\"\r\n        return false \r\n    }else{\r\n\r\n        Namedvalues =[]\r\n\r\n        // report_header = CralDB.QueryByComp(\"select max(seq) from {{rep_layouts_line}} where layout_code='$1' and print=true and grp_typ='Report Header'\", jscall.company, salectg);\r\n\r\n        for(var hseqn = 0; hseqn \u003c rep_line_report_header.length; hseqn++){\r\n            Namedvalues.push({ \"FieldName\": rep_line_report_header[hseqn].field_name, \"FieldValue\": get_report_header_Value(rep_line_report_header[hseqn].field_name) })\r\n        }\r\n        \r\n        \r\n        supAdrress = CralDB.QueryByComp(\"select * from {{address_master}} where adrs_code = '$1'\",jscall.company,supcomp[0].sup_adrs)\r\n\r\n        stateCodesup = CralDB.QueryByComp(\"select src_dsca,dsca from {{map_state_codes}} where src_cste='$1' and src_ccty='$2'\",jscall.company,supAdrress[0].adrs_state,supAdrress[0].adrs_country)\r\n        countyCodesup = CralDB.QueryByComp(\"select src_dsca,dsca from {{country_codes}} where src_ccty='$1'\",jscall.company,supAdrress[0].adrs_country)\r\n        // return countyCodesup\r\n        // return supAdrress[0].data_set\r\n        supAdre = [];\r\n\r\n        if (supAdrress[0].adrs_line0)supAdre.push(` ${supAdrress[0].adrs_line0}`);\r\n        if (supAdrress[0].adrs_line1)supAdre.push(` ${supAdrress[0].adrs_line1}`);     \r\n        if (supAdrress[0].adrs_line2)supAdre.push(` ${supAdrress[0].adrs_line2}`);\r\n        if (supAdrress[0].postal_zone)supAdre.push(` ${supAdrress[0].postal_zone}`);\r\n        if (supAdrress[0].adrs_city)supAdre.push(` ${supAdrress[0].adrs_city}`);\r\n        if (stateCodesup.length !== 0){\r\n            supAdre.push(` ${stateCodesup[0].dsca}`);\r\n        }\r\n        if (countyCodesup[0].dsca)supAdre.push(` ${countyCodesup[0].dsca}`);\r\n        address_sup = supAdre.join(',');\r\n        \r\n        ReportHeader = {\r\n            \"bgcolor\": {\r\n                \"r\": RH,\r\n                \"g\": GH,\r\n                \"b\": BH,\r\n                \"a\": AH\r\n            },\r\n            \"Title\": supcomp[0].sup_name,\r\n            \"Directvalues\": [\r\n                \r\n                { \"value\": address_sup.trim() },\r\n                { \"value\": \"Contact No: \"+supcomp[0].sup_cont_num+\" \"+\"Mail ID: \"+supcomp[0].sup_email}\r\n                \r\n            ],\r\n            \"Namedvalues\": Namedvalues\r\n            \r\n        }\r\n    }\r\n    if(rep_line_group_header.length == 0 ){\r\n\r\n        jscall_error = \"Invalid Report Group Header Fields\"\r\n        return false\r\n\r\n    }else{\r\n\r\n        Namedvalues = []\r\n        NamedValues = []\r\n        \r\n        // group_header = CralDB.QueryByComp(\"select max(seq) from {{rep_layouts_line}} where layout_code='$1' and print=true and grp_typ='Group Header'\", jscall.company, salectg);\r\n        \r\n        for(var seqn = 0; seqn \u003c rep_line_group_header.length; seqn++){\r\n\r\n            if(rep_line_group_header[seqn].field_name == \"Buyer TIN\" || rep_line_group_header[seqn].field_name == \"Buyer Name\" || rep_line_group_header[seqn].field_name == \"Buyer Reg.No\" || rep_line_group_header[seqn].field_name == \"Buyer SST reg.ID\" || rep_line_group_header[seqn].field_name == \"Contact Number\" || rep_line_group_header[seqn].field_name == \"Address\" || rep_line_group_header[seqn].field_name == \"Buyer Exemption Number\" || rep_line_group_header[seqn].field_name == \"Bill Reference Number\"){\r\n            \r\n                Namedvalues.push({ \"FieldName\": rep_line_group_header[seqn].field_name, \"FieldValue\": get_grp_header(rep_line_group_header[seqn].field_name) })    \r\n            }else{\r\n                NamedValues.push({ \"FieldName\": rep_line_group_header[seqn].field_name, \"FieldValue\": get_grp_header(rep_line_group_header[seqn].field_name) })\r\n\r\n            }\r\n        }\r\n\r\n        GroupHeaderLeft = {\r\n            \"Title\": \"Supplier Info\",\r\n            \"Namedvalues\": NamedValues\r\n            \r\n        }\r\n        GroupHeaderRight = {\r\n            \"Title\": \"Buyer Info\",\r\n            \"Namedvalues\": Namedvalues\r\n            \r\n        }\r\n    }\r\n    if(rep_line_detail.length == 0){\r\n\r\n        jscall_error = \"Invalid Report Detail Fields\"\r\n        return false\r\n\r\n    }else{\r\n\r\n        if (einv_line.length != 0) {\r\n            \r\n            for(var i = 0; i \u003c einv_line.length; i++){\r\n                subTotal = subTotal + einv_line[i].stot\r\n                row = []\r\n\r\n                for (line_t = 0; line_t \u003c rep_line_detail.length; line_t++){\r\n                    switch (rep_line_detail[line_t].field_name){\r\n                       \r\n                        case \"Classification\":\r\n                            row.push({ \"value\": einv_line[i].clas })\r\n                            break;\r\n                        case \"Item\":\r\n                            row.push({ \"value\":einv_line[i].item })\r\n                            break;\r\n                        case \"Item Description\":\r\n                            row.push({ \"value\": einv_line[i].item_desc })\r\n                            break;\r\n                        case \"Qty\":\r\n                            row.push({\"value\": einv_line[i].dqua.toString()})\r\n                            break;\r\n                        case \"Unit Price\":\r\n                            row.push({\"value\": einv_line[i].pric.toFixed(2).toString()})\r\n                            break;\r\n                        case \"Disc\":\r\n                            row.push({\"value\": einv_line[i].disc.toString()})\r\n                            break;\r\n                        case \"Amount\":\r\n                            row.push({\"value\": einv_line[i].amti.toFixed(2).toString()})\r\n                            break;\r\n                        case \"Tax Amount\":\r\n                            row.push({\"value\": einv_line[i].txai.toFixed(2).toString()})\r\n                            break;\r\n                        case \"Total Product / Service(Incl.Tax)\":\r\n                            // row.push({\"value\": einv_line[i].amti.toString()})\r\n                            row.push({\"value\": (einv_line[i].amti + einv_line[i].txai).toFixed(2).toString()})\r\n                            break;\r\n                    }\r\n                }\r\n\r\n                Values.push({\r\n                    \"row\": row\r\n                })\r\n\r\n            }\r\n        }else{\r\n\r\n            jscall_error = \"No data found in E-Invoice Line\"\r\n            return false\r\n\r\n        }\r\n        \r\n        Titles = []\r\n        // detail = CralDB.QueryByComp(\"select max(seq) from {{rep_layouts_line}} where layout_code='$1' and print = true and grp_typ='Detail'\", jscall.company, salectg);\r\n        \r\n        for(var dseq = 0; dseq \u003c rep_line_detail.length; dseq++){\r\n            if(rep_line_detail[dseq].field_name == \"Unit Price\" || rep_line_detail[dseq].field_name == \"Amount\" || rep_line_detail[dseq].field_name == \"Total Product / Service(Incl.Tax)\"){\r\n                \r\n                Titles.push({ \"Title\": rep_line_detail[dseq].field_name+\" (\"+einv_header[0].ccur+\")\" , \"type\": \"string\", \"Length\": getLength(rep_line_detail[dseq].field_name) })\r\n           \r\n            }else{    \r\n            \r\n                Titles.push({ \"Title\": rep_line_detail[dseq].field_name , \"type\": \"string\", \"Length\": getLength(rep_line_detail[dseq].field_name) })\r\n            \r\n            }\r\n        }\r\n\r\n        Details = {\r\n            \"bgcolor\": {\r\n                \"r\": RT,\r\n                \"g\": GT,\r\n                \"b\": BT,\r\n                \"a\": AT\r\n            },\r\n            \"Titles\": Titles,\r\n            \"Values\": Values\r\n        }   \r\n    }\r\n    if(rep_line_detail_footer.length == 0){\r\n        jscall_error = \"Invalid Report Detail Footer Fields\"\r\n        return false\r\n    }else{\r\n\r\n        DetailFooter = []\r\n\r\n        // detail_footer = CralDB.QueryByComp(\"select max(seq) from {{rep_layouts_line}} where layout_code='$1' and print=true and grp_typ='Detail Footer'\", jscall.company, salectg);\r\n\r\n        for(var dfseqn = 0; dfseqn \u003c rep_line_detail_footer.length; dfseqn++){\r\n            DetailFooter.push({ \"FieldName\": rep_line_detail_footer[dfseqn].field_name, \"FieldValue\": get_detail_footer_Value(rep_line_detail_footer[dfseqn].field_name) })           \r\n        }\r\n        \r\n    }\r\n    if(rep_line_footer.length == 0){\r\n\r\n        jscall_error = \"Invalid Report Line Footer Fields\"\r\n        return false\r\n\r\n    }else{\r\n\r\n        Titles = []\r\n        Namedvalues =[]\r\n\r\n        // footer = CralDB.QueryByComp(\"select max(seq) from {{rep_layouts_line}} where layout_code='$1' and print=true and grp_typ='Footer'\", jscall.company, salectg);\r\n\r\n        for(var fseq = 0; fseq \u003c rep_line_footer.length; fseq++){\r\n            if(rep_line_footer[fseq].field_name !== \"Date \u0026 Time of Validation\" \u0026\u0026 rep_line_footer[fseq].field_name !== \"Digital Signature\"){\r\n                Titles.push({ \"Title\": rep_line_footer[fseq].field_name, \"type\": \"string\", \"Length\": lineFooterLenth(rep_line_footer[fseq].field_name) })\r\n            }else{\r\n                Namedvalues.push({ \"FieldName\": rep_line_footer[fseq].field_name, \"FieldValue\": get_field_ValuesLF(rep_line_footer[fseq].field_name) })\r\n            }\r\n        }\r\n\r\n        Taxdetails = {\r\n            \"Titles\": Titles,\r\n            \"Values\": values\r\n        }\r\n        ReportFooter = {\r\n            \"bgcolor\": {\r\n                \"r\": RL,\r\n                \"g\": GL,\r\n                \"b\": BL,\r\n                \"a\": AL\r\n            },\r\n            \"Namedvalues\": Namedvalues\r\n            \r\n        }\r\n    }   \r\n        \r\n        QRData= qr_link\r\n        \r\n        LogoPath = \"C:\\Logo\\pngtree-salon-logo-png-image_4004444.png\"\r\n\r\n    return {\r\n        ReportHeader,\r\n        GroupHeaderLeft,\r\n        GroupHeaderRight,\r\n        Details,\r\n        DetailFooter,\r\n        Taxdetails,\r\n        ReportFooter,\r\n        QRData,\r\n        LogoPath\r\n        }\r\n}\r\nfunction get_report_header_Value(rep_fieldname){\r\n   \r\n    switch(rep_fieldname){\r\n       \r\n        case \"E-Invoice Type\":\r\n            if(einv_header[0].doct == \"\"){\r\n                return \"\"\r\n            }\r\n            return einv_header[0].doct + \" - \" + CralDB.QueryByComp(\"select dsca from {{einv_doc_types}} where code='\" + einv_header[0].doct + \"'\", jscall.company)[0].dsca \r\n        case \"E-Invoice Version\":\r\n            return \"1.0\"\r\n        case \"E-Invoice Number\":\r\n            if(einv_header[0].e_inv_no == \"\"){\r\n                return \"\"\r\n            }\r\n            return einv_header[0].e_inv_no\r\n        case \"Unique Identifier No\":\r\n            if(einv_header[0].doc_uuid == \"\"){\r\n                return \"\"\r\n            }\r\n            return einv_header[0].doc_uuid\r\n        case \"Original Invoice Ref No\":\r\n            if(einv_header[0].org_e_inv_no == \"\"){\r\n                return \"\"\r\n            }\r\n            return einv_header[0].org_e_inv_no\r\n        case \"Date \u0026 Time\":\r\n            return dateValidation()\r\n        \r\n        \r\n    }\r\n}\r\nfunction get_grp_header(rep_fieldname){\r\n    \r\n    switch(rep_fieldname){\r\n        case \"Supplier Name\":\r\n            if(einv_header[0].sup_name == \"\"){\r\n                return \"\"\r\n            }\r\n            return einv_header[0].sup_name\r\n        case \"Supplier TIN\":\r\n            if(einv_header[0].sup_tin == \"\"){\r\n                return \"\"\r\n            }\r\n            return einv_header[0].sup_tin\r\n        case \"Supplier Reg No\":\r\n            if(einv_header[0].sup_reg_brn == \"\"){\r\n                return \"\"\r\n            }\r\n            return einv_header[0].sup_reg_brn\r\n        case \"Supplier SST ID\":\r\n            if(einv_header[0].sup_sst_reg == \"\"){\r\n                return \"\"\r\n            }\r\n            return einv_header[0].sup_sst_reg\r\n        case \"Supplier MSIC Code\":\r\n            if(einv_header[0].sup_misc == \"\"){\r\n                return \"\"\r\n            }\r\n            return einv_header[0].sup_msic\r\n        case \"Business Activity Description\":\r\n            if(einv_header[0].sup_badsca == \"\"){\r\n                return \"\"\r\n            }\r\n            return einv_header[0].sup_badsca\r\n        case \"Supplier Address\":\r\n            if(suplierAddress == \"\"){\r\n                return \"\"\r\n            }\r\n            return suplierAddress.trim()\r\n        case \"Supplier Contact\":\r\n            if(einv_header[0].sup_cont_num == \"\"){\r\n                return \"\"\r\n            }\r\n            return einv_header[0].sup_cont_num\r\n        case \"Supplier Mail\":\r\n            if(einv_header[0].sup_email == \"\"){\r\n                return \"\"\r\n            }\r\n            return einv_header[0].sup_email\r\n        case \"Buyer TIN\": \r\n            if(einv_header[0].buy_tin == \"\"){\r\n                return \"\"\r\n            }\r\n            return einv_header[0].buy_tin\r\n        case \"Buyer Name\":\r\n            if(einv_header[0].buy_name == \"\"){\r\n                return \"\"\r\n            }\r\n            return einv_header[0].buy_name\r\n        case \"Buyer Reg.No\":\r\n            if(einv_header[0].buy_reg_brn == \"\"){\r\n                return \"\"\r\n            }\r\n            return einv_header[0].buy_reg_brn\r\n        case \"Address\":\r\n            if(addressString == \"\"){\r\n                return \"\"\r\n            }\r\n            return addressString.trim()\r\n        case \"Contact Number\":\r\n            if(einv_header[0].buy_cont_num == \"\"){\r\n                return \"\"\r\n            }\r\n            return einv_header[0].buy_cont_num\r\n        case \"Buyer SST reg.ID\":\r\n            if(einv_header[0].buy_sst_reg == \"\"){\r\n                return \"\"\r\n            }\r\n            return einv_header[0].buy_sst_reg\r\n        case \"Buyer Exemption Number\":\r\n            if(einv_header[0].det_tax == \"\"){\r\n                return \"\"\r\n            }\r\n            return einv_header[0].det_tax\r\n        case \"Bill Reference Number\":\r\n            if(einv_header[0].bref == \"\"){\r\n                return \"\"\r\n            }\r\n            return einv_header[0].bref\r\n    }\r\n}\r\nfunction get_detail_footer_Value(rep_fieldname){\r\n\r\n    switch(rep_fieldname){\r\n\r\n        case \"Sub Total\":\r\n            // if(einv_header[0].tote == \"\"){\r\n            //     return \"0\"\r\n            // }\r\n            // // return einv_header[0].tote\r\n            // return einv_header[0].tote.toString()\r\n            if (subTotal == \"\"){\r\n                return \"0.00\"\r\n            }else{\r\n                return subTotal.toFixed(2).toString()\r\n            }\r\n\r\n        case \"Total Excluding Tax\":\r\n            if(einv_header[0].tote == \"\"){\r\n                return \"0.00\"\r\n            }\r\n            return einv_header[0].tote.toFixed(2).toString()\r\n        case \"Tax Amount\":\r\n            if(einv_header[0].tott == \"\"){\r\n                return \"0.00\"\r\n            }\r\n            return einv_header[0].tott.toFixed(2).toString()\r\n        case \"Total Including Tax\":\r\n            if(einv_header[0].toti == \"\"){\r\n                return \"0.00\"\r\n            }\r\n            return einv_header[0].toti.toFixed(2).toString()\r\n        case \"Total Payable Amount\":\r\n            if(einv_header[0].tpat == \"\"){\r\n                return \"0.00\"\r\n            }\r\n            return einv_header[0].tpat.toFixed(2).toString()\r\n\r\n    }\r\n}\r\nfunction get_field_ValuesLF(rep_fieldname){\r\n    switch(rep_fieldname){\r\n        case \"Date \u0026 Time of Validation\":\r\n            if(einv_header[0].etim){\r\n                return einv_header[0].etim\r\n            }\r\n            if(vld_date){\r\n                return vld_date\r\n            }\r\n            return \"\"\r\n        case \"Digital Signature\":\r\n            return \"\"\r\n\r\n    }\r\n}\r\n\r\nfunction getLength(rep_fieldname){\r\n    switch(rep_fieldname){\r\n        case \"Classification\":\r\n            return 20\r\n\r\n        case \"Item\":\r\n            return 20\r\n\r\n        case \"Item Description\":\r\n            return 30\r\n\r\n        case \"Qty\":\r\n            return 10\r\n\r\n        case \"Unit Price\":\r\n            return 20\r\n\r\n        case \"Disc\":\r\n            return 10\r\n\r\n        case \"Amount\":\r\n            return 20\r\n\r\n        case \"Tax Amount\":\r\n            return 20\r\n\r\n        case \"Total Product / Service(Incl.Tax)\":\r\n            return 30\r\n    \r\n        default: return 10\r\n\r\n    }            \r\n}\r\nfunction lineFooterLenth(rep_lineFieldName){\r\n    switch(rep_lineFieldName){\r\n        case \"Total Product / Service Price\":\r\n            return 40\r\n        case \"Tax Type\":\r\n            return 20\r\n        case \"Tax Rate\":\r\n            return 20\r\n        case \"Tax Amount\":\r\n            return 20\r\n\r\n        default : return 10\r\n    }\r\n}\r\nfunction hexToRGB(hex) {//calling function\r\n\r\n    // Ensure hex is a string\r\n    if (typeof hex !== 'string') {\r\n        throw new Error('Expected a string input');\r\n    }\r\n\r\n    // Remove the hash at the start if it's there\r\n    hex = hex.replace(/^#/, '');\r\n\r\n    // Parse the r, g, b values\r\n    let r, g, b;\r\n\r\n    if (hex.length === 3) {\r\n        \r\n        // Convert shorthand hex (e.g., #03F) to full form (e.g., #0033FF)\r\n        r = parseInt(hex[0] + hex[0], 16);\r\n        g = parseInt(hex[1] + hex[1], 16);\r\n        b = parseInt(hex[2] + hex[2], 16);\r\n\r\n    } else if (hex.length === 6) {\r\n\r\n        // Parse the hex string normally\r\n        r = parseInt(hex.slice(0, 2), 16);\r\n        g = parseInt(hex.slice(2, 4), 16);\r\n        b = parseInt(hex.slice(4, 6), 16);\r\n        a = \"null\"\r\n        // debug({ r, g, b, a })\r\n        return { r, g, b, a };\r\n\r\n    } else if (hex.length === 8) {\r\n        // Parse the hex string normally\r\n        r = parseInt(hex.slice(0, 2), 16);\r\n        g = parseInt(hex.slice(2, 4), 16);\r\n        b = parseInt(hex.slice(4, 6), 16);\r\n        a = parseInt(hex.slice(6, 8), 16) / 255;\r\n\r\n        return { r, g, b, a };\r\n\r\n    }else {\r\n       jscall_error = \"Invalid hexadecimal string\"\r\n       return false\r\n    }\r\n\r\n}\r\n\r\nfunction dateValidation(){\r\n\r\n    var currentDate = new Date()\r\n    var year = currentDate.getFullYear(); // Full year (e.g., 2024)\r\n    var month = String(currentDate.getMonth() +1).padStart(2, '0'); // Month (0-11, so add 1 for January to December)\r\n    var day = String(currentDate.getDate()).padStart(2, '0'); // Day of the month (1-31)\r\n\r\n    var hours = String(currentDate.getHours()).padStart(2, '0'); // Hours (0-23)\r\n    var minutes = String(currentDate.getMinutes()).padStart(2, '0'); // Minutes (0-59)\r\n    var seconds = String(currentDate.getSeconds()).padStart(2, '0'); // Seconds (0-59)\r\n\r\n    return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;\r\n}\r\n\r\nfunction rgbaToRgb(rgba) {\r\n\r\n    // Destructure the rgba values\r\n    const [r, g, b, a] = rgba.match(/\\d+(\\.\\d+)?/g).map(Number);\r\n\r\n    // Return the rgb values\r\n    return { r, g, b, a};\r\n}\r\nfunction convertIndiaToMalaysiaTimeManual() {\r\n    // Create a Date object for the current date and time in India\r\n    const nowIndia = new Date();\r\n\r\n    // Calculate the time difference in hours (Malaysia is 2.5 hours ahead of India)\r\n    const timeDifference = 2.5 * 60 * 60 * 1000;\r\n\r\n    // Get the time in milliseconds since the epoch for the current date and time in India\r\n    const timeInMilliseconds = nowIndia.getTime();\r\n\r\n    // Add the time difference to the current time in milliseconds\r\n    const malaysiaTimeInMilliseconds = timeInMilliseconds + timeDifference;\r\n\r\n    // Create a new Date object for the converted time\r\n    const nowMalaysia = new Date(malaysiaTimeInMilliseconds);\r\n\r\n    // Extract date components\r\n    const day = String(nowMalaysia.getDate()).padStart(2, '0');\r\n    const month = String(nowMalaysia.getMonth() + 1).padStart(2, '0'); // Months are zero-based\r\n    const year = nowMalaysia.getFullYear();\r\n    const hours = String(nowMalaysia.getHours()).padStart(2, '0');\r\n    const minutes = String(nowMalaysia.getMinutes()).padStart(2, '0');\r\n    const seconds = String(nowMalaysia.getSeconds()).padStart(2, '0');\r\n\r\n    // Format date and time as dd/mm/yyyy, HH:MM:SS\r\n    const formattedDate = `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;\r\n\r\n    return formattedDate;\r\n}\r\n"},{"Bizobj":{"ObjectName":"submitEinvoiceToPortal","Description":"Submit the E-Invoice to Portal","external":true,"input_struct":"","out_success":"","out_fail":""},"Script":"//**** Business Object submitEinvoiceToPortal Created by malai on 24-Apr-2024 11:17:26 ****//\r\n\r\nlet header_err_msg = \"\"\r\nlet line_err_msg = \"\"\r\nlet isSumbyQty = false\r\nvar einvois = require(\"./scripts/Business_Objects/createEinvoice\")\r\nvar consoCheck = require(\"./scripts/Business_Objects/conso_checking\")\r\nvar jsoncmp = require(\"./scripts/Business_Objects/json_sumqty_by_item\")\r\n// var jsoncmp = require(\"./scripts/Business_Objects/json_sumby_qty\")\r\n\r\nfunction submit_einv_to_portal(){\r\n    CralUtil.LogInfo(\"Einvois Input\", \"InvoiceCreation\", jscall.input)\r\n    entity_ds = CralDB.QueryByComp(`select sum_line250,sum_lineb250 from {{entity_data_set}} where sup_company=${jscall.input.comp} and data_set='${jscall.input.dataset}'`, jscall.company)\r\n    if (entity_ds.length == 0){\r\n        jscall_error = `Entity Data Set is Not Maintained for ${jscall.input.comp} - ${jscall.input.dataset}`\r\n        CralUtil.LogInfo(\"Einvois Output\", \"\", jscall_error)\r\n        return false;\r\n    } else {\r\n        if (entity_ds[0].sum_lineb250 == true \u0026\u0026 jscall.input.line_cnt \u003c= 250){\r\n            jscall.input.e_inv_no = jscall.input.tran + jscall.input.idoc.toString()\r\n            jscall.input.lines.forEach(line =\u003e {\r\n                line.e_inv_no = jscall.input.e_inv_no\r\n            })\r\n            comp_result = jsoncmp.sum_quantity_by_item(jscall.input)\r\n            CralUtil.LogInfo(\"AfterCompress\", \"Invoice\", comp_result)\r\n            if (comp_result.result){\r\n                jscall.input = comp_result.object\r\n                isSumbyQty = true\r\n            } else {\r\n                jscall_error = \"Unable to perform Sum by Quantity and Item.\"\r\n                CralUtil.LogInfo(\"Einvois Output\", \"Invoice\", jscall_error)\r\n                return false\r\n            }\r\n            CralUtil.LogInfo(\"InputAfterJsonCompress\", \"Invoice\", jscall.input)\r\n        } else {\r\n            if (entity_ds[0].sum_line250 == true \u0026\u0026 jscall.input.line_cnt \u003e 250){\r\n                jscall.input.e_inv_no = jscall.input.tran + jscall.input.idoc.toString()\r\n                jscall.input.lines.forEach(line =\u003e {\r\n                    line.e_inv_no = jscall.input.e_inv_no\r\n                })\r\n                comp_result = jsoncmp.sum_quantity_by_item(jscall.input)\r\n                if (comp_result.result){\r\n                    jscall.input = comp_result.object\r\n                    isSumbyQty = true\r\n                } else {\r\n                    jscall_error = \"Unable to perform Sum by Quantity and Item.\"\r\n                    CralUtil.LogInfo(\"Einvois Output\", \"Invoice\", jscall_error)\r\n                    return false\r\n                }\r\n            }\r\n        }\r\n    }\r\n    if (jscall.input.doct == \"\" || jscall.input.doct == null || jscall.input.doct == undefined){\r\n        jscall_error = \"Document Type is Mandatory\"\r\n        CralUtil.LogInfo(\"Einvois Output\", \"\", jscall_error)\r\n        return false;\r\n    }\r\n    document_Type = einvois.get_doc_type(jscall.input.doct)\r\n    if (document_Type == \"\"){\r\n        jscall_error = \"Unmapped or Invalid Document Type\"\r\n        CralUtil.LogInfo(\"Einvois Output\", \"\", jscall_error)\r\n        return false;\r\n    }\r\n    if (GetInvImpStatus(document_Type) != true){\r\n        jscall_error = \"Document Type Not Implemented.\"\r\n        CralUtil.LogInfo(\"Einvois Output\", \"\", jscall_error)\r\n        return false;\r\n    }\r\n    if (jscall.input.line_cnt == 0 || jscall.input.lines?.length == 0){\r\n        jscall_error = \"Lines is Empty.\"\r\n        CralUtil.LogInfo(\"Einvois Output\", \"\", jscall_error)\r\n        return false\r\n    }\r\n    if (document_Type == \"11\" || document_Type == \"12\"){\r\n        if (jscall.input.styp.toUpperCase() == \"LOCAL\"){\r\n            sb_imp = CralDB.QueryByComp(\"select src_tran_type from {{self_billed}} where src_tran_type='$1' and active=true and delf=false\", jscall.company, jscall.input.tran)\r\n            if (sb_imp.length == 0){\r\n                jscall_error = \"Transaction Type not defined in Self E-Invois\";\r\n                CralUtil.LogInfo(\"Einvois Output\", \"\", jscall_error)\r\n                // return false;\r\n                return{\r\n                    \"resend\":false\r\n                }\r\n            }\r\n        }\r\n    }\r\n    isConsoInv = CheckConsoInv(jscall.input.doct)\r\n    if (isConsoInv == true){\r\n        // return CreateConsoInvoice()\r\n        inv_out = CreateConsoInvoice()\r\n        inv_out[\"SumByQty\"] = isSumbyQty\r\n        // println(\"E-Invois Output(Consolidated Invoice): \" + JSON.stringify(inv_out))\r\n        CralUtil.LogInfo(\"Einvois Output\", \"Consolidated Invoice\", inv_out)\r\n        return inv_out\r\n    } else {\r\n        // if (jscall.input.line_cnt \u003e 120){\r\n        //     return CreateEInvoiceMultipleHeaders()\r\n        // } else {\r\n            // return CreateEInvoice()\r\n            inv_out = CreateEInvoice()\r\n            // println(\"E-Invois Output: \" + JSON.stringify(inv_out))\r\n            inv_out[\"SumByQty\"] = isSumbyQty\r\n            CralUtil.LogInfo(\"Einvois Output\", \"Invoice Created Successfully\", inv_out)\r\n            return inv_out\r\n        // }\r\n    }\r\n    // return header_result\r\n}\r\n\r\nfunction CreateEInvoice(){\r\n    header_result = insert_header()\r\n    println(\"Creating E-Invoice...\")\r\n    // header_result = einvoice.insert_header()\r\n    check_error = GetInsertErrorMessage(header_result, jscall.input.comp, jscall.input.tran, jscall.input.idoc, 0)\r\n    println(\"Header Inserted\")\r\n    println(JSON.stringify(check_error))\r\n    if (check_error.Status == true){\r\n        println(\"IN\")\r\n        if (header_result.Message.ccur == \"\" || header_result.Message.ccur == null || header_result.Message.ccur == undefined){\r\n            einvois.CreateValidation(header_result.Message.e_inv_no, 0, \"10\", \"MAP\", \"Unmapped Currency Code\", \"Invoice.Map\", \"ccur\", jscall.input.ccur)\r\n        }\r\n        if (header_result.Message.cvat == \"\" || header_result.Message.cvat == null || header_result.Message.cvat == undefined){\r\n            einvois.CreateValidation(header_result.Message.e_inv_no, 0, \"10\", \"MAP\", \"Unmapped Tax Code\", \"Invoice.Map\", \"cvat\", jscall.input.cvat)\r\n        }\r\n        println(\"Before Line Inserting\")\r\n        header_result.Lines = insert_multiple_lines(jscall.input.lines, \"einv_lines\", header_result.Message.e_inv_no)\r\n        println(\"Output To LN: \" + JSON.stringify(header_result))\r\n        println(\"Invoice Inserted Successfully \" + header_result.Message.e_inv_no)\r\n        if (einvois.check_validations(header_result.Message.e_inv_no) == true){\r\n            println(\"Validation Pass\")\r\n            debug(\"Validation Pass\")\r\n            if (header_result.Message.sctg == \"10\"){\r\n                einvois.submitEinvoiceToLHDN(header_result.Message.e_inv_no)\r\n                return header_result\r\n                // Moved to Function on Sept.5 \r\n                // var doc_json = einvois.BuildJSONFormat(header_result.Message.e_inv_no)\r\n                // println(\"After Doc\")\r\n                // if (typeof doc_json == \"string\"){\r\n                //     println(\"Error Doc\")\r\n                //     einvois.CreatePortalValidation(header_result.Message.e_inv_no, 0, doc_json, \"\")\r\n                //     return header_result\r\n                // } else {\r\n                //     // Convert JSON to XML and hash the doc to string.\r\n                //     println(\"Success Doc\")\r\n                //     submission_ret = einvois.SubmitTOLHDN(doc_json.document, doc_json.InvoiceCodeNumber)\r\n                //     if (submission_ret == false){\r\n                //         return header_result\r\n                //     } else {\r\n                //         sub_data = einvois.SubmissionUpdate(submission_ret)\r\n                //         return header_result\r\n                //     }\r\n                // }\r\n            }\r\n        }\r\n        println(\"Validation Fail\")\r\n        debug(\"Validation Fail\")\r\n        return header_result\r\n    } else {\r\n        return check_error.Result\r\n    }\r\n}\r\n\r\nfunction CreateConsoInvoice(){\r\n    conso_header = insert_conso_header()\r\n    check_error = GetInsertErrorMessage(conso_header, jscall.input.comp, jscall.input.tran, jscall.input.idoc, 0)\r\n    if (check_error.Status == true){\r\n        conso_header.Lines = insert_multiple_lines(jscall.input.lines, \"conso_line\", \"\")\r\n        return conso_header\r\n    }\r\n    return check_error.Result\r\n}\r\n\r\nfunction CreateEInvoiceMultipleHeaders(){\r\n    header_result = []\r\n    line_results = []\r\n    // src_header = einvoice.insert_header()\r\n    src_header = insert_header()\r\n    check_error = GetInsertErrorMessage(src_header, jscall.input.comp, jscall.input.tran, jscall.input.idoc, 0)\r\n    if (check_error.Status == true){\r\n        total_headers = parseInt(jscall.input.line_cnt/120) + 1\r\n        start_line = 0;\r\n        end_line = 120;\r\n        for (i = 1; i \u003c total_headers; i++){\r\n            temp_lines = jscall.input.lines.slice(start_line, end_line)\r\n            head_num_str = i.toString()\r\n            insert_result = insert_header()\r\n            // insert_result = einvoice.insert_header()\r\n            insert_error = GetInsertErrorMessage(insert_result, jscall.input.comp, jscall.input.tran, jscall.input.idoc, 0)\r\n            if (insert_error.Status == true){\r\n                temp_line_result = insert_multiple_lines(temp_lines, \"einv_lines\", insert_result.Message.e_inv_no)\r\n                Array.prototype.push.apply(line_results, temp_line_result)\r\n            } else {\r\n                ret = CralDB.PublishTopic(\"einv_header\", jscall.company, \"Delete\", jscall.input, jscall.user)\r\n                return insert_error.Result\r\n            }\r\n            start_line = end_line;\r\n            end_line = (i == total_headers)?(jscall.input.lines.length - 1):(end_line + 120)\r\n        }\r\n        src_header.Lines = line_results\r\n        return src_header\r\n    } else {\r\n        return check_error.Result\r\n    }\r\n}\r\n\r\nfunction submit_mlines_to_portal(){\r\n    header_data = CralDB.QueryByComp(\"select * from {{einv_header}} where comp=$1 and tran='$2' and idoc=$3 and src_type='$4'\", jscall.company, jscall.input.comp.toString(), jscall.input.tran, jscall.input.idoc.toString(), einvois.get_src_inv_type(jscall.input.src_type))\r\n    if (header_data.length == 0){\r\n        conso_data = CralDB.QueryByComp(\"select * from {{conso_header}} where comp=$1 and tran='$2' and idoc=$3 and src_type='$4'\", jscall.company, jscall.input.comp.toString(), jscall.input.tran, jscall.input.idoc.toString(), einvois.get_src_inv_type(jscall.input.src_type))\r\n        if (conso_data.length == 0){\r\n            jscall_error = \"Header Not Found in Portal.\"\r\n            return false\r\n        } else {\r\n            println(\"Inserting Missing Lines\")\r\n            line_results = insert_multiple_lines(jscall.input.lines, \"conso_line\", \"\")\r\n        }\r\n    } else {\r\n        missing_lines = []\r\n        for (i=0;i\u003cjscall.input.lines.length;i++){\r\n            isAvil = CralDB.QueryByComp(\"select line from {{einv_lines}} where e_inv_no='$1' and line=$2\", jscall.company, header_data[0].e_inv_no, jscall.input.lines[i].line)\r\n            if (isAvil.length == 0){\r\n                missing_lines.push(jscall.input.lines[i])\r\n            }\r\n        }\r\n        line_results = insert_multiple_lines(missing_lines, \"einv_lines\", header_data[0].e_inv_no)\r\n        // line_results = insert_multiple_lines(jscall.input.lines, \"einv_lines\", header_data[0].e_inv_no)\r\n        // Go to Check Validation...\r\n    }\r\n    return {\r\n        \"Lines\": line_results\r\n    }\r\n}\r\n\r\nfunction insert_multiple_lines(array_lines, table_code, einvNumber){\r\n    line_results = []\r\n    println(\"Inserting Line\")\r\n    for ( i = 0; i \u003c array_lines.length; i++){\r\n        line_result = insert_line(array_lines[i], table_code, einvNumber)\r\n        check_error = GetInsertErrorMessage(line_result, array_lines[i].comp, array_lines[i].tran, array_lines[i].idoc, array_lines[i].line)\r\n        if (table_code == \"einv_lines\" \u0026\u0026 check_error.Status == true){\r\n            println(\"Line Inserted Successfully\")\r\n            if (line_result.Message.cvat == \"\" || line_result.Message.cvat == undefined || line_result.Message.cvat == null){\r\n                einvois.CreateValidation(einvNumber, array_lines[i].line, \"10\", \"MAP\", \"Unmapped Tax Code\", \"InvoiceLine.Map\", \"cvat\", array_lines[i].cvat)\r\n            }\r\n            if (line_result.Message.clas == \"\" || line_result.Message.clas == undefined || line_result.Message.clas == null){\r\n                einvois.CreateValidation(einvNumber, array_lines[i].line, \"10\", \"MAP\", \"Unmapped Classification Code\", \"InvoiceLine.Map\", \"clas\", array_lines[i].clas)\r\n            }\r\n            println(\"After Map Validations\")\r\n        }\r\n        line_results.push(check_error.Result)\r\n    }\r\n    return line_results\r\n}\r\n\r\nfunction GetInsertErrorMessage(result, comp, tran, idoc, line){\r\n    if (typeof result == \"string\"){\r\n        return {\r\n            \"Status\": false,\r\n            \"Result\": {\r\n                \"comp\": comp,\r\n                \"tran\": tran,\r\n                \"idoc\": idoc,\r\n                \"line\": line,\r\n                \"Message\": result,\r\n                \"Success\":false\r\n            }\r\n        }\r\n    } else {\r\n        if (result.Success == false){\r\n            result.comp = comp\r\n            result.tran = tran\r\n            result.idoc = idoc\r\n            result.line = line\r\n            return {\r\n                \"Status\": false,\r\n                \"Result\": result\r\n            }\r\n        } else {\r\n            return {\r\n                \"Status\": true,\r\n                \"Result\": result\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nfunction GetInvImpStatus(inv_type){\r\n    switch (inv_type){\r\n        case \"01\":\r\n            // CralDB.QueryByComp(\"select imp_inv from {{einv_implementation}}\", jscall.company)\r\n            fld_name = \"imp_inv\"\r\n            break;\r\n        case \"02\":\r\n            fld_name = \"imp_crd_nt\"\r\n            break;\r\n        case \"11\":\r\n            fld_name = \"imp_slf_inv\"\r\n            break;\r\n        case \"12\":\r\n            fld_name = \"imp_slf_crd_nt\"\r\n            break;\r\n        default:\r\n            return false\r\n    }\r\n    imp_data = CralDB.QueryByComp(\"select \" + fld_name + \" from {{einv_implementation}}\", jscall.company)\r\n    if (imp_data.length == 0){\r\n        return false;\r\n    }\r\n    return imp_data[0][fld_name]\r\n}\r\n// function test_conso_check(){\r\n//     return CheckConsoInv(jscall.input.doct)\r\n// }\r\nfunction CheckConsoInv(docType){\r\n    println(\"Checking Conso......\")\r\n    imp_data = CralDB.QueryByComp(\"select consolidation from {{einv_implementation}}\", jscall.company)\r\n    // println(JSON.stringify(imp_data))\r\n    if (imp_data.length == 0){\r\n        return false\r\n    }\r\n    if (imp_data[0].consolidation == true){\r\n        srcType = einvois.get_src_inv_type(jscall.input.src_type)\r\n\r\n        // Additional Checking for Consolidation\r\n        if (einvois.get_doc_type(docType)==='01'){  // Only Invoices is Allowed for Consolidation.\r\n            if (consoCheck.checkConsoInvoice({\r\n                ...jscall.input,\r\n                doct : einvois.get_doc_type(docType),\r\n                src_type: srcType\r\n            })){\r\n                return true\r\n            }\r\n        }\r\n        // If the Criteria from conso_parameter becomes true then conso is created. \r\n\r\n        println(srcType)\r\n        // if (docType == \"01\"){ //Invoice or Sales Invoice\r\n        println(docType)\r\n        // if (docType.toUpperCase() == \"INVOICE\"){\r\n        //     switch (srcType){\r\n        //         case \"20\": //Sales Order\r\n        //             conso_fld = \"conso_sls\"\r\n        //             list_name = \"conso_sls_list\"\r\n        //             // get_conso_data = CralDB.QueryByComp(\"select conso_sls from {{conso_filing}} where comp=$1\", jscall.company, jscall.company)\r\n        //         break;\r\n        //         case \"10\": // Manual Sales\r\n        //             conso_fld = \"conso_man_sls\"\r\n        //             list_name = \"conso_man_sls_list\"\r\n        //         break;\r\n        //         default:\r\n        //         return false;\r\n        //         break;\r\n        //     }\r\n        // } else {\r\n        //     if (docType.toUpperCase() == \"SALES INVOICE\" \u0026\u0026 srcType == \"40\"){ //Sales Invoice\r\n        //         conso_fld = \"conso_acr\"\r\n        //         list_name = \"conso_acr_list\"\r\n        //     } else {\r\n        //         return false;\r\n        //     }\r\n        // }\r\n        if (docType.toUpperCase() == \"INVOICE\" || docType.toUpperCase() == \"SALES INVOICE\"){\r\n            switch (srcType){\r\n                case \"20\": //Sales Order\r\n                    conso_fld = \"conso_sls\"\r\n                    list_name = \"conso_sls_list\"\r\n                    // get_conso_data = CralDB.QueryByComp(\"select conso_sls from {{conso_filing}} where comp=$1\", jscall.company, jscall.company)\r\n                break;\r\n                case \"10\": // Manual Sales\r\n                    conso_fld = \"conso_man_sls\"\r\n                    list_name = \"conso_man_sls_list\"\r\n                break;\r\n                case \"40\":\r\n                    conso_fld = \"conso_acr\"\r\n                    list_name = \"conso_acr_list\"\r\n                break;\r\n                default:\r\n                return false;\r\n                break;\r\n            }\r\n        } else {\r\n            return false;\r\n        }\r\n        get_conso_data = CralDB.QueryByComp(\"select \" + conso_fld + \" from {{conso_filing}} where comp=$1\", jscall.company, jscall.input.comp)\r\n        // println(JSON.stringify(get_conso_data))\r\n        if (get_conso_data.length != 0){\r\n            println(CralUtil.GetListDesc(list_name, get_conso_data[0][conso_fld]))\r\n            switch (CralUtil.GetListDesc(list_name, get_conso_data[0][conso_fld]).toUpperCase()){\r\n                case \"BUYER\":\r\n                    println(jscall.input.inv_bp)\r\n                    if (jscall.input.inv_bp != undefined \u0026\u0026 jscall.input.inv_bp != null \u0026\u0026 jscall.input.inv_bp != \"\"){\r\n                        conso_data = CralDB.QueryByComp(\"select count(buy_code) from {{buyer_companies}} where buy_code='$1' and conso_buyer=true and data_set='$2'\", jscall.company, jscall.input.inv_bp, jscall.input.dataset)\r\n                        println(JSON.stringify(conso_data))\r\n                        // if (CralDB.QueryByComp(\"select buy_code from {{buyer_companies}} where buy_code='$1'\", jscall.company, jscall.input.itbp).length != 0){\r\n                        //     return true;\r\n                        // }\r\n                    } else {\r\n                        return false;\r\n                    }\r\n                break;\r\n                case \"ORDER TYPE\":\r\n                    if (jscall.input.ord_typ != undefined \u0026\u0026 jscall.input.ord_typ != null \u0026\u0026 jscall.input.ord_typ != \"\"){\r\n                        conso_data = CralDB.QueryByComp(\"select count(ord_typ) from {{conso_ord_type}} where ord_typ='$1' and data_set='$2'\", jscall.company, jscall.input.ord_typ, jscall.input.dataset)\r\n                    } else {\r\n                        return false;\r\n                    }\r\n                break;\r\n                case \"SERIES\":\r\n                    if (jscall.input.ngrp != undefined \u0026\u0026 jscall.input.ngrp != null \u0026\u0026 jscall.input.ngrp != \"\" \u0026\u0026 jscall.input.seri != undefined \u0026\u0026 jscall.input.seri != null \u0026\u0026 jscall.input.seri != \"\"){\r\n                        conso_data = CralDB.QueryByComp(\"select count(seri) from {{conso_sls_seri}} where ngrp='$1' and seri='$2' and data_set='$3'\", jscall.company, jscall.input.ngrp, jscall.input.seri, jscall.input.dataset)\r\n                    } else {\r\n                        return false;\r\n                    }\r\n                break;\r\n                case \"SALES OFFICE\":\r\n                    if (jscall.input.sls_ofc != undefined \u0026\u0026 jscall.input.sls_ofc != null \u0026\u0026 jscall.input.sls_ofc != \"\"){\r\n                        conso_data = CralDB.QueryByComp(\"select count(sls_ofc) from {{conso_sls_off}} where sls_ofc='$1' and data_set='$2'\", jscall.company, jscall.input.sls_ofc, jscall.input.dataset)\r\n                    } else {\r\n                        return false;\r\n                    }\r\n                break;\r\n                case \"MANUAL ID\":\r\n                    println(jscall.input.ngrp)\r\n                    println(jscall.input.seri)\r\n                    if (jscall.input.ngrp != undefined \u0026\u0026 jscall.input.ngrp != null \u0026\u0026 jscall.input.ngrp != \"\" \u0026\u0026 jscall.input.seri != undefined \u0026\u0026 jscall.input.seri != null \u0026\u0026 jscall.input.seri != \"\"){\r\n                        conso_data = CralDB.QueryByComp(\"select count(seri) from {{conso_man_id}} where ngrp='$1' and seri='$2' and data_set='$3'\", jscall.company, jscall.input.ngrp, jscall.input.seri, jscall.input.dataset)\r\n                    } else {\r\n                        return false;\r\n                    }\r\n                break;\r\n                case \"TRANSACTION TYPE\":\r\n                    println(jscall.input.tran)\r\n                    if (jscall.input.tran != undefined \u0026\u0026 jscall.input.tran != null \u0026\u0026 jscall.input.tran != \"\"){\r\n                        conso_data = CralDB.QueryByComp(\"select count(conso_tran_type) from {{conso_tran_types}} where conso_tran_type='$1' and data_set='$2'\", jscall.company, jscall.input.tran, jscall.input.dataset)\r\n                    } else {\r\n                        return false;\r\n                    }\r\n                break;\r\n                default:\r\n                    return false;\r\n                break;\r\n            }\r\n            if (conso_data[0].count != 0){\r\n                return true;\r\n            } else {\r\n                return false;\r\n            }\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n    return false\r\n}\r\n\r\nfunction insert_header(){\r\n    header_err_msg = \"\"\r\n    temp_doct = einvois.get_doc_type(jscall.input.doct)\r\n    // if (temp_doct == \"\"){\r\n    //     header_err_msg = write_err_msg(header_err_msg, \"Document Type\")\r\n    // }\r\n    temp_ccur = einvois.get_ccur(jscall.input.ccur, jscall.input.dataset)\r\n    // if (temp_ccur == \"\"){\r\n    //     header_err_msg = write_err_msg(header_err_msg, \"Currency Code\")\r\n    // }\r\n    temp_paym = einvois.get_paym(jscall.input.paym, jscall.input.dataset)\r\n    // if (temp_paym == \"\"){\r\n    //     // header_err_msg = write_err_msg(header_err_msg, \"Payment Mode\")\r\n    // }\r\n    temp_cvat = einvois.get_cvat(jscall.input.cvat, jscall.input.dataset)\r\n    // if (temp_cvat == \"\"){\r\n    //     header_err_msg = write_err_msg(header_err_msg, \"Tax Code\")\r\n    // }\r\n\r\n    switch(jscall.input.styp.toUpperCase()){\r\n        case \"LOCAL\":\r\n            sctg = \"10\"\r\n            break\r\n        case \"EXPORT\":\r\n            sctg = \"20\"\r\n            break\r\n        case \"IMPORT\":\r\n            sctg = \"30\"\r\n            break\r\n        default:\r\n            sctg = \"\"\r\n            break\r\n    }\r\n    sup_data = false\r\n    sup_adrs = false\r\n    buy_data = false\r\n    buy_adrs = false\r\n    ship_data = false\r\n    ship_adrs = false\r\n\r\n    supplier_data = CralDB.QueryByComp(\"select * from {{supplier_companies}} where sup_company=$1\", jscall.company, jscall.input.comp)\r\n    if (supplier_data.length != 0){\r\n        sup_data = true\r\n        supplier_address = CralDB.QueryByComp(\"select * from {{address_master}} where data_set='$1' and adrs_code='$2'\", jscall.company, jscall.input.dataset, supplier_data[0].sup_adrs)\r\n        if (supplier_address.length != 0){\r\n            sup_adrs = true\r\n        }\r\n    }\r\n\r\n    buyer_adrs = (jscall.input.buy_adrs != \"\" \u0026\u0026 jscall.input.buy_adrs != undefined \u0026\u0026 jscall.input.buy_adrs != null)?jscall.input.buy_adrs:\"\";\r\n    buyer_data = CralDB.QueryByComp(\"select * from {{buyer_companies}} where data_set='$1' and buy_code='$2'\", jscall.company, jscall.input.dataset, jscall.input.inv_bp)\r\n    if (buyer_data.length != 0){\r\n        buy_data = true\r\n        buyer_adrs = (buyer_adrs == \"\")?buyer_data[0].buy_adrs:buyer_adrs;\r\n        buyer_address = CralDB.QueryByComp(\"select * from {{address_master}} where data_set='$1' and adrs_code='$2'\", jscall.company, jscall.input.dataset, buyer_adrs)\r\n        if (buyer_address.length != 0){\r\n            buy_adrs = true\r\n        }\r\n    }\r\n\r\n    if (jscall.input.stbp != \"\" \u0026\u0026 jscall.input.stbp != undefined \u0026\u0026 jscall.input.stbp != null){\r\n        if (jscall.input.stbp != jscall.input.inv_bp){\r\n            shipper_data = CralDB.QueryByComp(\"select * from {{buyer_companies}} where data_set='$1' and buy_code='$2'\", jscall.company, jscall.input.dataset, jscall.input.stbp)\r\n            if (shipper_data.length == 0){\r\n                // ship_data = buy_data\r\n                // shipper_data = buyer_data\r\n            } else {\r\n                ship_data = true\r\n                if (jscall.input.sadr != \"\" \u0026\u0026 jscall.input.sadr != undefined \u0026\u0026 jscall.input.sadr != null){\r\n                    shipper_address = CralDB.QueryByComp(\"select * from {{address_master}} where data_set='$1' and adrs_code='$2'\", jscall.company, jscall.input.dataset, jscall.input.sadr)\r\n                    if (shipper_address.length != 0){\r\n                        ship_adrs = true\r\n                    }\r\n                } else {\r\n                    shipper_address = CralDB.QueryByComp(\"select * from {{address_master}} where data_set='$1' and adrs_code='$2'\", jscall.company, jscall.input.dataset, shipper_data[0].buy_adrs)\r\n                    if (shipper_address.length != 0){\r\n                        ship_adrs = true\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    supplier_name = (sup_data == false)?\"\":supplier_data[0].sup_name\r\n    supplier_cn = (sup_data == false)?\"\":supplier_data[0].sup_cont_num\r\n    supplier_email = (sup_data == false)?\"\":supplier_data[0].sup_email\r\n    supplier_sst = (sup_data == false)?\"\":supplier_data[0].sup_sst_reg\r\n    supplier_ttx = (sup_data == false)?\"\":supplier_data[0].sup_ttx_no\r\n    supplier_tin = (sup_data == false)?\"\":supplier_data[0].sup_tin\r\n    supplier_brn = (sup_data == false)?\"\":supplier_data[0].sup_reg_brn\r\n    supplier_nric = (sup_data == false)?\"\":supplier_data[0].sup_reg_nric\r\n    supplier_passport = (sup_data == false)?\"\":supplier_data[0].sup_reg_passport\r\n    supplier_army = (sup_data == false)?\"\":supplier_data[0].sup_reg_army\r\n    supplier_badsca = (sup_data == false)?\"\":supplier_data[0].sup_badsca\r\n    supplier_bacc = (sup_data == false)?\"\":supplier_data[0].sup_bank_acc\r\n    supplier_msic = (sup_data == false)?\"\":supplier_data[0].sup_msic\r\n\r\n    supplier_adrs = (sup_data == false)?\"\":supplier_data[0].sup_adrs\r\n    supplier_city = (sup_adrs == false)?\"\":supplier_address[0].adrs_city\r\n    supplier_pz = (sup_adrs == false)?\"\":supplier_address[0].postal_zone\r\n    supplier_l0 = (sup_adrs == false)?\"\":supplier_address[0].adrs_line0\r\n    supplier_l1 = (sup_adrs == false)?\"\":supplier_address[0].adrs_line1\r\n    supplier_l2 = (sup_adrs == false)?\"\":supplier_address[0].adrs_line2\r\n    let [sup_ccty, sup_cste] = einvois.get_country_state((sup_adrs == false)?\"\":supplier_address[0].adrs_country, (sup_adrs == false)?\"\":supplier_address[0].adrs_state, jscall.input.dataset)\r\n    \r\n    buy_name = (buy_data == false)?\"\":buyer_data[0].buy_name\r\n    buy_cont_num = (buy_data == false)?\"\":buyer_data[0].buy_cont_num\r\n    buy_email = (buy_data == false)?\"\":buyer_data[0].buy_email\r\n    buy_sst_reg = (buy_data == false)?\"\":buyer_data[0].buy_sst_reg\r\n    buy_tin = (buy_data == false)?\"\":buyer_data[0].buy_tin\r\n    buy_reg_brn = (buy_data == false)?\"\":buyer_data[0].buy_reg_brn\r\n    buy_reg_nric = (buy_data == false)?\"\":buyer_data[0].buy_reg_nric\r\n    buy_reg_passport =(buy_data == false)?\"\":buyer_data[0].buy_reg_passport \r\n    buy_reg_army = (buy_data == false)?\"\":buyer_data[0].buy_reg_army\r\n\r\n    buyer_city = (buy_adrs == false)?\"\":buyer_address[0].adrs_city\r\n    buyer_pz = (buy_adrs == false)?\"\":buyer_address[0].postal_zone\r\n    buyer_l0 = (buy_adrs == false)?\"\":buyer_address[0].adrs_line0\r\n    buyer_l1 = (buy_adrs == false)?\"\":buyer_address[0].adrs_line1\r\n    buyer_l2 = (buy_adrs == false)?\"\":buyer_address[0].adrs_line2\r\n    let [buy_ccty, buy_cste] = einvois.get_country_state((buy_adrs == false)?\"\":buyer_address[0].adrs_country, (buy_adrs == false)?\"\":buyer_address[0].adrs_state, jscall.input.dataset)\r\n    \r\n    shipper_name = (ship_data == false)?\"\":shipper_data[0].buy_name\r\n    shipper_tin = (ship_data == false)?\"\":shipper_data[0].buy_tin\r\n    shipper_brn = (ship_data == false)?\"\":shipper_data[0].buy_reg_brn\r\n    shipper_nric = (ship_data == false)?\"\":shipper_data[0].buy_reg_nric\r\n    shipper_passport = (ship_data == false)?\"\":shipper_data[0].buy_reg_passport\r\n    shipper_army = (ship_data == false)?\"\":shipper_data[0].buy_reg_army\r\n\r\n    shipper_city = (ship_adrs == false)?\"\":shipper_address[0].adrs_city\r\n    shipper_pz = (ship_adrs == false)?\"\":shipper_address[0].postal_zone\r\n    shipper_l0 = (ship_adrs == false)?\"\":shipper_address[0].adrs_line0\r\n    shipper_l1 = (ship_adrs == false)?\"\":shipper_address[0].adrs_line1\r\n    shipper_l2 = (ship_adrs == false)?\"\":shipper_address[0].adrs_line2\r\n    let [ship_ccty, ship_cste] = einvois.get_country_state((ship_adrs == false)?\"\":shipper_address[0].adrs_country, (ship_adrs == false)?\"\":shipper_address[0].adrs_state, jscall.input.dataset)\r\n    \r\n    self_inv = false\r\n    if (temp_doct == \"11\" || temp_doct == \"12\" || temp_doct == \"13\" || temp_doct == \"14\"){\r\n        self_inv = true\r\n    }\r\n\r\n    let org_e_inv_no =\"\"\r\n    let org_doc_uuid = \"\"\r\n    if (temp_doct != \"01\" \u0026\u0026 temp_doct != \"11\" \u0026\u0026 jscall.input.refDoc){\r\n        [org_e_inv_no, org_doc_uuid] = getOriginalDocumentReference(jscall.input.refDoc)\r\n    }\r\n    \r\n    header_data = {\r\n        \"comp\": jscall.input.comp,\r\n        \"tran\": jscall.input.tran,\r\n        \"idoc\": jscall.input.idoc,\r\n        \"doct\": temp_doct,\r\n        \"ccur\": temp_ccur,\r\n        \"paym\": temp_paym,\r\n        \"cvat\": temp_cvat,\r\n        \"sctg\": sctg,\r\n        \"dataset\": jscall.input.dataset,\r\n        \"line_cnt\": 0,\r\n        \"s_line_cnt\": jscall.input.line_cnt,\r\n        \"sup_code\": (self_inv == true)?jscall.input.inv_bp:jscall.input.comp,\r\n        \"sup_name\":         (self_inv == true)?buy_name:supplier_name,\r\n        \"sup_cont_num\":     (self_inv == true)?buy_cont_num:supplier_cn,\r\n        \"sup_email\":        (self_inv == true)?buy_email:supplier_email,\r\n        \"sup_sst_reg\":      (self_inv == true)?buy_sst_reg:supplier_sst,\r\n        \"sup_ttx_no\":       (self_inv == true)?(buy_data == false)?\"\":buyer_data[0].buy_ttx_reg:supplier_ttx,\r\n        \"sup_tin\":          (self_inv == true)?buy_tin:supplier_tin,\r\n        \"sup_reg_brn\":      (self_inv == true)?buy_reg_brn:supplier_brn,\r\n        \"sup_reg_nric\":     (self_inv == true)?buy_reg_nric:supplier_nric,\r\n        \"sup_reg_passport\": (self_inv == true)?buy_reg_passport:supplier_passport,\r\n        \"sup_reg_army\":     (self_inv == true)?buy_reg_army:supplier_army,\r\n        \"sup_badsca\":       (self_inv == true)?(buy_data == false)?\"\":buyer_data[0].buy_badsca:supplier_badsca,\r\n        \"sup_bank_acc\":     (self_inv == true)?\"\":supplier_bacc,\r\n        \"sup_msic\":         (self_inv == true)?(buy_data == false)?\"\":buyer_data[0].buy_msic:supplier_msic,\r\n        \"sup_adrs\":         (self_inv == true)?buyer_adrs:supplier_adrs,\r\n        \"sup_city\":         (self_inv == true)?buyer_city:supplier_city,\r\n        \"sup_postal_zone\":  (self_inv == true)?buyer_pz:supplier_pz,\r\n        \"sup_adrs_line0\":   (self_inv == true)?buyer_l0:supplier_l0,\r\n        \"sup_adrs_line1\":   (self_inv == true)?buyer_l1:supplier_l1,\r\n        \"sup_adrs_line2\":   (self_inv == true)?buyer_l2:supplier_l2,\r\n        \"sup_country\":      (self_inv == true)?buy_ccty:sup_ccty,\r\n        \"sup_cste\":         (self_inv == true)?buy_cste:sup_cste,\r\n        \"inv_bp\":           (self_inv == true)?jscall.input.comp:jscall.input.inv_bp,\r\n        \"buy_name\":         (self_inv == true)?supplier_name:buy_name,\r\n        \"buy_cont_num\":     (self_inv == true)?supplier_cn:buy_cont_num,\r\n        \"buy_email\":        (self_inv == true)?supplier_email:buy_email,\r\n        \"buy_sst_reg\":      (self_inv == true)?supplier_sst:buy_sst_reg,\r\n        \"buy_tin\":          (self_inv == true)?supplier_tin:buy_tin,\r\n        \"buy_reg_brn\":      (self_inv == true)?supplier_brn:buy_reg_brn,\r\n        \"buy_reg_nric\":     (self_inv == true)?supplier_nric:buy_reg_nric,\r\n        \"buy_reg_passport\": (self_inv == true)?supplier_passport:buy_reg_passport,\r\n        \"buy_reg_army\":     (self_inv == true)?supplier_army:buy_reg_army,\r\n        \"buy_adrs\": (self_inv == true)?supplier_adrs:buyer_adrs,\r\n        \"buy_city\":         (self_inv == true)?supplier_city:buyer_city,\r\n        \"buy_postal_zone\":  (self_inv == true)?supplier_pz:buyer_pz,\r\n        \"buy_adrs_line0\":   (self_inv == true)?supplier_l0:buyer_l0,\r\n        \"buy_adrs_line1\":   (self_inv == true)?supplier_l1:buyer_l1,\r\n        \"buy_adrs_line2\":   (self_inv == true)?supplier_l2:buyer_l2,\r\n        \"buy_country\":      (self_inv == true)?sup_ccty:buy_ccty,\r\n        \"buy_cste\":         (self_inv == true)?sup_cste:buy_cste,\r\n        \"dtrm\": jscall.input.dtrm,\r\n        \"ship_bp\": jscall.input.stbp,\r\n        \"ship_name\":        shipper_name,\r\n        \"ship_tin\":         shipper_tin,\r\n        \"ship_reg_brn\":     shipper_brn,\r\n        \"ship_reg_nric\":    shipper_nric,\r\n        \"ship_reg_passport\":shipper_passport,\r\n        \"ship_reg_army\":    shipper_army,\r\n        \"ship_adrs\": jscall.input.sadr,\r\n        \"ship_city\":        shipper_city,\r\n        \"ship_postal_zone\": shipper_pz,\r\n        \"ship_adrs_line0\":  shipper_l0,\r\n        \"ship_adrs_line1\":  shipper_l1,\r\n        \"ship_adrs_line2\":  shipper_l2,\r\n        \"ship_country\":     ship_ccty,\r\n        \"ship_cste\":        ship_cste,\r\n        // \"ship_bp\": (self_inv == true)?jscall.input.comp:jscall.input.stbp,\r\n        // \"ship_name\":        (self_inv == true)?supplier_name:shipper_name,\r\n        // \"ship_tin\":         (self_inv == true)?supplier_tin:shipper_tin,\r\n        // \"ship_reg_brn\":     (self_inv == true)?supplier_brn:shipper_brn,\r\n        // \"ship_reg_nric\":    (self_inv == true)?supplier_nric:shipper_nric,\r\n        // \"ship_reg_passport\":(self_inv == true)?supplier_passport:shipper_passport,\r\n        // \"ship_reg_army\":    (self_inv == true)?supplier_army:shipper_army,\r\n        // \"ship_adrs\": (self_inv == true)?supplier_adrs:jscall.input.sadr,\r\n        // \"ship_city\":        (self_inv == true)?supplier_city:shipper_city,\r\n        // \"ship_postal_zone\": (self_inv == true)?supplier_pz:shipper_pz,\r\n        // \"ship_adrs_line0\":  (self_inv == true)?supplier_l0:shipper_l0,\r\n        // \"ship_adrs_line1\":  (self_inv == true)?supplier_l1:shipper_l1,\r\n        // \"ship_adrs_line2\":  (self_inv == true)?supplier_l2:shipper_l2,\r\n        // \"ship_country\":     (self_inv == true)?sup_ccty:ship_ccty,\r\n        // \"ship_cste\":        (self_inv == true)?sup_cste:ship_cste,\r\n        \"frm1\": jscall.input.frm1,\r\n        \"frm2\": jscall.input.frm2,\r\n        \"rate\": jscall.input.rate,\r\n        \"tote\": jscall.input.tote,\r\n        \"toti\": jscall.input.toti,\r\n        \"tott\": jscall.input.tott,\r\n        \"pamt\": jscall.input.pamt,\r\n        // \"pydt\": \"YYYY-MM-DD\",\r\n        // \"pytm\": \"YYYY-MM-DD HH:MM\",\r\n        \"pref\": jscall.input.pref,\r\n        \"tpat\": jscall.input.tpat,\r\n        \"tnat\": jscall.input.tnat,\r\n        \"tdis\": jscall.input.tdis,\r\n        \"tfee\": jscall.input.tfee,\r\n        \"ramt\": jscall.input.ramt,\r\n        \"ttax\": jscall.input.ttax,\r\n        \"ttat\": jscall.input.ttat,\r\n        \"adis\": jscall.input.adis,\r\n        \"adis_reason\": \"\",\r\n        \"afee\": jscall.input.afee,\r\n        \"afee_reason\": \"\",\r\n        \"fbil\": jscall.input.fbil,\r\n        \"org_e_inv_no\": org_e_inv_no,\r\n        \"term\": jscall.input.term,\r\n        \"bref\": jscall.input.bref,\r\n        \"ftrd\": jscall.input.ftrd,\r\n        \"anum\": jscall.input.anum,\r\n        \"ochg\": jscall.input.ochg,\r\n        \"ochg_amnt\": jscall.input.ochg_amnt,\r\n        \"ochg_reason\": jscall.input.ochg_reason,\r\n        \"det_tax\": (jscall.input?.det_tax)?jscall.input.det_tax:\"\",\r\n        // \"bsdt\": \"YYYY-MM-DD\",\r\n        // \"bedt\": \"YYYY-MM-DD\",\r\n        \"amnt_ex\": (jscall.input?.amnt_ex)?jscall.input.amnt_ex:0,\r\n        \"dshp\": jscall.input.dshp,\r\n        \"submission_uid\": \"\",\r\n        \"doc_uuid\": \"\",\r\n        \"esta\": \"10\",\r\n        \"err_msg\": \"\",\r\n        // \"e_invdt\": getCurrentDateTime(),\r\n        \"einv_stat\": \"10\",\r\n        // \"etim\": \"YYYY-MM-DD HH:MM\",\r\n        \"modi_stat\": \"\",\r\n        \"src_type\": einvois.get_src_inv_type(jscall.input.src_type),\r\n        \"inv_pdf\": \"\",\r\n        \"reference0\": jscall.input.reference0 ? jscall.input.reference0 : \"\",\r\n        \"reference1\": jscall.input.reference1 ? jscall.input.reference1 : \"\",\r\n        \"reference2\": jscall.input.reference2 ? jscall.input.reference2 : \"\",\r\n        \"reference3\": jscall.input.reference3 ? jscall.input.reference3 : \"\",\r\n        \"reference4\": jscall.input.reference4 ? jscall.input.reference4 : \"\",\r\n        \"reference5\": jscall.input.reference5 ? jscall.input.reference5 : \"\",\r\n        \"reference6\": jscall.input.reference6 ? jscall.input.reference6 : \"\",\r\n        \"reference7\": jscall.input.reference7 ? jscall.input.reference7 : \"\",\r\n        \"reference8\": jscall.input.reference8 ? jscall.input.reference8 : \"\",\r\n        \"reference9\": jscall.input.reference9 ? jscall.input.reference9 : \"\",\r\n        \"qr_code\": \"\",\r\n        \"org_doc_uuid\": org_doc_uuid,\r\n        \"einv_version\": \"\"\r\n    }\r\n\r\n    // if (temp_doct == \"11\" || temp_doct == \"12\"){\r\n    //     [header_data[\"comp\"], header_data[\"inv_bp\"]] = [header_data[\"inv_bp\"], header_data[\"comp\"]]\r\n    //     [header_data[\"sup_adrs\"], header_data[\"buy_adrs\"]] = [header_data[\"buy_adrs\"], header_data[\"sup_adrs\"]]\r\n    // }\r\n    return CralDB.PublishTopic(\"einv_header\", jscall.company, \"Insert\", header_data, jscall.user)\r\n}\r\n\r\nfunction getOriginalDocumentReference(refDocNum){\r\n    let invoice_number = \"\"\r\n    let document_uuid = \"\"\r\n    let refDocs = refDocNum.split(\",\")\r\n    refDocs.forEach(data =\u003e {\r\n        cancel_rec = CralDB.QueryByComp(`select e_inv_no from {{cancel_header}} where adcn='${data}'`, jscall.company)\r\n        if (cancel_rec?.length){\r\n            invoice_number = cancel_rec[0].e_inv_no\r\n            org_document_uuid = CralDB.QueryByComp(`select doc_uuid from {{einv_header}} where e_inv_no='${cancel_rec[0].e_inv_no}'`, jscall.company)\r\n            if (org_document_uuid?.length){\r\n                document_uuid = org_document_uuid[0].doc_uuid\r\n            }\r\n        }\r\n    })\r\n    return [invoice_number, document_uuid]\r\n}\r\nfunction insert_conso_header(){\r\n    header_err_msg = \"\"\r\n    temp_doct = einvois.get_doc_type(jscall.input.doct)\r\n    if (temp_doct == \"\"){\r\n        header_err_msg = write_err_msg(header_err_msg, \"Document Type\")\r\n    }\r\n    temp_ccur = einvois.get_ccur(jscall.input.ccur, jscall.input.dataset)\r\n    if (temp_ccur == \"\"){\r\n        header_err_msg = write_err_msg(header_err_msg, \"Currency Code\")\r\n    }\r\n    temp_paym = einvois.get_paym(jscall.input.paym, jscall.input.dataset)\r\n    if (temp_paym == \"\"){\r\n        // header_err_msg = write_err_msg(header_err_msg, \"Payment Mode\")\r\n    }\r\n    temp_cvat = einvois.get_cvat(jscall.input.cvat, jscall.input.dataset)\r\n    if (temp_cvat == \"\"){\r\n        header_err_msg = write_err_msg(header_err_msg, \"Tax Code\")\r\n    }\r\n    header_data = {\r\n        \"comp\": jscall.input.comp,\r\n        \"tran\": jscall.input.tran,\r\n        \"idoc\": jscall.input.idoc,\r\n        // \"line\": jscall.input.line,\r\n        \"doct\": temp_doct,\r\n        \"itbp\": jscall.input.inv_bp,\r\n        \"itoa\": jscall.input.buy_adrs,\r\n        \"ccur\": temp_ccur,\r\n        \"rate\": jscall.input.rate,\r\n        \"paym\": temp_paym,\r\n        \"term\": jscall.input.term,\r\n        \"tote\": jscall.input.tote,\r\n        \"toti\": jscall.input.toti,\r\n        \"tott\": jscall.input.tott,\r\n        \"cvat\": temp_cvat,\r\n        \"stbp\": jscall.input.stbp,\r\n        \"sadr\": jscall.input.sadr,\r\n        \"dtrm\": jscall.input.dtrm,\r\n        \"styp\": jscall.input.styp,\r\n        \"cein\": false,\r\n        \"disb\": false,\r\n        \"dshp\": false,\r\n        \"sinc\": false,\r\n        \"fbil\": jscall.input.fbil,\r\n        // \"bsdt\": jscall.input.bsdt,\r\n        // \"bedt\": jscall.input.bedt,\r\n        \"pamt\": jscall.input.pamt,\r\n        // \"pydt\": jscall.input.pydt,\r\n        // \"pytm\": jscall.input.pytm,\r\n        \"pref\": jscall.input.pref,\r\n        \"bref\": jscall.input.bref,\r\n        \"tpat\": jscall.input.tpat,\r\n        \"tnat\": jscall.input.tnat,\r\n        \"tdis\": jscall.input.tdis,\r\n        \"tfee\": jscall.input.tfee,\r\n        \"ramt\": jscall.input.ramt,\r\n        \"ttax\": jscall.input.ttax,\r\n        \"ttat\": jscall.input.ttat,\r\n        \"adis\": jscall.input.adis,\r\n        \"afee\": jscall.input.afee,\r\n        \"frm1\": jscall.input.frm1,\r\n        \"ftrd\": jscall.input.ftrd,\r\n        \"anum\": jscall.input.anum,\r\n        \"frm2\": jscall.input.frm2,\r\n        \"ochg\": jscall.input.ochg,\r\n        \"ochg_amnt\": jscall.input.ochg_amnt,\r\n        \"ochg_reason\": jscall.input.ochg_reason,\r\n        \"esta\": \"10\",\r\n        // \"etim\": jscall.input.etim,\r\n        \"submission_uid\": \"\",\r\n        \"err_msg\": \"\",\r\n        \"line_cnt\": 0,\r\n        \"trgt\": \"\",\r\n        \"val_err\": \"\",\r\n        \"cncl\": false,\r\n        \"det_tax\": \"\",\r\n        \"amnt_ex\": 0,\r\n        \"e_invdt\": \"\",\r\n        \"src_type\": einvois.get_src_inv_type(jscall.input.src_type),\r\n        \"adis_reason\": \"\",\r\n        \"afee_reason\": \"\",\r\n        \"par_cncl\": false,\r\n        \"s_line_cnt\": jscall.input.line_cnt,\r\n        \"einv_stat\": \"10\",\r\n        \"conso_inv\": \"\",\r\n        \"inv_date\": getCurrentDateTime(),\r\n        \"data_set\": jscall.input.dataset,\r\n        \"inv_no\": \"\"\r\n    }\r\n    return CralDB.PublishTopic(\"conso_header\", jscall.company, \"Insert\", header_data, jscall.user)\r\n}\r\n\r\nfunction insert_line(input_data, table_name, einvNumber){\r\n    line_err_msg = \"\"\r\n    \r\n    temp_cvat = einvois.get_cvat(input_data.cvat, jscall.input.dataset)\r\n    if (temp_cvat == \"\"){\r\n        line_err_msg = write_err_msg(line_err_msg, \"Tax Code\")\r\n    }\r\n    \r\n    // temp_ccty = einvois.get_ccty(input_data.ccty)\r\n    // if (temp_ccty == \"\"){\r\n    //     // line_err_msg = write_err_msg(line_err_msg, \"Country Code\")\r\n    // }\r\n    temp_clas = einvois.get_clas(input_data.clas, jscall.input.dataset)\r\n    if (temp_clas == \"\"){\r\n        line_err_msg = write_err_msg(line_err_msg, \"Classification Code\")\r\n    }\r\n    if (table_name == \"einv_lines\"){\r\n        line_data = {\r\n            \"e_inv_no\": einvNumber,\r\n            \"line\": input_data.line,\r\n            \"cuni\": einvois.get_cuni(input_data.cuni, jscall.input.dataset),\r\n            \"ccty\": einvois.get_ccty(input_data.ccty, jscall.input.dataset),\r\n            \"clas_grp\": einvois.getClassificationGroup(),\r\n            \"clas\": temp_clas,\r\n            \"item\": input_data.item,\r\n            \"item_desc\": input_data.item_desc,\r\n            \"pric\": input_data.pric,\r\n            \"pvat\": input_data.pvat,\r\n            \"txai\": input_data.txai,\r\n            \"ceno\": input_data.ceno,\r\n            \"amtt\": input_data.amtt,\r\n            \"stot\": input_data.stot,\r\n            \"amti\": input_data.amti,\r\n            \"dqua\": input_data.dqua,\r\n            \"disc\": input_data.disc,\r\n            \"ldai\": input_data.ldai,\r\n            \"ccde\": input_data.ccde,\r\n            \"feer\": input_data.feer,\r\n            \"feea\": input_data.feea,\r\n            \"disc_reason\": (input_data?.disc_reason)?input_data.disc_reason:\"\",\r\n            \"fee_reason\": (input_data?.fee_reason)?input_data.fee_reason:\"\",\r\n            \"err_msg\": \"\",  \r\n            \"lsta\": \"10\",\r\n            \"modi_lsta\": \"\",\r\n            \"cvat\": temp_cvat,\r\n            \"reference0\":  input_data.reference0 ?  input_data.reference0 : \"\",\r\n            \"reference1\":  input_data.reference1 ?  input_data.reference1 : \"\",\r\n            \"reference2\":  input_data.reference2 ?  input_data.reference2 : \"\",\r\n            \"reference3\":  input_data.reference3 ?  input_data.reference3 : \"\",\r\n            \"reference4\":  input_data.reference4 ?  input_data.reference4 : \"\",\r\n            \"reference5\":  input_data.reference5 ?  input_data.reference5 : \"\",\r\n            \"reference6\":  input_data.reference6 ?  input_data.reference6 : \"\",\r\n            \"reference7\":  input_data.reference7 ?  input_data.reference7 : \"\",\r\n            \"reference8\":  input_data.reference8 ?  input_data.reference8 : \"\",\r\n            \"reference9\":  input_data.reference9 ?  input_data.reference9 : \"\",\r\n            \"reference10\": input_data.reference10 ? input_data.reference10 : \"\",\r\n            \"reference11\": input_data.reference11 ? input_data.reference11 : \"\",\r\n            \"reference12\": input_data.reference12 ? input_data.reference12 : \"\",\r\n            \"reference13\": input_data.reference13 ? input_data.reference13 : \"\",\r\n            \"reference14\": input_data.reference14 ? input_data.reference14 : \"\",\r\n            \"reference15\": input_data.reference15 ? input_data.reference15 : \"\",\r\n            \"reference16\": input_data.reference16 ? input_data.reference16 : \"\",\r\n            \"reference17\": input_data.reference17 ? input_data.reference17 : \"\",\r\n            \"reference18\": input_data.reference18 ? input_data.reference18 : \"\",\r\n            \"reference19\": input_data.reference19 ? input_data.reference19 : \"\",\r\n            \"reference20\": input_data.reference20 ? input_data.reference20 : \"\"\r\n        }\r\n    } else {\r\n        line_data = {\r\n            \"comp\": input_data.comp,\r\n            \"tran\": input_data.tran,\r\n            // \"doct\": temp_doct,\r\n            \"idoc\": input_data.idoc,\r\n            \"line\": input_data.line,\r\n            \"item\": input_data.item,\r\n            \"item_desc\": input_data.item_desc,\r\n            \"pric\": input_data.pric,\r\n            \"cvat\": temp_cvat,\r\n            \"pvat\": input_data.pvat,\r\n            \"txai\": input_data.txai,\r\n            \"ceno\": input_data.ceno,\r\n            \"amtt\": input_data.amtt,\r\n            \"stot\": input_data.stot,\r\n            \"amti\": input_data.amti,\r\n            \"dqua\": input_data.dqua,\r\n            \"cuni\": einvois.get_cuni(input_data.cuni, jscall.input.dataset),\r\n            \"disc\": input_data.disc,\r\n            \"ldai\": input_data.ldai,\r\n            \"ccde\": input_data.ccde,\r\n            \"ccty\": einvois.get_ccty(input_data.ccty, jscall.input.dataset),\r\n            \"clas\": temp_clas,\r\n            \"feer\": input_data.feer,\r\n            \"feea\": input_data.feea,\r\n            \"err_msg\": line_err_msg,\r\n            \"lsta\":\"10\",\r\n            // \"cncl\": false,\r\n            \"disc_reason\": \"\",\r\n            \"fee_reason\": \"\"\r\n        }\r\n    }\r\n    return CralDB.PublishTopic(table_name, jscall.company, \"Insert\", line_data, jscall.user)\r\n}\r\n\r\nfunction write_err_msg(err_msg, err_code){\r\n    if (err_msg == \"\"){\r\n        err_msg = \"Code Validation Failed for \" + err_code\r\n    } else {\r\n        err_msg = err_msg + \", \" + err_code\r\n    }\r\n    return err_msg\r\n}\r\n\r\nfunction getCurrentDateTime() {\r\n    let now = new Date();\r\n    let year = now.getUTCFullYear();\r\n    let month = String(now.getUTCMonth() + 1).padStart(2, '0');\r\n    let day = String(now.getUTCDate()).padStart(2, '0');\r\n    let hours = String(now.getUTCHours()).padStart(2, '0');\r\n    let minutes = String(now.getUTCMinutes()).padStart(2, '0');\r\n    let seconds = String(now.getUTCSeconds()).padStart(2, '0');\r\n    return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}Z`;\r\n}"}],"Roles":[{"Role":{"RoleName":"","Description":"","SystemRole":false,"ChildRoles":null,"AcessLevels":[]}}],"DataSets":[{"Dataset":{"Id":"getSubmissionUUID","Description":"Get Submission UUID","Query":"SELECT \r\n    e_inv_no AS \"E-Invoice Number\", \r\n    submission_uid AS \"Submission UID\", \r\n    doc_uuid AS \"Document UUID\",\r\n    doct AS \"Invoice Type\",\r\n    sup_name AS \"Supplier Name\",\r\n    inv_bp AS \"Buyer Code\",\r\n    CASE \r\n        WHEN esta = '20' THEN 'Submitted'\r\n        WHEN esta = '30' THEN 'Valid'\r\n        ELSE 'Unknown'\r\n    END AS \"LHDN Status\",\r\n    etim AS \"LHDN Validated Date \u0026 Time\"\r\nFROM \r\n    {{einv_header}}\r\nWHERE \r\n    e_invdt BETWEEN '$1' AND '$2'\r\n    AND esta IN ('20', '30');"}},{"Dataset":{"Id":"getUploadedFile","Description":"Get Uploaded File","Query":"select \r\n    file_name as \"File Name\", \r\n    upload_user as \"Uploaded User\", \r\n    upload_time as \"Upload Time\"\r\nfrom \r\n    {{uploaded_file_details}} \r\nwhere \r\n    upload_time between '$1' and '$2';"}},{"Dataset":{"Id":"getValidation","Description":"Get Validation","Query":"SELECT \r\n    v.einv_code AS \"E-Invoice Number\", \r\n    v.einv_line AS \"Line\", \r\n    v.seqn AS \"Sequence\", \r\n    v.val_catg AS \"Validation Category\", \r\n    v.err_code AS \"Error Code\", \r\n    v.mess AS \"Message\"\r\nFROM \r\n    {{einv_validation}} v\r\nJOIN \r\n    {{einv_header}} h \r\nON \r\n    v.einv_code = h.e_inv_no\r\nWHERE \r\n    h.e_invdt BETWEEN '$1' and '$2';;"}},{"Dataset":{"Id":"invoice_data","Description":"E-Invoice Data - MELM","Query":"WITH Headertext AS (\r\n    SELECT \r\n        CASE \r\n            WHEN reference1 IS NULL THEN '' \r\n            ELSE reference1 \r\n        END AS reference1\r\n    FROM {{einv_lines}}\r\n    WHERE e_inv_no = '$1' AND (reference1 != '' OR reference1 IS NULL) ORDER BY line LIMIT 1\r\n),\r\nAddHeaderTxt AS (\r\n    SELECT \r\n        CASE \r\n            WHEN reference2 IS NULL THEN '' \r\n            ELSE reference2 \r\n        END AS reference2\r\n    FROM {{einv_lines}}\r\n    WHERE e_inv_no = '$1' AND (reference2 != '' OR reference2 IS NULL) ORDER BY line LIMIT 1\r\n),\r\nLineTxt AS (\r\n    SELECT \r\n        CASE \r\n            WHEN reference3 IS NULL THEN '' \r\n            ELSE reference3 \r\n        END AS reference3\r\n    FROM {{einv_lines}}\r\n    WHERE e_inv_no = '$1' AND (reference3 != '' OR reference3 IS NULL) ORDER BY line LIMIT 1\r\n),\r\nDetailTxt AS (\r\n    SELECT \r\n        CASE \r\n            WHEN reference4 IS NULL THEN '' \r\n            ELSE reference4 \r\n        END AS reference4\r\n    FROM {{einv_lines}}\r\n    WHERE e_inv_no = '$1' AND (reference4 != '' OR reference4 IS NULL) ORDER BY line LIMIT 1\r\n),\r\nCombinedText AS (\r\n    SELECT \r\n        t.invoiceText,\r\n        t.index_txt\r\n    FROM \r\n        (SELECT\r\n            CONCAT(\r\n                Headertext.reference1,\r\n                CASE WHEN Headertext.reference1 = '' THEN '' ELSE '|'  END,\r\n                AddHeaderTxt.reference2, \r\n                CASE WHEN AddHeaderTxt.reference2 = '' THEN '' ELSE '|' END, \r\n                LineTxt.reference3, \r\n                CASE WHEN LineTxt.reference3 = '' THEN '' ELSE '|' END, \r\n                DetailTxt.reference4\r\n            ) AS invoiceText,\r\n            ROW_NUMBER() OVER (ORDER BY unnest(string_to_array(CONCAT(\r\n                Headertext.reference1,\r\n                CASE WHEN Headertext.reference1 = '' THEN '' ELSE '|' END,\r\n                AddHeaderTxt.reference2, \r\n                CASE WHEN AddHeaderTxt.reference2 = '' THEN '' ELSE '|' END, \r\n                LineTxt.reference3, \r\n                CASE WHEN LineTxt.reference3 = '' THEN '' ELSE '|' END, \r\n                DetailTxt.reference4\r\n            ), '|'))) AS index_txt\r\n        FROM \r\n            Headertext\r\n        FULL OUTER JOIN AddHeaderTxt ON true\r\n        FULL OUTER JOIN LineTxt ON true\r\n        FULL OUTER JOIN DetailTxt ON true) t\r\n)\r\n\r\nSELECT hdr.* ,\r\n        ct.index_txt  as index_txt,\r\n        lines.line,\r\n        lines.cuni,\r\n        lines.ccty,\r\n        lines.clas,\r\n        lines.item,\r\n        lines.item_desc,\r\n        lines.pric,\r\n        lines.pvat,\r\n        lines.txai,\r\n        lines.ceno,\r\n        lines.amtt,\r\n        lines.stot,\r\n        lines.amti,\r\n        lines.dqua,\r\n        lines.disc,\r\n        lines.ldai,\r\n        lines.ccde,\r\n        lines.feer,\r\n        lines.feea,\r\n        lines.disc_reason,\r\n        lines.fee_reason,\r\n        lines.cvat           as  l_cvat,\r\n        lines.reference0     as  l_reference0,\r\n        lines.reference1     as  l_reference1,\r\n        lines.reference2     as  l_reference2,\r\n        lines.reference3     as  l_reference3,\r\n        lines.reference4     as  l_reference4,\r\n        lines.reference5     as  l_reference5,\r\n        lines.reference6     as  l_reference6,\r\n        lines.reference7     as  l_reference7,\r\n        lines.reference8     as  l_reference8,\r\n        lines.reference9     as  l_reference9,\r\n        lines.reference10    as  l_reference10,\r\n        lines.reference11    as  l_reference11,\r\n        lines.reference12    as  l_reference12,\r\n        lines.reference13    as  l_reference13,\r\n        lines.reference14    as  l_reference14,\r\n        lines.reference15    as  l_reference15,\r\n        lines.reference16    as  l_reference16,\r\n        lines.reference17    as  l_reference17,\r\n        lines.reference18    as  l_reference18,\r\n        lines.reference19    as  l_reference19,\r\n        lines.reference20    as  l_reference20,\r\n        eds.skip_master,\r\n        etype.dsca          as doc_dsca,\r\n        CASE \r\n            WHEN hdr.doct IN ('01', '02', '03', '04') THEN hdr.sup_name\r\n            ELSE hdr.buy_name\r\n        END AS comp_name,\r\n        CASE \r\n            WHEN hdr.doct IN ('01', '02', '03', '04') THEN hdr.sup_email\r\n            ELSE hdr.buy_email\r\n        END AS comp_mail,\r\n        CASE \r\n            WHEN hdr.doct IN ('01', '02', '03', '04') THEN hdr.sup_cont_num\r\n            ELSE hdr.buy_cont_num\r\n        END AS comp_cont_num,\r\n        CASE \r\n            WHEN hdr.doct IN ('01', '02', '03', '04') THEN hdr.sup_reg_brn\r\n            ELSE hdr.buy_reg_brn\r\n        END AS comp_brn,\r\n        CASE \r\n            WHEN hdr.doct IN ('01', '02', '03', '04') THEN hdr.sup_tin\r\n            ELSE hdr.buy_tin\r\n        END AS comp_tin,\r\n        CASE \r\n            WHEN hdr.doct IN ('01', '02', '03', '04') THEN hdr.sup_sst_reg\r\n            ELSE hdr.buy_sst_reg\r\n        END AS comp_sst,\r\n        CASE \r\n            WHEN hdr.doct IN ('01', '02', '03', '04') THEN hdr.sup_msic\r\n            ELSE sup.sup_msic\r\n        END AS comp_msic,\r\n        CASE \r\n            WHEN hdr.doct IN ('01', '02', '03', '04') THEN hdr.sup_badsca\r\n            ELSE sup.sup_badsca\r\n        END AS comp_badsca,\r\n        CONCAT_WS(', ', \r\n            NULLIF(hdr.sup_adrs_line0, ''), \r\n            NULLIF(hdr.sup_adrs_line1, ''), \r\n            NULLIF(hdr.sup_adrs_line2, '')\r\n        ) AS supplier_address_line,\r\n        CONCAT_WS(', ', \r\n            NULLIF(hdr.sup_postal_zone, ''),\r\n            NULLIF(hdr.sup_city, ''),\r\n            NULLIF(scste.dsca , ''),\r\n            NULLIF(sccty.dsca, '')\r\n        ) AS supplier_address,\r\n        CONCAT_WS(', ', \r\n            NULLIF(hdr.buy_adrs_line0, ''), \r\n            NULLIF(hdr.buy_adrs_line1, ''), \r\n            NULLIF(hdr.buy_adrs_line2, '')\r\n        ) AS buyer_address_line,\r\n        CONCAT_WS(', ',\r\n            NULLIF(hdr.buy_postal_zone, ''),\r\n            NULLIF(hdr.buy_city, ''),\r\n            NULLIF(bcste.dsca , ''),\r\n            NULLIF(bccty.dsca, '')\r\n        ) AS buyer_address,\r\n        CASE \r\n            WHEN hdr.doct IN ('01', '02', '03', '04') THEN CONCAT_WS(', ', \r\n            NULLIF(hdr.sup_adrs_line0, ''), \r\n            NULLIF(hdr.sup_adrs_line1, ''), \r\n            NULLIF(hdr.sup_adrs_line2, '')\r\n        )\r\n            ELSE CONCAT_WS(', ', \r\n            NULLIF(hdr.buy_adrs_line0, ''), \r\n            NULLIF(hdr.buy_adrs_line1, ''), \r\n            NULLIF(hdr.buy_adrs_line2, '')\r\n        )\r\n        END AS comp_address_line,\r\n        CASE \r\n            WHEN hdr.doct IN ('01', '02', '03', '04') THEN CONCAT_WS(', ',\r\n            NULLIF(hdr.sup_postal_zone, ''),\r\n            NULLIF(hdr.sup_city, ''),\r\n            NULLIF(scste.dsca , ''),\r\n            NULLIF(sccty.dsca, '')\r\n        )\r\n            ELSE CONCAT_WS(', ', \r\n            NULLIF(hdr.buy_postal_zone, ''),\r\n            NULLIF(hdr.buy_city, ''),\r\n            NULLIF(bcste.dsca , ''),\r\n            NULLIF(bccty.dsca, '')\r\n        )\r\n        END AS comp_address,\r\n        scste.dsca          as sup_cste_dsca,\r\n        sccty.dsca          as sup_ccty_dsca,\r\n        bcste.dsca          as buy_cste_dsca,\r\n        bccty.dsca          as buy_ccty_dsca,\r\n        lines.cvat          as tax_type,\r\n        param.lhdn_portal    as qr_url,\r\n        sup_rbm.sup_reg_brn as rbm_brn,\r\n        sup_rbm.sup_tin     as rbm_tin,\r\n        sup_rbm.sup_sst_reg as rbm_sst,\r\n        sup_rbm.sup_msic    as rbm_msic,\r\n        CONCAT_WS(', ', \r\n            NULLIF(rbm_adrs.adrs_line0, ''), \r\n            NULLIF(rbm_adrs.adrs_line1, ''), \r\n            NULLIF(rbm_adrs.adrs_line2, '')\r\n        ) AS rbm_address_line,\r\n        CONCAT_WS(', ',\r\n            NULLIF(rbm_adrs.postal_zone, ''),\r\n            NULLIF(rbm_adrs.adrs_city, ''),\r\n            NULLIF(rbm_state.dsca , ''),\r\n            NULLIF(rbm_ccty.dsca, '')\r\n        ) AS rbm_address,\r\n        ct.invoiceText AS invtxt\r\nFROM  {{einv_header}} as hdr LEFT OUTER JOIN  {{einv_lines}} as lines ON hdr.e_inv_no = lines.e_inv_no\r\nLEFT JOIN CombinedText AS ct ON lines.line = (SELECT MAX(line) AS max_line\r\n    FROM {{einv_lines}}\r\n    WHERE e_inv_no = '$1')\r\nLEFT OUTER JOIN {{supplier_companies}} as sup ON hdr.comp = sup.sup_company\r\nLEFT OUTER JOIN {{address_master}} as cadr ON sup.sup_adrs = cadr.adrs_code and hdr.dataset = cadr.data_set\r\nLEFT OUTER JOIN {{entity_data_set}} as eds ON hdr.comp = eds.sup_company and hdr.dataset = eds.data_set\r\n\r\nLEFT OUTER JOIN {{state_codes}} as cstate ON cadr.adrs_state=cstate.code and eds.skip_master=true\r\nLEFT OUTER JOIN {{country}} as ccountry ON cadr.adrs_country=ccountry.ccty and eds.skip_master=true\r\n\r\nLEFT OUTER JOIN {{supplier_companies}} as sup_rbm ON sup_rbm.sup_company=889\r\nLEFT OUTER JOIN address_master_0889 as rbm_adrs ON sup_rbm.sup_adrs = rbm_adrs.adrs_code and hdr.dataset = rbm_adrs.data_set\r\nLEFT OUTER JOIN {{map_state_codes}} as rbm_state ON rbm_adrs.adrs_state=rbm_state.src_cste and rbm_adrs.adrs_country=rbm_state.src_ccty and hdr.dataset = rbm_adrs.data_set and eds.skip_master=false\r\nLEFT OUTER JOIN {{country_codes}} as rbm_ccty ON rbm_adrs.adrs_country=rbm_ccty.src_ccty and hdr.dataset = rbm_ccty.data_set and eds.skip_master=false\r\n\r\nLEFT OUTER JOIN {{map_state_codes}} as ccste ON cadr.adrs_state=ccste.src_cste and cadr.adrs_country=ccste.src_ccty and hdr.dataset = ccste.data_set and eds.skip_master=false\r\nLEFT OUTER JOIN {{country_codes}} as cccty ON cadr.adrs_country=cccty.src_ccty and hdr.dataset = cccty.data_set and eds.skip_master=false\r\n\r\nLEFT OUTER JOIN {{einv_doc_types}} as etype ON hdr.doct=etype.code\r\nLEFT OUTER JOIN {{state_codes}} as scste ON hdr.sup_cste=scste.code \r\nLEFT OUTER JOIN {{country}} as sccty ON hdr.sup_country=sccty.ccty\r\nLEFT OUTER JOIN {{state_codes}} as bcste ON hdr.buy_cste=bcste.code\r\nLEFT OUTER JOIN {{country}} as bccty ON hdr.buy_country=bccty.ccty,\r\n\r\n{{e_inv_parameter}} as param\r\nWHERE  hdr.e_inv_no = '$1'\r\norder by lines.line"}}],"Screens":[{"Screen":{"ScreenID":"","ScreenName":"","CreatedUser":"","CreatedTime":"0001-01-01T00:00:00Z","UpdatedUser":"","UpdatedTime":"0001-01-01T00:00:00Z"}},{"Screen":{"ScreenID":"","ScreenName":"","CreatedUser":"","CreatedTime":"0001-01-01T00:00:00Z","UpdatedUser":"","UpdatedTime":"0001-01-01T00:00:00Z"}},{"Screen":{"ScreenID":"","ScreenName":"","CreatedUser":"","CreatedTime":"0001-01-01T00:00:00Z","UpdatedUser":"","UpdatedTime":"0001-01-01T00:00:00Z"}},{"Screen":{"ScreenID":"","ScreenName":"","CreatedUser":"","CreatedTime":"0001-01-01T00:00:00Z","UpdatedUser":"","UpdatedTime":"0001-01-01T00:00:00Z"}},{"Screen":{"ScreenID":"","ScreenName":"","CreatedUser":"","CreatedTime":"0001-01-01T00:00:00Z","UpdatedUser":"","UpdatedTime":"0001-01-01T00:00:00Z"}},{"Screen":{"ScreenID":"","ScreenName":"","CreatedUser":"","CreatedTime":"0001-01-01T00:00:00Z","UpdatedUser":"","UpdatedTime":"0001-01-01T00:00:00Z"}},{"Screen":{"ScreenID":"","ScreenName":"","CreatedUser":"","CreatedTime":"0001-01-01T00:00:00Z","UpdatedUser":"","UpdatedTime":"0001-01-01T00:00:00Z"}},{"Screen":{"ScreenID":"","ScreenName":"","CreatedUser":"","CreatedTime":"0001-01-01T00:00:00Z","UpdatedUser":"","UpdatedTime":"0001-01-01T00:00:00Z"}},{"Screen":{"ScreenID":"","ScreenName":"","CreatedUser":"","CreatedTime":"0001-01-01T00:00:00Z","UpdatedUser":"","UpdatedTime":"0001-01-01T00:00:00Z"}},{"Screen":{"ScreenID":"","ScreenName":"","CreatedUser":"","CreatedTime":"0001-01-01T00:00:00Z","UpdatedUser":"","UpdatedTime":"0001-01-01T00:00:00Z"}},{"Screen":{"ScreenID":"","ScreenName":"","CreatedUser":"","CreatedTime":"0001-01-01T00:00:00Z","UpdatedUser":"","UpdatedTime":"0001-01-01T00:00:00Z"}},{"Screen":{"ScreenID":"","ScreenName":"","CreatedUser":"","CreatedTime":"0001-01-01T00:00:00Z","UpdatedUser":"","UpdatedTime":"0001-01-01T00:00:00Z"}},{"Screen":{"ScreenID":"","ScreenName":"","CreatedUser":"","CreatedTime":"0001-01-01T00:00:00Z","UpdatedUser":"","UpdatedTime":"0001-01-01T00:00:00Z"}},{"Screen":{"ScreenID":"","ScreenName":"","CreatedUser":"","CreatedTime":"0001-01-01T00:00:00Z","UpdatedUser":"","UpdatedTime":"0001-01-01T00:00:00Z"}},{"Screen":{"ScreenID":"","ScreenName":"","CreatedUser":"","CreatedTime":"0001-01-01T00:00:00Z","UpdatedUser":"","UpdatedTime":"0001-01-01T00:00:00Z"}},{"Screen":{"ScreenID":"","ScreenName":"","CreatedUser":"","CreatedTime":"0001-01-01T00:00:00Z","UpdatedUser":"","UpdatedTime":"0001-01-01T00:00:00Z"}},{"Screen":{"ScreenID":"","ScreenName":"","CreatedUser":"","CreatedTime":"0001-01-01T00:00:00Z","UpdatedUser":"","UpdatedTime":"0001-01-01T00:00:00Z"}},{"Screen":{"ScreenID":"","ScreenName":"","CreatedUser":"","CreatedTime":"0001-01-01T00:00:00Z","UpdatedUser":"","UpdatedTime":"0001-01-01T00:00:00Z"}},{"Screen":{"ScreenID":"","ScreenName":"","CreatedUser":"","CreatedTime":"0001-01-01T00:00:00Z","UpdatedUser":"","UpdatedTime":"0001-01-01T00:00:00Z"}},{"Screen":{"ScreenID":"","ScreenName":"","CreatedUser":"","CreatedTime":"0001-01-01T00:00:00Z","UpdatedUser":"","UpdatedTime":"0001-01-01T00:00:00Z"}},{"Screen":{"ScreenID":"","ScreenName":"","CreatedUser":"","CreatedTime":"0001-01-01T00:00:00Z","UpdatedUser":"","UpdatedTime":"0001-01-01T00:00:00Z"}},{"Screen":{"ScreenID":"","ScreenName":"","CreatedUser":"","CreatedTime":"0001-01-01T00:00:00Z","UpdatedUser":"","UpdatedTime":"0001-01-01T00:00:00Z"}},{"Screen":{"ScreenID":"","ScreenName":"","CreatedUser":"","CreatedTime":"0001-01-01T00:00:00Z","UpdatedUser":"","UpdatedTime":"0001-01-01T00:00:00Z"}},{"Screen":{"ScreenID":"","ScreenName":"","CreatedUser":"","CreatedTime":"0001-01-01T00:00:00Z","UpdatedUser":"","UpdatedTime":"0001-01-01T00:00:00Z"}},{"Screen":{"ScreenID":"","ScreenName":"","CreatedUser":"","CreatedTime":"0001-01-01T00:00:00Z","UpdatedUser":"","UpdatedTime":"0001-01-01T00:00:00Z"}},{"Screen":{"ScreenID":"","ScreenName":"","CreatedUser":"","CreatedTime":"0001-01-01T00:00:00Z","UpdatedUser":"","UpdatedTime":"0001-01-01T00:00:00Z"}},{"Screen":{"ScreenID":"","ScreenName":"","CreatedUser":"","CreatedTime":"0001-01-01T00:00:00Z","UpdatedUser":"","UpdatedTime":"0001-01-01T00:00:00Z"}},{"Screen":{"ScreenID":"","ScreenName":"","CreatedUser":"","CreatedTime":"0001-01-01T00:00:00Z","UpdatedUser":"","UpdatedTime":"0001-01-01T00:00:00Z"}},{"Screen":{"ScreenID":"","ScreenName":"","CreatedUser":"","CreatedTime":"0001-01-01T00:00:00Z","UpdatedUser":"","UpdatedTime":"0001-01-01T00:00:00Z"}},{"Screen":{"ScreenID":"","ScreenName":"","CreatedUser":"","CreatedTime":"0001-01-01T00:00:00Z","UpdatedUser":"","UpdatedTime":"0001-01-01T00:00:00Z"}},{"Screen":{"ScreenID":"","ScreenName":"","CreatedUser":"","CreatedTime":"0001-01-01T00:00:00Z","UpdatedUser":"","UpdatedTime":"0001-01-01T00:00:00Z"}},{"Screen":{"ScreenID":"","ScreenName":"","CreatedUser":"","CreatedTime":"0001-01-01T00:00:00Z","UpdatedUser":"","UpdatedTime":"0001-01-01T00:00:00Z"}},{"Screen":{"ScreenID":"","ScreenName":"","CreatedUser":"","CreatedTime":"0001-01-01T00:00:00Z","UpdatedUser":"","UpdatedTime":"0001-01-01T00:00:00Z"}},{"Screen":{"ScreenID":"","ScreenName":"","CreatedUser":"","CreatedTime":"0001-01-01T00:00:00Z","UpdatedUser":"","UpdatedTime":"0001-01-01T00:00:00Z"}},{"Screen":{"ScreenID":"","ScreenName":"","CreatedUser":"","CreatedTime":"0001-01-01T00:00:00Z","UpdatedUser":"","UpdatedTime":"0001-01-01T00:00:00Z"}},{"Screen":{"ScreenID":"","ScreenName":"","CreatedUser":"","CreatedTime":"0001-01-01T00:00:00Z","UpdatedUser":"","UpdatedTime":"0001-01-01T00:00:00Z"}},{"Screen":{"ScreenID":"","ScreenName":"","CreatedUser":"","CreatedTime":"0001-01-01T00:00:00Z","UpdatedUser":"","UpdatedTime":"0001-01-01T00:00:00Z"}},{"Screen":{"ScreenID":"","ScreenName":"","CreatedUser":"","CreatedTime":"0001-01-01T00:00:00Z","UpdatedUser":"","UpdatedTime":"0001-01-01T00:00:00Z"}},{"Screen":{"ScreenID":"","ScreenName":"","CreatedUser":"","CreatedTime":"0001-01-01T00:00:00Z","UpdatedUser":"","UpdatedTime":"0001-01-01T00:00:00Z"}}],"EmailTemplates":null,"Lists":[{"List":{"ListID":"src_inv_type","ListName":"Source Type","Items":{"Items":[{"Value":"10","Label":"Manual Sales"},{"Value":"20","Label":"Sales Order"},{"Value":"30","Label":"Purchase Invoice"},{"Value":"40","Label":"Sales Invoice"},{"Value":"110","Label":"Contract"},{"Value":"120","Label":"Warehouse Order"},{"Value":"130","Label":"Service Order"},{"Value":"140","Label":"Service Contract"},{"Value":"50","Label":"Purchase Order"}]}}}],"Reports":null}